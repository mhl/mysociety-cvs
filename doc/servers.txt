TODO:
Explain DNS
Explain email

mySociety Server Documentation
==============================

All information relating to configuration is stored in some form in CVS. 

There is a module "servers" in the mySociety private CVS repository
username@cvs.mysociety.org:/usr/local/privatecvs.  This module is checked out
as /data/servers on all servers.

The main mysociety module from public CVS is checked out in /data/mysociety.
These paths are hard coded and won't change - for example you can refer to
scripts in /data/mysociety/bin directly. There's a general purpose config
script "mysociety" in there, which should be symlinked from /usr/local/bin so
it is always on the path.

Servers are sorted into classes, named like ships after the first instance of
the class. Currently we only have one class "bitter", of which tea.ukcod.org.uk
and bitter.ukcod.org.uk are instances. Each server's root account has 
passphraseless SSH keys to log into servers of the same class, and only to ones
of the same class.

You can run commands on all servers of a class like this, e.g.
    mysociety class "apt-get dist-upgrade"
to do all security fixes.

Editing server-wide config (/etc and similar)
---------------------------------------------

Work out what class of server you are in, and then go into /data/servers/$classname/
$filename. For example, /data/servers/bitter/etc/sudoers is the sudoers file for
bitter class servers. Some files are templates, in which case they have the additional
suffix ".ugly". See for example etc/resolv.conf.ugly, which has a variable
substitution in it for the search domain name.

Edit the appropriate file. Then type "mysociety config" to install all config
files (in /etc, and so on, proper). This calls mysociety/bin/deploy-configuration. 

You'll get an error if a config file has been edited by somebody directly,
rather than via the CVS checkout.  This will show the diff, so you can make any
necessary changes to CVS. "mysociety config --no-check-existing" will force the
CVS changes to override any that were made directly to the config files.

Then commit any changes to /data/servers, leaving an appropriate comment.
There's no other change log file.

Editing users/groups
--------------------

Use adduser, useradd or any other tool which edits /etc/{group,passwd} as
normal. The state is then automatically synced between bitter and tea, and
saved in /data/servers/state/*/{group,passwd}.

Installing new software
-----------------------

Type "apt-get install $packagename".

Installed software for each server is listed in /data/servers/state/*/packages.
This is our own file, made by dumping the list of Debian packages from a simple
cron script /etc/cron.daily/save-package-list.

To leave a comment with a software installation, run /etc/cron.daily/save-package-list, 
then commit the file /data/servers/state/$hostname/packages.

If software you would like to install is not in the Debian stable archive, or
if it is compiled in an unusable way in the archive, then our policy is to make
a new Debian package. These should be put in debian.mysociety.org, which apt is
already configured to read from.  

Build such packages in /data/vhost/debian.mysociety.org/build on bitter.  It's
fine to use dh-make-perl to make Perl Debian packages, or to just download
somebody else's backport. Put binary package files in docs/binary, and source
code in docs/source. Then run bin/update-index to update the Packages.gz and
similar files.

Deploying new vhosts
--------------------

To add or update a new vhost, first edit /data/servers/vhosts.pl if necessary.
This contains a section with configuration information for a site (e.g.
"pledgebank") and a section for configuration for each instance of a site (e.g.
"www.pledgebank.com".  "matthew.pledgebank.com" and so on).

Next run "mysociety vhost staging.pledgebank.com", or whatever site you want to
update. This will do everything - create docs and logs directories with the
correct permissions, create or update an Apache config file, verify that the
conf/general file and database schema are up to date, either checkout or update
from CVS, restart any daemons, install any crontab, and make any localisation
.mo files. Oh, and "apachectl graceful".

All vhosts are installed under /data/vhost/$hostname. This contains docs and
logs exactly as was usual on older UKCOD servers.

Template files for the conf/general files are in /data/servers/vhosts/pb_conf_general.ugly 
and so on.  Crontabs are installed in /etc/cron.d/ as separate files for each
instance of each vhost.  Apache configuration lines are made from the template
in /data/servers/vhosts/single-vhost.conf.ugly.  

To install a vhost on all the servers, do 
    mysociety class "mysociety vhost staging.pledgebank.com"
This will run "mysociety vhost staging.pledgebank.com" on each server in the class.
It will install it only on the servers it is configured to run on in vhosts.pl,
the others will ignore the command and print a message. 

It's OK, but discouraged!, to add other vhosts manually in /data/vhosts.  In
that case, edit Apache configuration here:
/data/servers/$class/etc/apache/virtualhosts.d/special.conf.ugly

Creating a PostgreSQL database
------------------------------

Databases have the same name as the only database user who can access them.
The password is generated from a secret key by /data/mysociety/bin/pgpw, so it
is predictable. This system makes configuration across multiple servers
simple, without having to use identd or similar.

(Any MySQL database is configured similarly, using password from pgpw as well.
But hopefully you won't need to make a new one of those.)

To create a new database:
1. Decide which host you want to keep it on (there's no mirroring yet), and
become user "postgres" on that host.
2. Run "createdb <databasename>". Call live databases after the site e.g. "pb".
Call test databases with a suffix e.g. "pb-staging" or "pb-matthew".
3. As root, run "/data/mysociety/bin/pgpw <databasename>" to find the password.
4. As postgresql, run psql to get into the PostgreSQL command line, then do
        create user "<databasename>" with password '<password>'
   The double quotes on the db name are necessary if it has a dash "-" in it.
5. As postgresql, give the user permissions:
        grant all on database "<databasename>" to "<databasename>";
6. If you want it backed up, add the database to 
    /data/servers/bitter/etc/cron.daily/backup-databases
   Or, if you don't want it backed up, add it explicitly to the "don't back up"
   place there as well (or else cron will warn about it). Then deploy config
   with that on both servers.

Passwords are in the following places:
- inside the database itself, as the configuration for the user/database
- in the conf/general files for each vhost. These files are readable only by
  owner, and are generated from the template files in /data/servers/vhosts/*.
  The templates call pgpw, and "mysociety vhost" is run as root who has access
  to the secret key. This users the predictable nature of the passwords.
- in ~/.pgpass, which again is only user readable. There's a script
  /data/mysociety/bin/generate-pgpass which makes ~/.pgpass files for lots of
  users. This is a convenience feature. If you regularly want to access a database 
  as a user, then add appropriate entries in generate-pgpass and rerun it.

