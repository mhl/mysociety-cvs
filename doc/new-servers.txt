mySociety Server Documentation - New servers
============================================

Setting up the mySociety base system
------------------------------------

This is setting up a server from the point of having a base Debian system,
correctly partitioned. 

1. Install some Debian packages

    apt-get install vim less cvs perl libarchive-tar-perl liberror-perl libunix-mknod-perl libstatistics-distributions-perl libnetaddr-ip-perl geoip-bin locales
    apt-get install iproute ntp ntp-server ntp-simple ntpdate tmpreaper cron-apt exim4 exim4-base exim4-config exim4-daemon-heavy clamav clamav-base clamav-daemon clamav-freshclam libclamav1 sysstat

2. Checkout the mysociety and servers modules into /data

First you need to make SSH key so your user account can log into
cvs.mysociety.org from the new server (ssh-keygen -t dsa, and copy
into ~/.ssh/authorized_keys on cvs.mysociety.org). It is important that root
can't log into the CVS server as root - only servers in the same class should
do that. 

Then get a copy of mysociety/bin/ssh-as-sudoer and put it somewhere (/root
say), and set CVS_RSH to point to it. Now you can do CVS stuff as root,
acting as your real user account. (This is bootstrapping - CVS_RSH and
ssh-as-sudoer will automatically be set up properly from /etc/profile later)

Now as root:
    mkdir /data
    cd /data
    export CVSROOT=cvs.mysociety.org:/usr/local/cvs
    cvs co mysociety
    export CVSROOT=cvs.mysociety.org:/usr/local/privatecvs
    cvs co servers

3. Make the config files for the new server

Edit /data/servers/serverclass. You probably want your server to be in the base
class, and one other class. You may need to make a new class at this point, in
which case name the class after the first server of the class (as bitter is the
first bitter class server)

If you made a new class, then make the directory /data/servers/<classname>, and
probably /data/servers/<classname>/etc and so on. Config files specific to your
class will go in there - you need to add at least one now, or else CVS will
remove the empty directory and confuse you later on. Make sure you "cvs add"
this new directory and files.

Create /data/servers/<hostname>.pl, copying one of the others. "cvs add" this
file.

4. Install config files

    /data/mysociety/bin/mysociety config --no-check-existing

The first time we run with --no-check-existing as there is no tar of the 
previous installation to check against. After this first time, you 
can run the mysociety command as just "mysociety" without exact path.

5. Now we have the base config files installed, refresh a few things

apt-get update
apt-get dist-upgrade
/etc/init.d/ntp-server restart
/etc/init.d/exim4 restart
/etc/init.d/clamav-daemon restart
/etc/init.d/clamav-freshclam restart
locale-gen

Setting up PostgreSQL
---------------------

Use an archetype with appropriate PostgreSQL config files. Create the directory
/data$hostnumber (e.g. /data5), and add an _perm to it in the archetype config,
as the ones for other hostnumbers have.
    apt-get install postgresql postgresql-client postgresql-dev postgresql-doc openssl
PostgreSQL should set itself up with default tables in /data$hostnumber/postgres/

You need to make the certificates, in /data$hostnumber/postgres. Instructions
are here, including how to remove the passphrase from the key and self sign it.
    http://www.postgresql.org/docs/current/static/ssl-tcp.html
Copy the other servers to have symlinks like this:

lrwxrwxrwx  1 postgres postgres   27 Jan  4 12:03 server.crt -> svcs.steak.ukcod.org.uk.crt
lrwxrwxrwx  1 postgres postgres   27 Jan  4 12:04 server.key -> svcs.steak.ukcod.org.uk.key
-rw-------  1 postgres postgres 3518 Jan  4 12:01 svcs.steak.ukcod.org.uk.crt
-rw-------  1 postgres postgres  887 Jan  4 12:01 svcs.steak.ukcod.org.uk.key

chown everything new you've made to postgres:postgres, and check the permission bits too.
Now try starting PostgreSQL (/etc/init.d/postgresql start). Check
/var/log/all.log for any error messages. If you get one about your kernel
limiting a shared memory segment to a certain number of bytes, then you need to
activate the "kernel.shmmax = 80000000" setting in /etc/sysctl.conf.  You can
do this with the sysctl command (or by rebooting ;).

Next run these two queries as user postgres in the template1 database:
    CREATE FUNCTION plpgsql_call_handler()
        RETURNS OPAQUE AS '$libdir/plpgsql' LANGUAGE 'C';
    CREATE TRUSTED PROCEDURAL LANGUAGE 'plpgsql' HANDLER plpgsql_call_handler
        LANCOMPILER 'PL/pgSQL'
This will enable the PL/pgSQL language for all new databases.


