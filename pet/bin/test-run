#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for petitions. Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for petitions, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a petitions database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#
# TODO: 
# Add expat testing
# Add search
# Add search RSS
# Partially rejected petitions
# Resubmit and accept a previously partially rejected petition
# Search by category

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.64 2006-12-20 16:06:49 matthew Exp $';

use strict;
require 5.8.0;

use mySociety::Util;
use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;
use IO::Handle;
use POSIX;

my %allowed_actions = ( main => 1, rejection => 1, timeout => 1, resubmit => 1 );

sub help {
print <<END

Usage: test-run [OPTION] [ACTIONS...]

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)

Actions are a list of tests, run if present in this order:
    main - Create petition, sign it, wait until completion, send government response
    rejection - Make a petition, and reject it, resubmit, and reject again
    timeout - Test timeout for petitions which have been rejected once but not resubmitted
    resubmit - Make a petition, and reject it, resubmit, and approve
If you specify no actions, it will run all of them.

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $multispawn = 1; # can test launching multiple instances of cron jobs
our $help;
if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'help' =>               \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}
our %action;
foreach (@ARGV) {
    if ($allowed_actions{$_}) {
        $action{$_} = 1;
    } else {
        help();
        print STDERR "Action '$_' not known\n";
        exit(0);
    }
}
if (scalar(@ARGV) == 0) {
    %action = %allowed_actions;
}

# Set up options
our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $auth_user = mySociety::Config::get('AUTH_USER');
our $auth_password = mySociety::Config::get('AUTH_PASSWORD');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
our $web_domain = mySociety::Config::get('WEB_DOMAIN');
our $contact_email = mySociety::Config::get('CONTACT_EMAIL');
our $test_email_prefix = mySociety::Config::get('TEST_EMAIL_PREFIX');
sub email_n { my $n = shift; return "$test_email_prefix+$n\@$email_domain"; }
sub name_n { my $n = shift; return "Persephone Petitioner $n"; }

#############################################################################
# Main code

# Kill FastCGI processes
# XXX The processes respawn from SIGTERM, and SIGKILL seems to confuse Apache.
# Any way of doing this without needing root access to "apachectl graceful"?
#mySociety::Util::kill_named_processes(SIGTERM, '"^(ref-index.cgi|ref-sign.cgi|php4-cgi)\$"');

# Configure test harness class
date_print("Set up web test harness...") if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
$base_url =~ m#^http://(.+)/?$#;
$wth->browser_credentials("$1:80", "ePetitions staging site", $auth_user, $auth_password); 
$wth->browser_credentials("$1:80", "$web_domain admin pages", $auth_user, $auth_password); 
$wth->database_connect('PET_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_cycle_sequences(200);
$wth->log_watcher_setup($httpd_error_log);
$wth->log_watcher_self_test($base_url . "/test.php?error=1", "deliberate_error_to_test_error_handling");
my $eveld_bin = "$FindBin::Bin/../../services/EvEl/bin/eveld";
$eveld_bin = undef if ! -e $eveld_bin; # when running on servers rely on EvEl daemon, rather than calling EvEl binary directly XXX need more explicit way of distinguishing this case, than just checking evel isn't checked out in the same tree
$wth->email_setup({ eveld_bin => $eveld_bin,
                    log_mailbox => "log_mailbox" });
$wth->browser_set_validator("/usr/bin/validate");

# Start email and signup daemons
my $petemaild_pid;
my $petsignupd_pid;
END {
    my $exit_code = $?;
    # When script exits, get the email and signup daemons to gracefully shutdown
    kill(POSIX::SIGHUP, $petemaild_pid) if $petemaild_pid;
    kill(POSIX::SIGHUP, $petsignupd_pid) if $petsignupd_pid;
    # Wait for all children to have exited
    while (1) {
        my $wait_pid = wait();
        last if ($wait_pid == -1);
    }
    exit($exit_code);
};
date_print("Starting daemons...") if $verbose > 0;
$petemaild_pid = fork();
die "failed to fork" if (!defined($petemaild_pid));
my $daemon_verbose = -1;
$daemon_verbose = 0 if ($verbose > 1);
if ($petemaild_pid == 0) {
    exec("./petemaild", "--debug", "--verbose=$daemon_verbose");
    exit;
}
$petsignupd_pid = fork();
die "failed to fork" if (!defined($petsignupd_pid));
if ($petsignupd_pid == 0) {
    exec("./petsignupd", "--debug", "--verbose=$daemon_verbose");
    exit;
}

# Syntax check all .php files
date_print("Syntax check all PHP files...") if $verbose > 0;
$wth->php_check_syntax("../../pet/");
$wth->php_check_syntax("../../pet/templates/emails/", qr//);

# Run tests specified
if ($action{'main'}) {
    date_print("Main test...") if $verbose > 0;
    do_main_test();
}
if ($action{'rejection'}) {
    date_print("Rejection test...") if $verbose > 0;
    do_rejection_test();
}
if ($action{'timeout'}) {
    date_print("Timeout test...") if $verbose > 0;
    do_timeout_test();
}
if ($action{'resubmit'}) {
    date_print("Resubmit test...") if $verbose > 0;
    do_resubmit_test();
}

# Check for any unhandled mails or errors
call_send_messages();
call_mark_finished();
date_print("Checking no emails left at end...") if $verbose > 0;
$wth->email_check_none_left();
date_print("Checking no log file errors at end...") if $verbose > 0;
$wth->log_watcher_check();
date_print("Everything completed successfully") if $verbose > 0;

#############################################################################
# General functions

# Print log line with date
sub date_print {
    $_ = shift;
    print scalar localtime() . " $_\n";
}

# Print what we're doing
sub comment {
    my $comment = shift;
    date_print("  $comment") if $verbose > 0;
}

# Change the date that all parts of ePetitions think is today.  Call with no
# parameters to reset it to the actual today.
sub set_pet_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate');
        dbh()->do('insert into debugdate (override_today) values (?)', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate');
    }
    dbh()->commit();
}

# Call send messages cron job
sub call_send_messages {
     $wth->multi_spawn($multispawn, "php send-messages " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
}

# Call mark finished cron job
sub call_mark_finished {
     $wth->multi_spawn($multispawn, "php mark-finished " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
}

#############################################################################
# Create petition, sign it, wait until completion, send government response

sub do_create_part {
    my ($fields1, $fields2) = @_;
    comment("Create a new petition");
    $wth->browser_follow_link(text_regex => qr/Create a Petition/);
    $wth->browser_check_contents("before we start");
    $wth->browser_submit_form(form_name => 'pet_search',
        fields => { q => 'random words' }) or die "Failed to submit search";
    $wth->browser_check_contents("could not find any petitions");
    $wth->browser_submit_form(form_name => 'newpetition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => $fields1,
                button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => $fields2,
                button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have sent you an email to confirm");
}

sub do_main_test {
    set_pet_date('1988-08-08');

    my $petition_text = "take action on every petition on this site with more than 1000 signers";

    comment("Check front page works");
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Petitions");
    $wth->browser_check_no_contents("1 signature");

    do_create_part({
        pet_content => $petition_text,
        detail => "I think it is very important that the Prime Minister takes all petitions seriously. He should be compelled to do anything that more than 1000 people sign, as this would be good for democracy and not at all exploitable by small groups of people.\n\nMy favourite thing about this petition is that it has two paragraphs of text in the description. That rocks!",
        rawdeadline => 'Dec 31st',
        ref => 'onethousand',
        category => 521
    }, {
        name => name_n(99),
        organisation => "Society for the Advancement of Effective Petitioning",
        address => "The Beseechment Building\nImportuning Island",
        postcode => "SW1A 2AA",
        telephone => "01234 56789",
        email => email_n(99),
        email2 => email_n(99)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(99).'" <'.email_n(99).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m#^\s*(https?://.*)$#m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%Subject: New petition submitted%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%Subject: Your petition to the Prime Minister has been approved%To: '.email_n(99).'%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("1 signature");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents("31 December 1988");
    $wth->browser_check_contents('signForm');

    comment("Loop through several signers");
    my $c = 1;
    my $petition_uri = $wth->browser_uri();
    foreach my $signer_no (1488..1490) {
        comment("Sign the petition");
        $wth->browser_submit_form(form_name => 'signForm',
                fields => {
                    name => name_n($signer_no),
                    email => email_n($signer_no),
                    email2 => email_n($signer_no),
                    address => "$signer_no Signature Street\n\nSealville",
                    postcode => "EH99 1SP",
                    }, button => 'submit') or die "Failed to submit sign petition";
        $wth->browser_check_contents("We've sent you an email");

        comment("Find confirmation email");
        my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n($signer_no).'" <'.email_n($signer_no).'>%Please click on the link below to confirm your signature%');
        die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m#^\s*(https?://.*)$#m);
        my $confirm_signature_link = $1;
        if ($signer_no == 1490) {
            comment("Confirm signature by administrator");
            $wth->browser_get($admin_approve_link);
            $wth->browser_follow_link(text_regex => qr/Draft/);
            $wth->browser_check_contents("Petitions and Signers");
            $wth->browser_check_no_contents($petition_text);
            $wth->browser_follow_link(text_regex => qr/Live/);
            $wth->browser_check_contents($petition_text);
            $wth->browser_follow_link(text_regex => qr/admin/);
            $wth->browser_check_contents($petition_text);
            $wth->browser_submit_form(form_name => 'removesignerform1',
                fields => { }, button => 'confirm_signer') or die "Failed to submit admin confirm signer button";
            $wth->browser_check_contents("That signer has been confirmed");
            $wth->browser_check_contents("Signers \\(3\\)");
            $wth->browser_check_no_contents("confirm_signer");
        } else {
            comment("Confirm signature by user clicking link");
            comment("Confirmation link: $confirm_signature_link");
            $wth->browser_get($confirm_signature_link);
            $wth->browser_check_contents("Thank you, you're now signed up to this petition!");
        }

        comment("Check it says it is signed on the front page");
        $wth->browser_get($base_url);
        $wth->browser_check_contents($petition_text);
        $c++;
        $wth->browser_check_contents("$c signatures");

        $wth->browser_get($petition_uri);
    }

    comment("Delete a signer from the administration interface");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_follow_link(text_regex => qr/Live/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/admin/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents(name_n(1489));
    $wth->browser_check_contents("Signers \\(3\\)");
    $wth->browser_submit_form(form_name => 'removesignerform2',
        fields => { }, button => 'remove_signer') or die "Failed to submit admin remove signer button";
    $wth->browser_check_contents("That signer has been removed");
    $wth->browser_check_no_contents(name_n(1489));
    $wth->browser_check_contents("Signers \\(2\\)");

    comment("Create unconfirmed signature, so can try confirming after finishing");
    $wth->browser_get($petition_uri);
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1501),
                email => email_n(1501),
                email2 => email_n(1501),
                address => "1501 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_contents("We've sent you an email");
    my $confirm_signature_email = $wth->email_get_containing('%Subject: Signing up to ask the Prime Minister%To: "'.name_n(1501).'" <'.email_n(1501).'>%Please click on the link below to confirm your signature%');
    die "Confirm signature email link not found\n" if ($confirm_signature_email !~ m#^\s*(https?://.*)$#m);
    my $partial_signup_confirm = $1;
    comment("Partial signup confirm link: $partial_signup_confirm");

    comment("Go forward in time to day that deadline expires at end of, and make sure that nothing happens.");
    set_pet_date('1988-12-31');
    call_mark_finished();
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();

    comment("Get ready with the sign form, so can later try signing up after finishing");
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents("signForm");

    comment("Go forward one more day, get petition to mark itself as finished");
    set_pet_date('1989-01-01');
    call_mark_finished();

    comment("Try to sign the petition, using the form we loaded before finish");
    $wth->browser_check_contents("signForm");
    $wth->browser_submit_form(form_name => 'signForm',
            fields => {
                name => name_n(1500),
                email => email_n(1500),
                email2 => email_n(1500),
                address => "1500 Signature Street\n\nSealville",
                postcode => "EH99 1SP",
                }, button => 'submit') or die "Failed to submit sign petition";
    $wth->browser_check_no_contents("Now check your email!"); 
    $wth->browser_check_contents("Sorry, but that petition is now closed."); 

    # Policy is currently that signing a petition after the deadline using an
    # email you got before the deadline is OK. So instead of this test, we just
    # leave the unconfirmed signature around (as that is a useful test itself)
    #comment("Try to sign the petition, using the email we prepared earlier");
    #$wth->browser_get($partial_signup_confirm);
    #$wth->browser_check_no_contents("Thank you, you're now signed up to this petition!"); 
 
    comment("Check that petition now appears in closed section, and has no sign form");
    $wth->browser_get($base_url);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents("None");
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents("This petition is now closed");
    $wth->browser_check_no_contents('with government response');
    $wth->browser_check_no_contents('signForm');

    comment("Send a response to all the signers");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and Signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_check_no_contents('Response sent');
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                fields => { }, button => 'respond') or die "Failed to submit write response button";
    $wth->browser_submit_form(form_name => 'petition_admin_respond',
                fields => {
                    message_body => "Thank you for your petition. 

We are going to do exactly what you say, because obviously we would never get contradictory petitions from different people.

Yours faithfully, 

the PM.",
                    }, button => 'respond') or die "Failed to submit response form";
    $wth->browser_check_contents("Your response has been recorded and will be sent out shortly");
    call_send_messages();

    comment("Check everyone gets the response; signers, creator and admin");
    foreach my $signer_no (1488..1490) {
        $wth->email_get_containing('%Subject: Government response%To: '.email_n($signer_no).'%Thank you for your petition%');
    }
    $wth->email_get_containing('%Subject: Government response%To: '.email_n(99).'%Thank you for your petition%');
    $wth->email_get_containing('%Subject: Government response%To: '.$contact_email.'%Thank you for your petition%');

    comment("Check that can't send another response");
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Petitions and Signers/);
    $wth->browser_follow_link(text_regex => qr/Finished/);
    $wth->browser_check_contents('Response sent');
    $wth->browser_check_no_contents('petition_admin_respond');

    comment("Check government response is displayed on petition page");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_check_contents('with government response');
    $wth->browser_follow_link(text_regex => qr/$petition_text/);
    $wth->browser_check_contents('Thank you for your petition');

    comment("Load the RSS feeds to check for basic errors in them");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_back();
    $wth->browser_follow_link(text_regex => qr/Closed petitions/);
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_contents($petition_text);
}

#############################################################################
# Make a petition, and reject it, resubmit, and reject again

sub do_rejection_test {
    set_pet_date('1989-03-01');

    my $petition_text = "impeach President Bush";

    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "Isn't it obvious! I have no understanding of the powers of a Prime Minister! I'm going to dumbly ask him to do something that he can't do!",
        rawdeadline => '1 week',
        ref => 'rejecttest',
        category => 521
    }, {
        name => name_n(44),
        organisation => "Crazy Pressure Group",
        address => "Removal From Office Rd.",
        postcode => "SW1A 2AB",
        telephone => "09876 5432",
        email => email_n(44),
        email2 => email_n(44)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(44).'" <'.email_n(44).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m#^\s*(https?://.*)$#m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%Subject: New petition submitted%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'rejecttest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'Sorry, this is something the US Congress can do, but not the Prime Minster of the UK! You might want to change your petition to ask the Prime Minister to write a public letter to the Congress leader to ask him to impeach Bush, or something like that.',
                'rejection_cats[]' => ['4096', 13], # the 13th checkbox has value 4096, and means "PM doesn't have power"
            }, button => 'reject_submit') or die "Failed to submit reject details form";

    comment("Get rejection message to creator");
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%Subject: Your petition has been rejected%To: '.email_n(44).'%Outside the remit or powers%');
    die "Rejection email link not found\n" if ($rejection_email !~ m#^\s*(https?://.*)$#m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
   
    comment("Resubmit with change in petition text");
    my $petition_text_resubmitted = "bleach President Bush";
    $wth->browser_get($rejection_email_link);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents('Choose a short name for your petition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { pet_content => $petition_text_resubmitted }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have resubmitted your petition for approval.");

    comment("Get the email to the administrator");
    call_send_messages();
    $admin_approve_email = $wth->email_get_containing('%Subject: Resubmitted petition to the Prime Minister%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject again");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'rejecttest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'It is just nonsense, sorry!',
                'rejection_cats[]' => ['256', 9], # the 9th checkbox has value 256, and means "Wording that is impossible to understand"
            }, button => 'reject_submit') or die "Failed to submit reject details form";
    call_send_messages();
    $rejection_email = $wth->email_get_containing('%Subject: Your petition has been rejected%To: '.email_n(44).'%impossible to understand%');
    die "Rejection email link found when it should not have been\n" if ($rejection_email =~ m#^\s*(https?://.*)$#m);

    comment("Check appears on rejection page");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_follow_link(text_regex => qr/$petition_text_resubmitted/);
    $wth->browser_check_contents("This petition has been <strong>rejected</strong>");
}

#############################################################################
# Test timeout for petitions which have been rejected once but not resubmitted

sub do_timeout_test {
    set_pet_date('1989-06-01');

    my $petition_text = "say crap on the radio";

    $wth->browser_get($base_url);
    do_create_part({
        pet_content => $petition_text,
        detail => "Oh flip oh gosh oh golly gee. We said the word and got our knuckles rapped.",
        rawdeadline => '1 month',
        ref => 'timeouttest',
	category => 521,
    }, {
        name => name_n(55),
        organisation => "Stiff Little Fingers",
        address => "Uncle John's house",
        postcode => "WC2H 7LA",
        telephone => "02143 6587",
        email => email_n(55),
        email2 => email_n(55)
    });

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(55).'" <'.email_n(55).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m#^\s*(https?://.*)$#m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%Subject: New petition submitted%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'timeouttest'");
    $wth->browser_form_name('rejection_details_form');
    $wth->browser_field('rejection_cats[]', '128', 8); # the 8th checkbox has value 128, and means "offensive language"
    $wth->browser_field('rejection_cats[]', '1024', 11); # the 11th checkbox has value 1024, and means "attempting to market a product"
    $wth->browser_field('reject_hide[content]', '2');
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'You can\'t say that on our website either. Beside, you\'re just trying to sell your song.',
#                'categories[]' => ['128', 8], 
#                'categories[]' => ['1024', 11], 
            }, button => 'reject_submit') or die "Failed to submit reject details form";
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%Subject: Your petition has been rejected%To: '.email_n(55).'%Language which is offensive%');
    die "Rejection email link not found\n" if ($rejection_email !~ m#^\s*(https?://.*)$#m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
    # Do not resubmit

    comment("Just before timeout");
    set_pet_date('1989-06-29');
    call_mark_finished();
    call_send_messages();
    comment("... make sure not rejected yet");
    $wth->email_check_none_left();
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_no_contents($petition_text);
    comment("Just after timeout");
    set_pet_date('1990-06-30'); 
    call_mark_finished();
    call_send_messages();
    $wth->email_get_containing('%Subject: Your chance to revise your petition has expired%To: '.email_n(55).'%%');

    comment("Check it is on rejection page, but text not shown (as offensive)");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/View petitions/);
    $wth->browser_follow_link(text_regex => qr/By deadline/);
    $wth->browser_follow_link(text_regex => qr/Rejected petitions/);
    $wth->browser_check_contents("Petition details cannot be shown");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_follow_link(text_regex => qr/more details/);
    $wth->browser_check_contents("commercial endorsement");
    $wth->browser_check_contents("language which is offensive");
    $wth->browser_check_no_contents($petition_text);
    comment("... check not in RSS feed");
    $wth->browser_back();
    $wth->browser_follow_link(text_regex => qr/RSS/);
    $wth->browser_check_no_contents($petition_text);
}
   
#############################################################################
# Make a petition, and reject it, resubmit, and approve

sub do_resubmit_test {
    set_pet_date('1989-09-03');

    my $petition_text = "love the world and everything in it";

    comment("Create a new petition");
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/Create a Petition/);
    $wth->browser_check_contents("before we start");
    $wth->browser_submit_form(form_name => 'pet_search',
        fields => { q => 'random words' }) or die "Failed to submit search";
    $wth->browser_check_contents("could not find any petitions");
    $wth->browser_submit_form(form_name => 'newpetition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => {
                pet_content => $petition_text,
                detail => "If everyone did this, we'd all be much happier!",
                rawdeadline => '2 years',
                ref => 'resubmittest',
		category => 521
                }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Please change your duration so it is less than 1 year");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { rawdeadline => '1 year', ref => 'resubmittest'
                }, button => 'tostepyou') or die "Failed to submit step 1";

    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => {
                name => name_n(504),
                organisation => "Optimists Etc.",
                address => "Eternity Lane",
                postcode => "EH1 2NG",
                telephone => "00000 000",
                email => email_n(504),
                email2 => email_n(504)
                }, button => 'tosteppreview') or die "Failed to submit step 2";

    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";

    $wth->browser_check_contents("We have sent you an email to confirm");

    comment("Confirm petition");
    my $confirm_email = $wth->email_get_containing('%Subject: Confirm your new petition%To: "'.name_n(504).'" <'.email_n(504).'>%');
    die "Confirm petition email link not found\n" if ($confirm_email !~ m#^\s*(https?://.*)$#m);
    my $confirm_petition_link = $1;
    comment("Confirmation link: $confirm_petition_link");
    $wth->browser_get($confirm_petition_link);
    $wth->browser_check_contents("Thank you for creating your petition");
    $wth->browser_check_contents("It has been entered on our system");

    comment("Get the email to the administrator");
    call_send_messages();
    my $admin_approve_email = $wth->email_get_containing('%Subject: New petition submitted%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    my $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and reject");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_contents($petition_text);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'reject') or die "Failed to submit reject petition button";
    $wth->browser_check_contents("You have chosen to reject the petition 'resubmittest'");
    $wth->browser_submit_form(form_name => 'rejection_details_form',
            fields => { reject_reason => 'He could do this, but not really in his capacity as Prime Minister.',
                'rejection_cats[]' => ['4096', 13], # the 13th checkbox has value 4096, and means "PM doesn't have power"
            }, button => 'reject_submit') or die "Failed to submit reject details form";

    comment("Get rejection message to creator");
    call_send_messages();
    my $rejection_email = $wth->email_get_containing('%Subject: Your petition has been rejected%To: '.email_n(504).'%Outside the remit or powers%');
    die "Rejection email link not found\n" if ($rejection_email !~ m#^\s*(https?://.*)$#m);
    my $rejection_email_link = $1;
    comment("Rejection resubmit link: $rejection_email_link");
   
    comment("Resubmit with change in petition text and reference");
    my $petition_text_resubmitted = "change the law to make it compulsory for everyone to adore the world and everything that is in it";
    $wth->browser_get($rejection_email_link);
    $wth->browser_check_contents($petition_text);
    $wth->browser_check_contents('Choose a short name for your petition');
    $wth->browser_check_contents("Part 1 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { pet_content => $petition_text_resubmitted, ref => 'lovetheworld' }, button => 'tostepyou') or die "Failed to submit step 1";
    $wth->browser_check_contents("Part 2 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tosteppreview') or die "Failed to submit step 2";
    $wth->browser_check_contents("Part 3 of 3");
    $wth->browser_submit_form(form_name => 'newpetition',
            fields => { }, button => 'tocreate') or die "Failed to submit step 3";
    $wth->browser_check_contents("We have resubmitted your petition for approval.");

    comment("Get the email to the administrator");
    call_send_messages();
    $admin_approve_email = $wth->email_get_containing('%Subject: Resubmitted petition to the Prime Minister%To: '.$contact_email.'%');
    die "Admin approve email link not found\n" if ($admin_approve_email !~ m#^\s*(http://.*$)#m);
    $admin_approve_link = $1;
    comment("Admin approve link: $admin_approve_link");

    comment("Follow link to admin page and approve it");
    $wth->browser_get($admin_approve_link);
    $wth->browser_check_contents("Petitions and Signers");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->email_check_none_left();
    call_send_messages();
    $wth->browser_submit_form(form_name => 'petition_admin_approve',
            fields => { }, button => 'approve') or die "Failed to submit approve petition button";
    call_send_messages();
    my $petition_approved_email = $wth->email_get_containing('%Subject: Your petition to the Prime Minister has been approved%To: '.email_n(504).'%');
    $wth->browser_check_contents('Petition approved!');

    comment("Check that petition is on the front page, and has its own page");
    $wth->browser_get($base_url);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_check_contents("lovetheworld");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_no_contents("resubmittest");
    $wth->browser_follow_link(text_regex => qr/$petition_text_resubmitted/);
    $wth->browser_check_contents($petition_text_resubmitted);
    $wth->browser_check_contents("lovetheworld");
    $wth->browser_check_no_contents($petition_text);
    $wth->browser_check_no_contents("resubmittest");
    $wth->browser_check_contents('signForm');
    $wth->browser_check_contents("<strong>Signatures:</strong>&nbsp;1");
}

