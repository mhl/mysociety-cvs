#!/usr/bin/perl -w
#
# emailtosms:
# Send an SMS alert
#
# If OPTION_SMS_ALERTS is set to true in the config send an SMS alert
# if the incoming email matches the parameters in the config
#
# Copyright (c) 2007 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: emailtosms,v 1.9 2007-11-27 17:30:16 angie Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use Mail::Address;
use Mail::Internet;
use mySociety::SMS;

use mySociety::SystemMisc qw(print_log);

# Don't print diagnostics to standard error, as this can result in bounce
# messages being generated (only in response to non-bounce input, obviously).
mySociety::SystemMisc::log_to_stderr(0);

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::SystemMisc qw(print_log);

my $sms_alerts_on = mySociety::Config::get('SMS_ALERTS') || 0;

# if sms alerts aren't on just exit right now.
unless ($sms_alerts_on) {exit(0);}

# sms alerts are on so setup the config hash.

my $smsrecips = mySociety::Config::get_list('startswith' => 'SMS_ALERT_NUMBER');

my @smsusers = ();
foreach my $smsrecip (keys %$smsrecips) {
    my $userdefs = {};
    unless ($smsrecips->{$smsrecip}) {next;}
    my ($mobno, $st, $et) = split '\|', $smsrecips->{$smsrecip};
    my $sendnow = time_test($st, $et);
    if ($sendnow) {
        push @smsusers, $mobno;
    }
}

# check the sms alerts don't just contain default values

if (mySociety::Config::get('SMS_ALERT_FROM') =~ /xxx\@xxx.xxx/ || !@smsusers) {
    print_log('err', "no one receiving alerts at this time: please enter an SMS_ALERT_NUMBER in the conf/general file \n");
    exit(0);
}

my ($from, $subject) = read_email();

if ($from && $subject) {
    my ($sendalert) = test_values($from, $subject);
    if ($sendalert) {
        my ($messagesent) = send_sms($from, $subject, \@smsusers);
    }
}

sub read_email {
    my $from = '';
    my $subject = '';
    
    my @lines = ( );
    my $is_bounce_message = 0;
    while (defined($_ = STDIN->getline())) {
        chomp();
        # Skip any From_ line-- we don't need it. BUT, on some systems (e.g.
        # FreeBSD with default exim config), there will be no Return-Path in a
        # message even at final delivery time. So use the insanely ugly
        # "From MAILER-DAEMON ..." thing to distinguish bounces, if it is present.
        if (@lines == 0 and m#^From #) {
            $is_bounce_message = 1 if (m#^From MAILER-DAEMON #);
        } else {
            push(@lines, $_);
        }    
    }

    if (STDIN->error()) {
        # Failed to read it; should defer.
        print_log('err', "read message from standard input: $!; deferring");
        exit(75);   # EX_TEMPFAIL
    }

    my $m = new Mail::Internet(\@lines);
    if (!defined($m)) {
        # Unable to parse message; should drop.
        print_log('err', "unable to parse message from standard input; discarding");
        exit(1);
    }
    
    if (!$is_bounce_message)  {
        my $return_path = $m->head()->get("Return-Path");
    
        if (!defined($return_path)) {
        # No Return-Path; we're screwed.
        print_log('err', "message had no Return-Path and was not a bounce according to any From_ line; discarding");
        print_log('err', "configure your MDA to add a Return-Path to messages at delivery time");
        exit(0);
        } elsif ($return_path =~ m#<>#) {
            $is_bounce_message = 1;
        } else {
            $from = $m->head()->get('From');
            $subject = $m->head()->get('Subject');
            
        }

    }
    return ($from, $subject);
}

sub test_values {
    my ($from, $subject) = @_;
    my $SMS_ALERT_SUBJECT_SEARCH = mySociety::Config::get('SMS_ALERT_SUBJECT_SEARCH') || '';
    my $SMS_ALERT_FROM = mySociety::Config::get('SMS_ALERT_FROM') || '';
        if ($SMS_ALERT_SUBJECT_SEARCH && $subject && $subject =~ /$SMS_ALERT_SUBJECT_SEARCH/i ) {
            if (!$SMS_ALERT_FROM || $from =~ /$SMS_ALERT_FROM/i) {
            # subject and sender match the settings in the config so return true
            return 1;
        }
    }
    return 0;
}

sub send_sms {
    my ($from, $subject, $users)    = @_;
    
    my $smsmessage = $subject;
    if ($from) {
        $smsmessage .= " from: $from";
    }
    my $sms = mySociety::SMS->new('url' => mySociety::Config::get('SMS_C360_OUTGOING_URL'));

    $sms->message($smsmessage);
    foreach my $smsno (@$users) {
        $sms->to($smsno);
        $sms->send();
        if ($sms->error) {
            print_log('err', 'could not send SMS to ' . $sms->to . ': ' . $sms->error);
        }
        if ($sms->request_error) {
            print_log('err', 'could not send SMS to ' . $sms->to . ': ' . $sms->request_error);
        }
        if ($sms->request_content) {
            print_log('err', 'SMS response ' . $sms->request_content);
        }    
    }
    
    
}

sub time_test {
    my ($st, $et) = @_;
    $st ||= '00';
    $et ||= '23';
    
    my @start = split ':', $st;
    $start[0] ||= '00'; $start[1] ||= '00'; $start[2] ||= '00'; 
    
    my @end = split ':', $et;
    $end[0] ||= '23'; $end[1] ||= '59'; $end[2] ||= '59'; 

    my $start = join    '', @start;
    my $end = join    '', @end;
    
    my ($sec,$min,$hour)=localtime(time);
    my $currtime = $hour . $min . $sec;
    my $send = 0;
    
    if ($start <=  $currtime && $currtime <= $end) {
        $send =  1;
    }
    if ($end < $start) {
    	# user has chosen to have messages sent after midnight, as the end time is less that the start time.
    	if (($currtime < $end) || ($currtime > $start)) {
    		$send =  1; # past midnight but before end OR after midnight and after start.
    	}
    }
    return $send;
}
