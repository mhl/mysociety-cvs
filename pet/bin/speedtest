#!/usr/bin/perl -w
#
# speedtest:
#
# Copyright (c) 2006 Chris Lightfoot. All rights reserved.
# Email: chris@ex-parrot.com; WWW: http://www.ex-parrot.com/~chris/
#

my $rcsid = ''; $rcsid .= '$Id: speedtest,v 1.6 2006-08-14 12:26:03 matthew Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use IO::Socket;
use IO::Select;
use POSIX qw();
use Time::HiRes qw(time);

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
};
use mySociety::DBHandle qw(dbh);

use Petitions;

sub debug (@) {
    print STDERR "speedtest[$$]: ", @_, "\n";
}

sub next_id () {
    return scalar(dbh()->selectrow_array("select nextval('global_seq')"));
}

sub create_petition () {
    # Create the petition creator.
    my $creator_id = next_id();
    debug("creator_id = $creator_id");
    dbh()->do('
        insert into person (id, name, email)
        values (?, ?, ?)', {},
        $creator_id, 'Test Testy McTest', 'test@example.com');

    my $petition_id = next_id();
    debug("petition_id = $petition_id");

    dbh()->do("
        insert into petition (
            id, ref,
            detail,
            content,
            deadline,
            rawdeadline,
            person_id, name, organisation,
            address, postcode,
            telephone, org_url,
            creationtime, status, laststatuschange
        ) values (
            ?, ?,
            ?,
            ?,
            ms_current_timestamp()::date,
            ms_current_timestamp()::date,
            ?, ?, ?,
            ?, ?,
            ?, ?,
            ms_current_timestamp(), 'live', ms_current_timestamp()
        )", {},
        $petition_id, 'TestPetition',
        'More details on the test petition',
        'benchmark the petition system to find out how many servers we need',
        $creator_id, 'Test Testy McTest', 'Test Organisation',
        '1 Test Street, Test Town, Testshire', 'ZZ9 9ZZ',
        '0208 555 1234', 'http://example.com/'
        );
        
    dbh()->commit();
    debug("created new petition");

    return $petition_id;
}

sub add_signer ($) {
    my $petition_id = shift;

    # Create an auth token and request stash.
    my $stash = sprintf('%08x', int(rand(0xffffffff)));
    
    dbh()->do("
        insert into requeststash (key, method, url, post_data)
        values (?, 'POST', ?, ?)", {},
        $stash, 'http://petitions/TestPetition', 'x' x 120);
    
    dbh()->do("
        insert into token (scope, token, data, created)
        values ('login', ?, ?, ms_current_timestamp())", {},
        sprintf('%08x%04x', int(rand(0xffffffff)), int(rand(0xffff))),
        'email=test-...@example.com;name=Test McTest ....;stash=0123456789abcdef;direct=1'
        );

    dbh()->commit();
    
    # Create the person.
    my $person_id = next_id();
    dbh()->do('
        insert into person (id, name, email)
        values (?, ?, ?)', {},
        $person_id, "Test McTest $person_id", "test-$person_id\@example.com");

    # Sign the petition.
    my $signer_id = next_id();
    dbh()->do('
        insert into signer (
            id, petition_id, person_id,
            name, showname,
            signtime
        ) values (
            ?, ?, ?,
            ?, true,
            ms_current_timestamp()
        )', {},
        $signer_id, $petition_id, $person_id,
        "Test McTest $signer_id"
        );

    # Commit changes.
    dbh()->commit();
}

my $concurrency = shift(@ARGV);
$concurrency ||= 1;
debug("concurrency = $concurrency");

foreach (qw(requeststash token signer petition person)) {
    dbh()->do("delete from $_");
    debug("cleared $_ table...");
}
my $petition_id = create_petition();

my $foad = 0;
$SIG{INT} = $SIG{TERM} = sub { $foad = 1; };

# Spawn a number of child processes to add signers.
my @children = ( );
my ($s1, $s2) = IO::Socket->socketpair(AF_UNIX, SOCK_DGRAM, 0)
    or die "socketpair: $!";
for (my $i = 0; $i < $concurrency; ++$i) {
    my $pid = fork();
    if (!defined($pid)) {
        die "fork: $pid";
    } elsif (0 == $pid) {
        dbh()->selectrow_array('select 1');
        # wait until parent starts us off
        my $buf = '';
        $s2->sysread($buf, 1);
        debug("started");
        # add signers in a loop, writing a byte to the socket for each one.
        my $n = 0;
        while (!$foad) {
            add_signer($petition_id);
            $s2->syswrite("\0", 1)
                or die "write: $!";
            ++$n;
        }
        exit(0);
    } else {
        debug("spawned child process $pid");
        push(@children, $pid);
    }
}

# Spawned all necessary processes; start them off simultaneously, and then wait
# for them to complete inserts.
debug("starting children...");
for (my $i = 0; $i < $concurrency; ++$i) {
    $s1->syswrite("\0", 1);
}

my @stimes;
my $starttime = time();
while (!$foad && time() - $starttime < 10) {
    my $buf = '';
    my $n = $s1->sysread($buf, 1);
    if (!defined($n)) {
        warn "read: $!";
        last;
    } elsif ($n != 1) {
        warn "read returned $n (should be 1)";
        last;
    } else {
        push(@stimes, time());
        debug(scalar(@stimes), " signatures") if (0 == (@stimes % 100));
    }
}
my $endtime = time();

kill(TERM => @children);

printf "%f signatures/second\n", scalar(@stimes) / ($endtime - $starttime);

exit(0);
