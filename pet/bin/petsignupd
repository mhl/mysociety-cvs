#!/usr/bin/perl -w
#
# petsignupd:
# Back-end signup service for petitions site.
#
# Clients -- the web scripts on the front-end servers -- send signup details to
# us in UDP packets. On receipt of such a packet we record that a signature is
# to be made, but do not make any change to the database. Instead we set an
# alarm for a short interval in the future. Any more packets that arrive before
# the alarm fires are also recorded; when the alarm fires, we insert them all,
# commit the changes, and acknowledge them to the senders.
#
# The idea here is that a commit of ten inserts takes about as long as a commit
# of one insert, so we can improve throughput by batching inserts. That's very
# inconvenient in the front-end scripts, because it means they'd have to share
# database handles, but is easy with a coordinating daemon. If the daemon fails
# or the packets don't get through, then the web scripts can sign up in the
# usual way.
#
# TODO: proper logging; make it a proper daemon; verify performance.
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: petsignupd,v 1.6 2006-08-01 21:24:37 chris Exp $';

use strict;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}

use Carp;
use Errno;
use Error qw(:try);
use IO::Select;
use IO::Socket;
use Socket;
use Time::HiRes qw(time alarm);

use mySociety::DBHandle qw(dbh);

use Petitions;
use Petitions::RPC;

# Maximum (ideal) interval from signup request to commit.
use constant MAX_SIGNUP_TIME    => 0.25;    # seconds

my $s = new IO::Socket::INET(
                    LocalAddr => '0.0.0.0',
                    LocalPort => mySociety::Config::get('RPC_SERVER_PORT'),
                    Type => SOCK_DGRAM,
                    Proto => 'udp',
                    ReuseAddr => 1,
                    Blocking => 0) or die "socket: $!";

my $foad = 0;
$SIG{TERM} = sub { $foad = 1; };

my $alarm_pending = 0;
my $alarm_fired = 0;
$SIG{ALRM} = sub { $alarm_fired = 1; $alarm_pending = 0; };

my %pending = ( );
sub do_pending () {
    # Write them to the database.
    
    # Lock against concurrent processes.
    dbh()->do('lock table signer in row exclusive mode');

    foreach my $r (values(%pending)) {
        Petitions::RPC::sign_petition_db($r);
    }

    dbh()->commit();

    $s->blocking(1);
    foreach my $r (values(%pending)) {
        my $packet = Petitions::RPC::make_ack_packet($r->{cookie});
        if (!$s->send($packet, 0, $r->{client})) {
            my ($port, $ip) = sockaddr_in($r->{client});
            print STDERR "sending acknowledgment to $ip:$port: $!\n";
        }
    }
    $s->blocking(0);
}

my $inlock = 0;
while (!$foad) {
    my $buf = '';
    my $sender;
    my @ready = IO::Select->new($s)->can_read(MAX_SIGNUP_TIME / 10);
    if (@ready) {
        while (defined($sender = $s->recv($buf, 65536, 0))) {
            if (my $r = Petitions::RPC::parse_packet($buf)) {
                # We have a valid signup packet. Schedule an alarm so that we
                # will send a response within the deadline.
                if (!$alarm_pending) {
                    $alarm_pending = 1;
                    alarm(MAX_SIGNUP_TIME);
                }
                # Record address to which we send acknowledgement.
                $r->{client} = $sender;
                $pending{$r->{cookie}} = $r;
                # Done handling this request.
            } else {
                # Invalid packet of some sort. Log and continue.
                my ($port, $ip) = sockaddr_in($r->{sender});
                print STDERR "bad packet from $ip:$port\n";
            }
        }
        
        if (!$!{EAGAIN}) {
            print STDERR "recvfrom: $!\n";
        }
    }

    # If the alarm has fired, then do the signatures and send the
    # acknowledgements to the clients.
    if ($alarm_fired && keys(%pending)) {
        try {
            do_pending();
            $alarm_fired = 0;
        } catch mySociety::DBHandle::Error with {
            my $E = shift;
            print STDERR "committing ", scalar(keys(%pending)), " requests failed; DB error: ", $E->text(), "\n";
        };
        %pending = ( );
    }
}

if (keys(%pending)) {
    try {
        do_pending();
    } catch mySociety::DBHandle::Error with {
        my $E = shift;
        print STDERR "committing ", scalar(keys(%pending)), " requests failed (at shutdown); DB error: ", $E->text(), "\n";
    };
}

untie(%signercache);
