#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for WriteToThem.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for WriteToThem, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * an FYR database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
# * a Ratty database with name ending "_testharness", also configured in ../general/conf
#   (an entry not normally present when running FYR) and in the ratty service
#   that OPTION_RATTY_URL talks to.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# TODO:
# Trap ratty rule
# Sending faxes
# Questionaire
# Admin pages

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.6 2005-07-18 15:31:57 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

sub help {
print <<END

Usage: test-run [OPTION}

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $help;
if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'help' =>               \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}

# Set up options

our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
sub email_n { my $n = shift; return "fyrharness+$n\@pledgebank.owl"; }
sub name_n { my $n = shift; return "Cate Constituent $n"; }

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
$wth->log_watcher_setup($httpd_error_log);
$wth->database_connect('RATTY_');
$wth->database_drop_reload('../../services/Ratty/schema.sql');
$wth->database_cycle_sequences(200);
$wth->database_connect('FYR_QUEUE_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_cycle_sequences(200);
$wth->email_setup({ eveld_bin => undef, # "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../fyr/");
$wth->php_check_syntax("../../fyr/templates/emails/", qr//);

# Check that we can detect PHP errors
print "Confirm we can detect errors...\n" if $verbose > 0;
$wth->log_watcher_check();
$wth->browser_get($base_url . "/test.php?error=1" );
my $errors = $wth->log_watcher_get_errors();
die "Unable to detect errors from PHP" if ($errors !~ m/deliberate_error_to_test_error_handling/);

print "Sending example message...\n" if $verbose > 0;
do_send_example_message();
print "Testing ratty blocking message...\n" if $verbose > 0;
do_send_blocked_message();

# Check for any unhandled mails or errors
print "Checking no emails left at end...\n" if $verbose > 1;
$wth->email_check_none_left();
print "Checking no log file errors at end...\n" if $verbose > 1;
$wth->log_watcher_check();
print "Everything completed successfully\n";

#############################################################################
# General functions

# Call fyrqd for one pass
sub call_fyrqd {
    system("./fyrqd", "--debug", "--once", "--email", # $verbose > 1 ? qw(--verbose) : ()
        ) and die "Failed to call fyrqd";
}

#############################################################################

sub do_send_example_message() {
    $wth->browser_get($base_url);
    $wth->browser_check_contents("First, type your UK postcode:");
    $wth->browser_check_contents("This is a test version"); # Make sure mail will loop back rather than go to rep

    # Enter Cambridge postcode, and choose David Howarth MP
    $wth->browser_submit_form(form_name => 'postcodeForm',
        fields => { pc => 'CB23QJ'},  # The Guildhall, Cambridege 
        );
    $wth->browser_check_contents("Now select the representative you'd like to contact");
    $wth->browser_follow_link(text_regex => qr/David Howarth/);
    $wth->browser_check_contents("Now Write Your Message");

    # Fill in a test letter
    my $fields = { 
            writer_name => name_n(0),
            writer_address1 => '23 Something Street',
            writer_address2 => undef,
            writer_town => 'Someplace',
            writer_county => 'Someshire',
            writer_email => 'nonsense email',
            writer_phone => undef,
            body => "This is a test message which shouldn't ever get to a real representative. It means the test harness is working."
    };
    # ... with bad email first
    $wth->browser_submit_form(form_name => 'writeForm',
        fields => $fields, button => 'submitPreview');
    $wth->browser_check_contents('Choose a valid email address');
    # ... then with good
    $fields->{'writer_email'} = email_n(0);
    $wth->browser_submit_form(form_name => 'writeForm',
        fields => $fields, button => 'submitPreview');
    # ... check preview and submit it
    $wth->browser_check_contents('Now Preview The Message');
    $wth->browser_check_contents('It means the test harness is working');
    $wth->browser_submit_form(form_name => 'previewForm', button => 'submitSendFax');
    $wth->browser_check_contents('Nearly Done! Now check your email');

    # Wait for confirmation email to arrive
    call_fyrqd();
    # Click link in the confirmation email
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.name_n(0).' <'.email_n(0).'>'.
        '%Subject: Please confirm that you want to send a message to David Howarth MP'.
        '%THIS IS A TEST SITE, THE MESSAGE WILL BE SENT TO YOURSELF'.
        '%to confirm that you wish%');
    die "Message confirmation link not found" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
    print "Message confirm URL is $1\n" if $verbose > 1;
    $wth->email_check_url($1);
    $wth->browser_get($1);
    $wth->browser_check_contents("All done... We'll send your message now");
    # TODO: Check message isn't sent early

    # Check message is delivered to the representative
    call_fyrqd();
    my $confirmation_email = $wth->email_get_containing(
        '%From: '.name_n(0).' <'.email_n(0).'>'.
        '%To: David Howarth MP <'.email_n(0).'>'.
        '%Subject: Letter from your constituent '.name_n(0).
        '%23 Something Street'.
        '%Signed with an electronic signature%');
}

#############################################################################

sub do_send_blocked_message() {
    $wth->browser_get($admin_url);    
    $wth->browser_follow_link(text_regex => qr/Message Abuse Rules/);
    # check no existing rules
    $wth->browser_check_no_contents('View');

    # make new rule
    $wth->browser_follow_link(text_regex => qr/New rule/);
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm',
        fields => {}, button => 'newfilter');
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm', 
        fields => { 
            note => 'Block quicker than you can imagine',
            sequence => 1,
            requests => 0, interval => 0,
            action => 'freeze',
            field1 => 'message_length_characters',
            condition1 => '+<',
            value1 => '10',
            }, 
        button => 'done');

}


