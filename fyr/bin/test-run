#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for WriteToThem.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for WriteToThem, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * an FYR database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery, and
# * email address set in OPTION_EMAIL_PREFIX configured to pipe to ./handlemail
# * a Ratty database with name ending "_testharness", also configured in ../general/conf
#   (an entry not normally present when running FYR) and in the ratty service
#   that OPTION_RATTY_URL talks to.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# TODO:
# Sending faxes
# Bounce messages to rep
# Admin pages
# Via democratic services

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.12 2005-12-05 12:19:45 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;
use IO::Handle;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;
use mySociety::Util;

sub help {
print <<END

Usage: test-run [OPTION}

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $help;
if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'help' =>               \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}

# Set up options

our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
sub email_n { my $n = shift; return "fyrharness+$n\@writetothem.owl"; }
sub name_n { my $n = shift; return "Cate Constituent $n"; }

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
$wth->log_watcher_setup($httpd_error_log);
$wth->database_connect('RATTY_');
$wth->database_drop_reload('../../services/Ratty/schema.sql');
$wth->database_cycle_sequences(200);
$wth->database_connect('FYR_QUEUE_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_cycle_sequences(200);
$wth->email_setup({ eveld_bin => undef, # "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../fyr/");
$wth->php_check_syntax("../../fyr/templates/emails/", qr//);

# Check that we can detect PHP errors
print "Confirm we can detect errors...\n" if $verbose > 0;
$wth->log_watcher_check();
$wth->browser_get($base_url . "/test.php?error=1" );
my $errors = $wth->log_watcher_get_errors();
die "Unable to detect errors from PHP" if ($errors !~ m/deliberate_error_to_test_error_handling/);

#print "Sending bouncing message...\n" if $verbose > 0;
#do_send_bouncing_message();
print "Sending example message...\n" if $verbose > 0;
do_send_example_message();
print "Testing ratty blocking message...\n" if $verbose > 0;
do_send_blocked_message();

# Check for any unhandled mails or errors
call_fyrqd();
print "Checking no emails left at end...\n" if $verbose > 1;
$wth->email_check_none_left();
print "Checking no log file errors at end...\n" if $verbose > 1;
$wth->log_watcher_check();
print "Everything completed successfully\n";

#############################################################################
# General functions

# Call fyrqd for one pass
sub call_fyrqd {
    system("./fyrqd", "--debug", "--once", "--email", # $verbose > 1 ? qw(--verbose) : ()
        ) and die "Failed to call fyrqd";
}

# Change the date that all parts of WriteToThem think is today.  Call with no
# parameters to reset it to the actual today.
sub set_fyr_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate; insert into debugdate (override_today) values (?);', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate;');
    }
    print "Date changed to $new_date\n" if $verbose > 1;
    dbh()->commit();
}

# Run the fyr queue on many sequential dates
sub spin_queue {
    my ($format_string, $from, $to) = @_;
    for (my $i = $from; $i < $to; $i ++) {
        set_fyr_date(sprintf($format_string, $i));
        call_fyrqd();
        call_fyrqd();
        call_fyrqd();
    }
}

sub send_message_to_rep {
    my ($who, $postcode, $repname, $fields) = @_;
    $fields->{writer_name} = name_n($who);
    $fields->{writer_email} = email_n($who);
    
    $wth->browser_get($base_url);
    $wth->browser_check_contents("First, type your UK postcode:");
    $wth->browser_check_contents("This is a test version"); # Make sure mail will loop back rather than go to rep

    # Choose
    $wth->browser_submit_form(form_name => 'postcodeForm',
        fields => { pc => $postcode},  
        );
    $wth->browser_check_contents("Now select the representative you'd like to contact");
    $wth->browser_follow_link(text_regex => qr/$repname/);
    $wth->browser_check_contents("Now Write Your Message");

    # Fill in a test letter
    $wth->browser_submit_form(form_name => 'writeForm',
        fields => $fields, button => 'submitPreview');
    # ... check preview and submit it
    $wth->browser_check_contents('Now Preview The Message');
    $wth->browser_check_contents($fields->{body});
    $wth->browser_submit_form(form_name => 'previewForm', button => 'submitSendFax');
    $wth->browser_check_contents('Nearly Done! Now check your email');

    # Wait for confirmation email to arrive
    call_fyrqd();
    # Click link in the confirmation email
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.name_n($who).' <'.email_n($who).'>'.
        '%Subject: Please confirm that you want to send a message to '.$repname.' MP'.
        '%THIS IS A TEST SITE, THE MESSAGE WILL BE SENT TO YOURSELF'.
        '%to confirm that you wish%');
    die "Message confirmation link not found" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
    print "Message confirm URL is $1\n" if $verbose > 1;
    $wth->email_check_url($1);
    $wth->browser_get($1);
    $wth->browser_check_contents("All done... We'll send your message now");
    # TODO: Check message isn't sent early
}

sub check_delivered_to_rep {
    my ($who, $repname, $extra_check) = @_;

    call_fyrqd();
    my $content = $wth->email_get_containing(
        '%From: '.name_n($who).' <'.email_n($who).'>'.
        '%To: '.$repname.' MP <'.email_n($who).'>'.
        '%Subject: Letter from your constituent '.name_n($who).
        '%'.$extra_check.
        '%Signed with an electronic signature%');

    return $content;
}

# Send one mail to bounce handling script
sub call_handlemail {
    my ($content) = @_;
    my $p = mySociety::Util::pipe_via("./handlemail") or die "failed to call handlemail";
    $p->print($content);
    $p->close(); 
}

#############################################################################

sub do_send_example_message() {
    set_fyr_date('1990-01-01');
    send_message_to_rep(0, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '23 Something Street',
            writer_town => 'Someplace',
            writer_county => 'Someshire',
            writer_phone => undef,
            body => "This is a test message which shouldn't ever get to a real representative. It means the test harness is working. It's quite long because real messages are quite long. People ask lots of questions which when they are answered will solve all their problems. Sometimes this works, sometimes it doesn't."
        } 
    );
    check_delivered_to_rep(0, 'David Howarth', '23 Something Street');

    # 2 days to get over bounce_wait
    spin_queue('1990-01-%02d', 2, 4);
    # 13 days more, no questionnaire
    spin_queue('1990-01-%02d', 4, 17);
    $wth->email_check_none_left();
    # 14th day provokes sending of questionnaire
    set_fyr_date('1990-01-18');
    call_fyrqd();
    my $questionnaire_email = $wth->email_get_containing(
        '%To: '.name_n(0).' <'.email_n(0).'>'.
        '%Subject: Did your MP reply to your letter?'.
        '%Two weeks ago we sent your letter to David Howarth MP%');
    # And reminder
    #spin_queue('1990-01-%02d', 16, 22);
    $wth->email_check_none_left();

    # Get links from questionnaire email
    die "Questionnaire yes link not found" if ($questionnaire_email !~ m#^\s*($base_url/Y/.*$)#m);
    my $yes_link = $1;
    $wth->email_check_url($yes_link);
    print "Questionnaire 'yes' URL is $yes_link\n" if $verbose > 1;
    die "Questionnaire no link not found" if ($questionnaire_email !~ m#^\s*($base_url/N/.*$)#m);
    my $no_link = $1;
    $wth->email_check_url($no_link);
    print "Questionnaire 'no' URL is $no_link\n" if $verbose > 1;

    $wth->browser_get($yes_link);
    $wth->browser_check_contents('Great! Many, many thanks for your feedback.');
    $wth->browser_follow_link(text_regex => qr/YES/);
    $wth->browser_check_contents('Many thanks - We hope you enjoyed the experience');
}

#############################################################################

sub do_send_blocked_message() {
    set_fyr_date('1990-06-30');

    # Go to abuse rules page
    $wth->browser_get($admin_url);    
    $wth->browser_follow_link(text_regex => qr/Message Abuse Rules/);
    # ... check no existing rules
    $wth->browser_check_no_contents('View');

    # ... make new rule
    $wth->browser_follow_link(text_regex => qr/New rule/);
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm',
        fields => {}, button => 'newfilter');
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm', 
        fields => { 
            note => 'Block quicker than you can imagine',
            sequence => 1,
            requests => 0, interval => 0,
            message => 'freeze',
            field1 => 'message_length_characters',
            condition1 => '+<',
            value1 => '200',
        }, 
        button => 'done');
    $wth->browser_check_contents('Block quicker than you can imagine');

    # This now shouldn't get there, as the message should be frozen
    send_message_to_rep(1, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '23 Something Street',
            writer_town => 'Someplace',
            writer_county => 'Someshire',
            writer_phone => undef,
            body => "V. short"
        } 
    );
    call_fyrqd();
    $wth->email_check_none_left();
}

#############################################################################

=comment
sub do_send_bouncing_message() {
    send_message_to_rep(0, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '10 Boing Boing Land',
            writer_town => 'Springy Street',
            writer_county => 'Thumpshire',
            writer_phone => '01234 567890',
            body => "Bouncing message this is.  A test."
        } 
    );
    my $content = check_delivered_to_rep(0, 'David Howarth', 'Boing Boing Land');

    # Now fake that it bounced
    call_handlemail($content);

    # Find message in admin interface
    $wth->browser_get($admin_url);    
    $wth->browser_follow_link(text_regex => qr/Message Queue/);
    $wth->browser_follow_link(text_regex => qr/Recent Created/);
    $wth->browser_check_contents('<b>frozen</b>');
}
=cut


