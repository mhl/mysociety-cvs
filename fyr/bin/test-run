#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for WriteToThem.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for WriteToThem, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * an FYR database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery, and
# * similar address with "team" instead of "n" configured in OPTION_CONTACT_EMAIL
# * email address set in OPTION_EMAIL_PREFIX configured to pipe to ./handlemail
# * a Ratty database with name ending "_testharness", also configured in ../general/conf
#   (an entry not normally present when running FYR) and in the ratty service
#   that OPTION_RATTY_URL talks to.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# TODO:
# Sending faxes
# Bounce messages to rep
# Admin pages
# Via democratic services
# User correction

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.30 2006-10-05 10:27:28 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;
use IO::Handle;

use mySociety::Util;
use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

sub help {
print <<END

Usage: test-run [OPTION] [ACTION]...

Actions are a list of tests, run if present in this order:
    example - send example message successfully, and an example message blocked by ratty
    bounce  - test autoresponder (TODO: doesn't test rep email failure bounces)
    cobrand - send example message via a cobrand site (AnimalAid)
    lords   - send example message to a Lord
If you specify no actions, it will run all of them.

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)
    --multispawn=n Test concurrency by calling scripts this many times at once (default 2)

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $multispawn = 2;
our $help;
if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'multispawn=i' => \$multispawn,
        'help' =>               \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}
our %action;
foreach (@ARGV) {
    if ($_ eq "example") {
        $action{'example'} = 1;
    } elsif ($_ eq "bounce") {
        $action{'bounce'} = 1;
    } elsif ($_ eq "cobrand") {
        $action{'cobrand'} = 1;
    } elsif ($_ eq "lords") {
        $action{'lords'} = 1;
    } else {
        help();
        print "Action '$_' not known\n";
        exit(0);
    }
}
if (scalar(@ARGV) == 0) {
    $action{'example'} = 1;
    $action{'bounce'} = 1;
    $action{'cobrand'} = 1;
    $action{'lords'} = 1;
}


# Set up options
our $base_url;
sub set_base_url($) {
    my $cobrand = shift;
    $base_url = "http://" . $cobrand . mySociety::Config::get('WEB_DOMAIN');
}
set_base_url('');
die "domain conf not consistent" if (mySociety::Config::get('BASE_URL') ne $base_url);
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $contact_email = mySociety::Config::get('CONTACT_EMAIL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
sub email_n { my $n = shift; return ($n == 666 ? "this-will-bounce\@" : "fyrharness+$n\@") . mySociety::Config::get('EMAIL_DOMAIN'); }
sub name_n { my $n = shift; return "Cate Constituent $n"; }

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
$wth->log_watcher_setup($httpd_error_log);
$wth->log_watcher_self_test($base_url . "/test.php?error=1", "deliberate_error_to_test_error_handling");
$wth->database_connect('RATTY_');
$wth->database_drop_reload('../../services/Ratty/schema.sql');
$wth->database_cycle_sequences(200);
$wth->database_connect('FYR_QUEUE_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_cycle_sequences(200);
$wth->email_setup({ eveld_bin => undef, # "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../fyr/");
$wth->php_check_syntax("../../fyr/templates/emails/", qr//);

if ($action{'example'}) {
    print "Sending example message...\n" if $verbose > 0;
    do_send_example_message();
    print "Testing ratty blocking message...\n" if $verbose > 0;
    # do_send_blocked_message depends on do_send_example_message having
    # been already called, to populate the Ratty example fields table
    do_send_blocked_message();
}
if ($action{'bounce'}) {
    print "Testing bouncing stuff...\n" if $verbose > 0;
    do_test_bounce_stuff();
}
if ($action{'cobrand'}) {
    print "Sending cobrand message...\n" if $verbose > 0;
    do_send_cobrand_message();
}
if ($action{'lords'}) {
    print "Sending Lords message...\n" if $verbose > 0;
    do_send_lords_message();
}
#print "Sending bouncing message...\n" if $verbose > 0;
#do_send_bouncing_message();

# Check for any unhandled mails or errors
call_fyrqd();
print "Checking no emails left at end...\n" if $verbose > 1;
$wth->email_check_none_left();
print "Checking no log file errors at end...\n" if $verbose > 1;
$wth->log_watcher_check();
print "Everything completed successfully\n";

#############################################################################
# General functions

# Call fyrqd for one pass
sub call_fyrqd {
    $wth->multi_spawn($multispawn, "./fyrqd --debug --once --email" 
            # . ($verbose > 1 ? qw(--verbose) : ())
        , $verbose) ;
}

# Change the date that all parts of WriteToThem think is today.  Call with no
# parameters to reset it to the actual today.
sub set_fyr_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate; insert into debugdate (override_today) values (?);', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate;');
    }
    print "Date changed to $new_date\n" if $verbose > 1;
    dbh()->commit();
}

# Run the fyr queue on many sequential dates
sub spin_queue {
    my ($format_string, $from, $to) = @_;
    for (my $i = $from; $i < $to; $i ++) {
        set_fyr_date(sprintf($format_string, $i));
        call_fyrqd();
        call_fyrqd();
        call_fyrqd();
    }
}

sub send_message_to_rep {
    my ($who, $postcode, $repname, $fields, $cobrand, $birthday) = @_;
    $fields->{writer_name} = name_n($who);
    $fields->{writer_email} = email_n($who);
    $fields->{writer_email2} = email_n($who);
    
    if (!$birthday) {
        # Postcode selection of representative
        my $start_url = $base_url;
        $start_url .= "?cocode=9" if ($cobrand && $cobrand eq "animalaid");
        $wth->browser_get($start_url);
        $wth->browser_check_contents("First, type your UK postcode:");
        $wth->browser_submit_form(form_name => 'postcodeForm',
            fields => { pc => $postcode},  
            );
        $wth->browser_check_contents("Now select the representative you'd like to contact");
        $wth->browser_follow_link(text_regex => qr/$repname/);
    } else {
        # House of Lords selection by birthday
        $wth->browser_get($base_url . "/lords");
        $wth->browser_check_contents("Which Lord would you like to write to?");
        $wth->browser_submit_form(form_name => 'dateLordForm',
            fields => { d => $birthday},  
            );
        # Postcode gets filled in on letter writing page in Lords case
        $fields->{pc} = $postcode;
    }

    # Fill in a test letter
    $wth->browser_check_contents("Now Write Your Message");
    $wth->browser_check_contents("This is a test version"); # Make sure mail will loop back rather than go to rep
    $wth->browser_check_contents($repname);
    $wth->browser_submit_form(form_name => 'writeForm',
        fields => $fields, button => 'submitPreview');
    # ... check preview and submit it
    $wth->browser_check_contents('Now Preview The Message');
    $wth->browser_check_contents($fields->{body});
    $wth->browser_submit_form(form_name => 'previewForm', button => 'submitSendFax');
    $wth->browser_check_contents('Nearly Done! Now check your email');

    # TODO: Check message isn't sent early

    # Wait for confirmation email to arrive
    call_fyrqd();
    if ($who == 666) {
        # Mail to and from same deliberately invalid address, so will not arrive
        $wth->email_check_none_left();
        # Confirm via database instead, as what we really want to test is MP bounce
        dbh()->do("update message set state = 'ready' where sender_email = ?", {}, email_n($who));
        dbh()->commit();
    } else {
        # Click link in the confirmation email
        my $confirmation_email = $wth->email_get_containing(
            '%Subject: Please confirm that you want to send a message to %'.$repname.
            '%To: "'.name_n($who).'" <'.email_n($who).'>'.
            '%THIS IS A TEST SITE, THE MESSAGE WILL BE SENT TO YOURSELF'.
            '%to confirm that you wish%');
        die "Message confirmation link not found" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
        print "Message confirm URL is $1\n" if $verbose > 1;
        $wth->email_check_url($1);
        $wth->browser_get($1);
    
        if ($cobrand && $cobrand eq "animalaid") {
            # TODO: Add check when their site is ready
        } else {
            $wth->browser_check_contents("All done... We'll send your message now");
        }
    }
}

sub check_delivered_to_rep {
    my ($who, $repname, $extra_check) = @_;

    call_fyrqd();
    my $content = $wth->email_get_containing(
        '%Subject: Letter from %'.name_n($who).
        '%To: "%'.$repname.'%" <'.email_n($who).'>'.
        '%From: "'.name_n($who).'" <'.email_n($who).'>'.
        '%'.$extra_check.
        '%Signed with an electronic signature%');

    return $content;
}

# Send one mail to bounce handling script
sub call_handlemail {
    my ($content) = @_;
    my $p = mySociety::Util::pipe_via("./handlemail") or die "failed to call handlemail";
    $p->print($content);
    $p->close(); 
}

#############################################################################

sub do_send_example_message {
    set_base_url("");
    set_fyr_date('1990-01-01');
    send_message_to_rep(0, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '23 Something Street',
            writer_town => 'Someplace',
            writer_county => 'Someshire',
            writer_phone => undef,
            body => "This is a test message which shouldn't ever get to a real representative. It means the test harness is working. It's quite long because real messages are quite long. People ask lots of questions which when they are answered will solve all their problems. Sometimes this works, sometimes it doesn't."
        } 
    );
    check_delivered_to_rep(0, 'David Howarth MP', '23 Something Street');

    # 2 days to get over bounce_wait
    spin_queue('1990-01-%02d', 2, 4);
    # 13 days more, no questionnaire
    spin_queue('1990-01-%02d', 4, 17);
    $wth->email_check_none_left();
    # 14th day provokes sending of questionnaire
    set_fyr_date('1990-01-17');
    call_fyrqd();
    my $questionnaire_email = $wth->email_get_containing(
        '%Subject: Did your MP reply to your letter?'.
        '%To: "'.name_n(0).'" <'.email_n(0).'>'.
        '%Two weeks ago we sent your letter to David Howarth MP%');
    # 6 days more, no reminder
    spin_queue('1990-01-%02d', 18, 24);
    $wth->email_check_none_left();
    # 7th day, provokes sending of questionnaire reminder
    set_fyr_date('1990-01-24');
    call_fyrqd();
    $questionnaire_email = $wth->email_get_containing(
        '%Subject: Did your MP reply to your letter?'.
        '%To: "'.name_n(0).'" <'.email_n(0).'>'.
        '%Three weeks ago we sent your letter to David Howarth MP%');

    # Get links from questionnaire email
    die "Questionnaire yes link not found" if ($questionnaire_email !~ m#^\s*($base_url/Y/.*$)#m);
    my $yes_link = $1;
    $wth->email_check_url($yes_link);
    print "Questionnaire 'yes' URL is $yes_link\n" if $verbose > 1;
    die "Questionnaire no link not found" if ($questionnaire_email !~ m#^\s*($base_url/N/.*$)#m);
    my $no_link = $1;
    $wth->email_check_url($no_link);
    print "Questionnaire 'no' URL is $no_link\n" if $verbose > 1;

    $wth->browser_get($yes_link);
    $wth->browser_check_contents('Great! Many, many thanks for your feedback.');
    $wth->browser_follow_link(text_regex => qr/YES/);
    $wth->browser_check_contents('Many thanks - We hope you enjoyed the experience');
}

#############################################################################

sub do_send_blocked_message {
    set_base_url("");
    set_fyr_date('1990-06-30');

    # Go to abuse rules page
    $wth->browser_get($admin_url);    
    $wth->browser_follow_link(text_regex => qr/Message Abuse Rules/);
    # ... check no existing rules
    $wth->browser_check_no_contents('View');

    # ... make new rule
    $wth->browser_follow_link(text_regex => qr/New rule/);
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm',
        fields => {}, button => 'newfilter');
    $wth->browser_submit_form(form_name => 'adminRattyRuleForm', 
        fields => { 
            note => 'Block quicker than you can imagine',
            sequence => 1,
            requests => 0, interval => 0,
            message => 'freeze',
            field1 => 'message_length_characters',
            condition1 => '+<',
            value1 => '200',
        }, 
        button => 'done');
    $wth->browser_check_contents('Block quicker than you can imagine');

    # The message shouldn't be delivered, as it should be frozen
    send_message_to_rep(1, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '23 Something Street',
            writer_town => 'Someplace',
            writer_county => 'Someshire',
            writer_phone => undef,
            body => "V. short"
        } 
    );
    call_fyrqd();
    $wth->email_check_none_left();

    # Check for email telling the constituent that their message wasn't sent
    set_fyr_date('1990-07-08');
    call_fyrqd();
    my $confirmation_email = $wth->email_get_containing(
        '%Subject: Unfortunately, we couldn\'t send your message to David Howarth MP'.
        '%To: "'.name_n(1).'" <'.email_n(1).'>'.
        '%We\'re very sorry, but it wasn\'t possible to send your letter%');
}

#############################################################################

sub do_test_bounce_stuff {
    set_base_url("");
    set_fyr_date('1990-08-30');

    # TODO: This doesn't work yet. It is meant to test failing bad contacts.
    # Really we need to turn off the test mode, and have a real representative
    # in DaDem that can be failed. That's pretty complicated to set up - need
    # a test DaDem database as well, really.
    #send_message_to_rep(666, # invalid email address, for reflected email 
    #                         # (send_message_to_rep has a hack to do confirm)
    #    'CB23QJ', # The Guildhall, Cambridege 
    #    'David Howarth', 
    #    { 
    #        writer_address1 => '82 Mouse Road',
    #        writer_town => 'Cheeseland',
    #        writer_county => 'Emmentalshire',
    #        writer_phone => undef,
    #        body => "I think that more cheese should be sent to more mice. How are the mignon little souris meant to be happy when they aren't fully fed with the freshest, creamiest, tastiest coagulated, separated milk curd?"
    #    } 
    #);
    #check_delivered_to_rep(0, 'David Howarth MP', '82 Mouse Road');

    # Pretend to be somebody replying to a questionnaire message
    # - the message is just hard wired here as that is easiest.
    my $user_name = name_n(5);
    my $user_email = email_n(5);
    my $bounce_address = mySociety::Config::get('EMAIL_PREFIX') . "DO-NOT-REPLY@" . mySociety::Config::get('EMAIL_DOMAIN');
    my $in_reply_to = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxx@" . mySociety::Config::get('EMAIL_DOMAIN');
    my $message_id = "19900830153005.GA19047@" . mySociety::Config::get('EMAIL_DOMAIN');

    # Send message with confirmation link ...
    my $msg = <<END;
Date: Thu, 30 Aug 1990 16:30:05 +0100
From: $user_name <$user_email>
To: WriteToThem <$bounce_address>
Subject: Re: Please confirm that you want to send a message to Ouch Ooch MP
Message-ID: <$message_id>
References: <$in_reply_to>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <$in_reply_to>
User-Agent: Mutt/1.5.11
Status: RO

Yes yes yes!

On Mon, Jan 01, 1990 at 03:04:58PM +0000, WriteToThem wrote:
> Please click on the link below to confirm that you wish WriteToThem.com
> to send the letter copied at the bottom of this email to Ouch Ooch
> MP, your MP:
> 
>     $base_url/C/xxxxxx2xxx/2xxxxx2x2xxxxxxx2xx
> 
> If your email program does not let you click on this link, just copy
> and paste it into your web browser and press return.
>
> ... snipped for brevity ...
> 
> -- the WriteToThem.com team
END
    mySociety::Util::send_email($msg, $user_email, $bounce_address);
    # ... check that user gets autoresponse
    $wth->email_get_containing('%To: <'.email_n(5).'>%This is an automatic response%');
    $wth->email_check_none_left();

    # Send message without link ...
    $msg = <<END;
Date: Thu, 30 Aug 1990 16:30:05 +0100
From: $user_name <$user_email>
To: WriteToThem <$bounce_address>
Subject: This is a test message
Message-ID: <$message_id>
References: <$in_reply_to>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <$in_reply_to>
User-Agent: Mutt/1.5.11
Status: RO

Woot woot woot!
END
    mySociety::Util::send_email($msg, $user_email, $bounce_address);
    # .. check that administrator gets the message
    $wth->email_get_containing('%To: WriteToThem <'.$bounce_address.'>%Woot woot woot!%');
    $wth->email_check_none_left();

    # Send message with questionnaire links ...
    $msg = <<END;
Date: Thu, 30 Aug 1990 16:30:05 +0100
From: $user_name <$user_email>
To: WriteToThem <$bounce_address>
Subject: Did your MP reply to your letter?
Message-ID: <$message_id>
References: <$in_reply_to>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <$in_reply_to>
User-Agent: Mutt/1.5.11
Status: RO

I don't like this questionnaire, I am instead going to tell you much
more about my MP's responsiveness in free text.

On Sat, Nov 26, 2005 at 09:30:50PM +0000, WriteToThem wrote:
> Two weeks ago we sent your letter to David Howarth MP.
>
> - If you HAVE had a reply, please click on the link below:
>
>     $base_url/Y/xxxxxxxxxxxxxxxxx22xxxxxxxxx2
>
> - If you HAVE NOT had a reply, please click on the link below:
>
>     $base_url/N/xxxxxxxxxxxxxx2xx22xxxxxxxxx2
>
> ... snipped for brevity ...
END
    mySociety::Util::send_email($msg, $user_email, $bounce_address);
    # ... check that user gets autoresponse
    $wth->email_get_containing('%To: <'.email_n(5).'>%This is an automatic response%');
    $wth->email_check_none_left();
}

#############################################################################

sub do_send_cobrand_message {
    set_base_url("animalaid.");
    set_fyr_date('1991-02-03');
    send_message_to_rep(2, 
       'OX 13d R', # Lincoln college, Oxford
       'Paul Sargent', 
        { 
            writer_address1 => '32 Wheresome Wroad',
            writer_town => 'Whereville',
            writer_county => 'Whereex',
            writer_phone => undef,
            body => "Oh my goodness! Another test message from the WTT test script. This should never get to anybody except when they're testing. This one is to test cobranding, using the 'animalaid' example.",
        },
        'animalaid'
    );
    check_delivered_to_rep(2, 'Paul Sargent', '32 Wheresome Wroad');
}

#############################################################################

sub do_send_lords_message {
    set_base_url("");
    set_fyr_date('1992-01-01');
    send_message_to_rep(50, 
        'PE35 6EN',
        'Lord Rogers', # Subject: in confirmation email wraps, so just check without "of Riverside"
        { 
            writer_address1 => '99 Subject\'s Square',
            writer_town => 'Plebsville',
            writer_county => 'Fiefdom',
            writer_phone => undef,
            body => "I know it is odd for somebody to write to a Lord, as they are not officially representative. However, they ought to respond to the needs and wants of the country, because that's the right thing to do. So I'm writing to you anyway, so altering reality to be as I want, by assuming that it already is."
        },
        undef,
        '23 July', 
    );
    check_delivered_to_rep(50, 'Lord Rogers of Riverside', '99 Subject\\\'s Square');

    # 2 days to get over bounce_wait
    spin_queue('1992-01-%02d', 2, 4);
    # 13 days more, no questionnaire
    spin_queue('1992-01-%02d', 4, 17);
    $wth->email_check_none_left();
    # 14th day provokes sending of questionnaire
    set_fyr_date('1992-01-17');
    call_fyrqd();
    my $questionnaire_email = $wth->email_get_containing(
        '%Subject: Did your Lord reply to your letter?'.
        '%To: "'.name_n(50).'" <'.email_n(50).'>'.
        '%Two weeks ago we sent your letter to Lord Rogers of Riverside%');
    $wth->email_check_none_left();

    # Get links from questionnaire email
    die "Questionnaire yes link not found" if ($questionnaire_email !~ m#^\s*($base_url/Y/.*$)#m);
    my $yes_link = $1;
    $wth->email_check_url($yes_link);
    print "Questionnaire 'yes' URL is $yes_link\n" if $verbose > 1;
    die "Questionnaire no link not found" if ($questionnaire_email !~ m#^\s*($base_url/N/.*$)#m);
    my $no_link = $1;
    $wth->email_check_url($no_link);
    print "Questionnaire 'no' URL is $no_link\n" if $verbose > 1;

    $wth->browser_get($yes_link);
    $wth->browser_check_contents('Great! Many, many thanks for your feedback.');
    $wth->browser_follow_link(text_regex => qr/YES/);
    $wth->browser_check_contents('Many thanks - We hope you enjoyed the experience');
}

#############################################################################

=comment
sub do_send_bouncing_message() {
    set_base_url("");
    send_message_to_rep(0, 
        'CB23QJ', # The Guildhall, Cambridege 
        'David Howarth', 
        { 
            writer_address1 => '10 Boing Boing Land',
            writer_town => 'Springy Street',
            writer_county => 'Thumpshire',
            writer_phone => '01234 567890',
            body => "Bouncing message this is.  A test."
        } 
    );
    my $content = check_delivered_to_rep(0, 'David Howarth', 'Boing Boing Land');

    # Now fake that it bounced
    call_handlemail($content);

    # Find message in admin interface
    $wth->browser_get($admin_url);    
    $wth->browser_follow_link(text_regex => qr/Message Queue/);
    $wth->browser_follow_link(text_regex => qr/Recent Created/);
    $wth->browser_check_contents('<b>frozen</b>');
}
=cut


