#!/usr/bin/perl -w
#
# stats-yearly-report:
#
# Creates response report for given calendar year, which is the only argument.
# Run at least four weeks after end of the year, so questionnaire responses
# have had time to come in.

# Notes and caveats:
#
# - Includes despatched messages which were sent within the calendar year.
#   Only messages which were delivered (fax successful, email had no bounce)
#   are counted.
#
# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# To run via squid:
# export http_proxy=http://localhost:3128

my $rcsid = ''; $rcsid .= '$Id: stats-yearly-response,v 1.1 2006-02-13 10:52:58 francis Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use CGI;
use DateTime;
use DateTime::Format::Strptime;
use HTML::Entities;
use Data::Dumper;
use POSIX qw(strftime);
use utf8;
binmode(STDOUT, ':utf8');

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::DaDem;
use mySociety::MaPit;
use mySociety::VotingArea;
use mySociety::Util;
use mySociety::Parties;

use FYR;

# Configurable parameters
my $year = shift;
die "enter a reasonable year as first argument" if !$year || $year < 2000 || $year > 5000;
my $output_format = shift;
die "enter PHP or debug for output format" if !$output_format || ($output_format ne 'PHP' && $output_format ne 'debug');
my $area_type = 'WMC';
my $debug_fewer_reps = undef; #100;# for testing, run with fewer reps than all

############################################################################
# Extract basic data from MaPit/DaDem

my $start_epoch = DateTime->new( year=>$year, month=>1, day=>1, hour=>0, minute=>0, time_zone=>'GMT')->epoch;
my $end_epoch = DateTime->new( year=>$year+1, month=>1, day=>1, hour=>0, minute=>0, time_zone=>'GMT')->epoch;
# We choose 4 weeks, because 2 weeks until first questionnaire, another week before reminder, then give
# at least another week for reponse and safety margin.
die "Need to wait 4 weeks into year before running to be sure have all questionnaire info" if ($end_epoch > time() - 86400 * 28);
my $period_length = $end_epoch - $start_epoch;

print STDERR "year: $year epochs of calculation: $start_epoch => $end_epoch\n";

# Need to obtain a list of MP/constituency names and then pick out messages by those.
print STDERR "get constituency IDs... ";
my $areaids = mySociety::MaPit::get_areas_by_type($area_type, 1); # array of ids of ALL areas (not just current generation)
print STDERR "done\n";
print STDERR "get constituency info... ";
my %areainfo = %{mySociety::MaPit::get_voting_areas_info($areaids)}; # hash from area id to hash of info about area
print STDERR "done\n";
print STDERR "get representatives IDs... ";
my $repids = mySociety::DaDem::get_representatives([keys %areainfo], 1); # hash from area to reps for that area
print STDERR "done\n";
my @allreps;
my $reptoarea; # hash from rep id to area represented
foreach (keys %$repids) {
    if (!@{$repids->{$_}}) {
        print STDERR "area #$_ ($areainfo{$_}->{name}) has no representative\n";
    } else {
        foreach my $repid (@{$repids->{$_}}) {
            if ($repid !~ /^[1-9]\d*$/) {
                print STDERR "area #$_ ($areainfo{$_}->{name}) has bad representative ID $repid\n";
            }

            push @allreps, $repid;
            $reptoarea->{$repid} = $_;
        }
   }
}
print STDERR "get representatives info... ";
my %repinfo = %{mySociety::DaDem::get_representatives_info(\@allreps)};
print STDERR "done\n";

@allreps = grep {
    my $repid = $_;
    my $r_info = $repinfo{$repid};

    # ??? this is nonsense
    # TODO: make the detection of edits work for edits that happened at creation
    die Dumper($r_info) . "only editor was a script, and tests below won't work\n" if ($r_info->{'last_editor'} eq "import" || $r_info->{'last_editor'} eq "dadem_csv_load") && $r_info->{'edit_times'} == 1;

    if (!$r_info->{whencreated} || !$r_info->{whenlastedited}) {
        die Dumper($r_info) . "\nneed whencreated and whenlastedited for all data";
    }
    if ($r_info->{whencreated} > $r_info->{whenlastedited}) { 
        # This happens with old data for whencreated that had to be recovered from backups
        $r_info->{whencreated} = $r_info->{whenlastedited};
    }

    my $ret = 1;
    $ret = 0 if ($r_info->{whencreated} >= $end_epoch);
    $ret = 0 if ($r_info->{whenlastedited} < $start_epoch && $r_info->{'deleted'} == 1);

    $ret;
} @allreps;

(@allreps = @allreps[0 .. $debug_fewer_reps - 1]) if $debug_fewer_reps;

#print Dumper(\@allreps);

############################################################################
# Calculate intervals

sub equal_w_undef {
    my ($a, $b) = @_;
    return 1 if (!defined($a) && !defined($b));
    return 0 if (defined($a) && !defined($b));
    return 0 if (!defined($a) && defined($b));
    return 1 if ($a eq $b);
    return 0;
}
sub node_methods_equal {
    my ($a, $b) = @_;
    return (equal_w_undef($a->{'valid_method'}, $b->{'valid_method'}) && 
            equal_w_undef($a->{'method'}, $b->{'method'}) && 
            equal_w_undef($a->{'fax'}, $b->{'fax'}) &&
            equal_w_undef($a->{'email'}, $b->{'email'}));
}
sub push_with_merge {
    # add new interval, merge with end one if same
    my ($intervals_ref, $interval_info) = @_;
    my $c = scalar(@$intervals_ref);
    if ($c) {
        my $end_interval = $intervals_ref->[$c-1];
        if (node_methods_equal($interval_info, $end_interval)) {
            # ok, end interval has same details as this one, so just extend it
            die if $end_interval->{'to'} != $interval_info->{'from'};
            $end_interval->{'to'} = $interval_info->{'to'};
            return;
        }
    }
    push @$intervals_ref, $interval_info;
}

print STDERR "get history... ";
my $allintervals;
my %history = %{mySociety::DaDem::get_representatives_history(\@allreps)};
foreach my $repid (@allreps) {
    my @history = @{$history{$repid}};
    #print Dumper(\@history);
    my @intervals;
    my $last_h;
    my $on_first = 1;
    my $creation_node = $history[0];
    # convert history to intervals
    foreach my $h (@history) {
        if ($last_h) {
            my $interval_info;
            $interval_info->{'from'} = $last_h->{'whenedited'};
            $interval_info->{'to'} = $h->{'whenedited'};
            if ($interval_info->{'from'} > $interval_info->{'to'}) {
                if ($on_first) {
                    die if $year ne "2005"; # only 2005 stuff can have this bad date
                    # first interval can be out of order due to bad data
                    $interval_info->{'from'} = $interval_info->{'to'};
                } else {
                    die "$repid has out-of-order interval that is not first";
                }
            }
            $interval_info->{'valid_method'} = $last_h->{'valid_method'};
            $interval_info->{'method'} = $last_h->{'method'};
            $interval_info->{'fax'} = $last_h->{'fax'};
            $interval_info->{'email'} = $last_h->{'email'};
            push_with_merge(\@intervals, $interval_info);
            my $on_first = 0;
        }
        $last_h = $h;
    }
    if ($last_h->{'deleted'} != 1) {
            my $interval_info;
            $interval_info->{'from'} = $last_h->{'whenedited'};
            $interval_info->{'to'} = time();
            die if ($interval_info->{'from'} > $interval_info->{'to'});
            $interval_info->{'valid_method'} = $last_h->{'valid_method'};
            $interval_info->{'method'} = $last_h->{'method'};
            $interval_info->{'fax'} = $last_h->{'fax'};
            $interval_info->{'email'} = $last_h->{'email'};
            push_with_merge(\@intervals, $interval_info);
    }
    # clamp to our range, and strip intervals that were out of range
    map { 
        $_->{'from'} = $start_epoch if $_->{'from'} < $start_epoch; 
        $_->{'to'} = $end_epoch if $_->{'to'} > $end_epoch; 
    } @intervals;
    @intervals = grep { $_->{'from'} < $_->{'to'} } @intervals;
    # add initial interval (for later back-extension data from early days of code)
    die "no intervals for $repid" if !scalar(@intervals);
    my $initial_epoch = $intervals[0]->{'from'};
    if ($initial_epoch > $start_epoch) {
        my $interval_info;
        $interval_info->{'from'} = $initial_epoch;
        $interval_info->{'to'} = $initial_epoch;
        # use values from the first node in the history for this back extension
        $interval_info->{'valid_method'} = $creation_node->{'valid_method'};
        $interval_info->{'method'} = $creation_node->{'method'};
        $interval_info->{'fax'} = $creation_node->{'fax'};
        $interval_info->{'email'} = $creation_node->{'email'};
        if (!node_methods_equal($interval_info, $intervals[0])) {
            unshift @intervals, $interval_info;
        }
    }
    # check ranges meet
    my $upto = undef;
    foreach my $interval (@intervals) {
        if ($upto) {
            die "internal error: ranges should meet" if ($upto != $interval->{'from'});
        }
        $upto = $interval->{'to'};
    }

    $allintervals->{$repid} = \@intervals;
}
print STDERR "done\n";
#print Dumper($allintervals);

############################################################################
# Fill in message counts and questionnaire answers

# Questionnaire answers: question_id 
#   #0 is "did you get a response?"; 
#   #1 is "is this your first time?".

print STDERR "get message counts... ";
my $stn = dbh()->prepare("
            select count(id), recipient_id
            from message
            where recipient_type = '$area_type'
                and state in ('sent', 'finished')
                and dispatched >= ? and dispatched < ?
                and dispatched < ?
            group by recipient_id");

my %sent_messages;
$stn->execute($start_epoch, $end_epoch, time() - 86400 * 28);
while (my ($n, $repid) = $stn->fetchrow_array()) {
    $sent_messages{$repid} = $n;
}
foreach my $repid (@allreps) {
    $sent_messages{$repid} = 0 if (!defined($sent_messages{$repid}));
}
print STDERR "done\n";

print STDERR "get interval questionnaire responses... ";
my $stq = dbh()->prepare("
            select distinct on(message_id, question_id)
                message_id, dispatched, created, question_id, answer, recipient_id
            from questionnaire_answer, message
            where questionnaire_answer.message_id = message.id
                and recipient_type = '$area_type'
                and created >= ? and created < ?
                and dispatched < ?");
$stq->execute($start_epoch, $end_epoch, time() - 86400 * 28);
while (my ($msgid, $dispatched, $created, $qid, $answer, $repid) = $stq->fetchrow_array()) {
    my $intervals = $allintervals->{$repid};
    next if $debug_fewer_reps && !defined($intervals); 
    die "intervals for $repid not found" if !defined($intervals);
    my $found = 0;
    my $first = 1;
    foreach my $interval (@$intervals) {
        # extend back if first interval (fixing bad data where we don't know
        # exact start time due to recovery from backups)
        if ($first && $created >= $start_epoch && $created < $interval->{'from'}) {
            die if $year ne "2005"; # only 2005 stuff can have this bad data
            $interval->{'from'} = $created;
        }

        # match
        if ($interval->{'from'} <= $created && $created < $interval->{'to'} ) {
            die Dumper($repinfo{$repid}) . Dumper($intervals) . "matched two intervals rep $repid created $created" if $found;
            $found = 1;
            if ($qid == 0) {
                ++$interval->{'r'}->[1];
            } elsif ($qid == 1) {
                ++$interval->{'r'}->[3];
            }
            if ($qid == 0 && $answer eq 'yes') {
                ++$interval->{'r'}->[0];
            } elsif ($qid == 1 && $answer eq 'yes') {
                ++$interval->{'r'}->[2];
            }
        }
        $first = 0;
    }
    die Dumper($repinfo{$repid}) . Dumper($intervals) . "matched no interval rep $repid created $created" if !$found;
}
foreach my $repid (@allreps) {
    my $intervals = $allintervals->{$repid};
    foreach my $interval (@$intervals) {
        foreach (0..3) {
            $interval->{'r'}->[$_] = 0 if (!$interval->{'r'}->[$_]);
        }
    }
}
print STDERR "done\n";
#print Dumper($allintervals);

print STDERR "get overall questionnaire responses... ";
my $stqo = dbh()->prepare("
            select distinct on(message_id, question_id)
                message_id, dispatched, question_id, answer, recipient_id
            from questionnaire_answer, message
            where questionnaire_answer.message_id = message.id
                and recipient_type = '$area_type'
                and dispatched >= ? and dispatched < ?
                and dispatched < ?");
$stqo->execute($start_epoch, $end_epoch, time() - 86400 * 28);
my %r;
my $partyr;
while (my ($msgid, $dispatched, $qid, $answer, $repid) = $stqo->fetchrow_array()) {
    if ($qid == 0) {
        ++$r{$repid}->[1];
    } elsif ($qid == 1) {
        ++$r{$repid}->[3];
    }
    if ($qid == 0 && $answer eq 'yes') {
        ++$r{$repid}->[0];
    } elsif ($qid == 1 && $answer eq 'yes') {
        ++$r{$repid}->[2];
    }

    my $party = $repinfo{$repid}->{'party'};
    my $canonparty = $mySociety::Parties::canonical{$party};
    die "unknown party $party" if !$canonparty;
    $canonparty = "Labour" if $party eq "Labour / Co-operative";
    utf8::decode($canonparty); # STDOUT is in binmode utf8, and it ends up double encoded otherwise
    if ($qid == 0) {
        ++$partyr->{$canonparty}->[1];
    } elsif ($qid == 1) {
        ++$partyr->{$canonparty}->[3];
    }
    if ($qid == 0 && $answer eq 'yes') {
        ++$partyr->{$canonparty}->[0];
    } elsif ($qid == 1 && $answer eq 'yes') {
        ++$partyr->{$canonparty}->[2];
    }
}
foreach my $repid (@allreps) {
    foreach (0..3) {
        $r{$repid}->[$_] = 0 if (!$r{$repid}->[$_]);
    }
}
print STDERR "done\n";

print STDERR "get failed message counts... ";
my $stf = dbh()->prepare("
            select count(id), recipient_id
            from message
            where recipient_type = '$area_type'
                and state not in ('sent', 'finished')
                and dispatched >= ? and dispatched < ?
                and dispatched < ?
            group by recipient_id");

my %fails_after_dispatch;
$stf->execute($start_epoch, $end_epoch, time() - 86400 * 28);
while (my ($n, $repid) = $stf->fetchrow_array()) {
    $fails_after_dispatch{$repid} = $n;
}
print STDERR "done\n";

print STDERR "get not dispatched message counts... ";
my $stnd  = dbh()->prepare("
            select count(id), recipient_id
            from message
            where recipient_type = '$area_type'
                and created >= ? and created < ?
                and dispatched is null
            group by recipient_id");

my %not_dispatched;
$stnd->execute($start_epoch, $end_epoch);
while (my ($n, $repid) = $stnd->fetchrow_array()) {
    $not_dispatched{$repid} = $n;
}
print STDERR "done\n";

############################################################################
# Work out categorisation of MP, and print out results

# Categories of data quality are:
# good - Have good data about MP's responsiveness
# toofew - Too few messages sent by constituents to the MP 
# badcontact - We had bad contact data for the MP for much of the time
# shame - The MP shameful refused to receive messages via our service
# unknown - Needs manual checking

sub work_out_rep_category($) {
    my ($repid) = @_;

    my $r_info = $repinfo{$repid};
    my $areaid = $reptoarea->{$repid};
    my $a_info = $areainfo{$areaid};
    my $f_after_dispatch = $fails_after_dispatch{$repid} || 0;
    my $n_dispatched = $not_dispatched{$repid} || 0;
    my $q_data = $r{$repid};

    my @ints = @{$allintervals->{$repid}};
    # hmm, TODO: use length of known?
    my $rep_length = $ints[-1]->{'to'} - $ints[0]->{'from'};

    # Gather data
    my $intervals_with_no_q_response = 0;
    my $intervals_with_no_q_response_and_validmethod = 0;
    my $no_q_response_and_validmethod_time = 0;
    my $shametime = 0;
    my $knowninvalidtime = 0;
    foreach my $interval (@ints) {
        my $length = $interval->{'to'} - $interval->{'from'};

        if ($interval->{'r'}->[0] == 0 && $interval->{'r'}->[1] >= 2) { # got no positive q responses, out of at least 2
            $intervals_with_no_q_response++;
            if ($interval->{'valid_method'}) { 
                $intervals_with_no_q_response_and_validmethod++; 
                $no_q_response_and_validmethod_time += $length;
            }
        }

        if ($interval->{'method'} eq 'shame') {
            $shametime += $length
        }

        if (!($interval->{'valid_method'})) {
            $knowninvalidtime += $length;
        }
            #if ($interval->{'r'}->[1] > 0){
            #    $valid = 1;
            #}
    }

    my $confidence_length;
    if ($q_data->[1] > 0) {
        my ($re_mean, $re_low, $re_high) = mySociety::Util::binomial_confidence_interval($q_data->[0], $q_data->[1]);
        $confidence_length = $re_high - $re_low;
    }

    print "shametime: $shametime knowninvalidtime: $knowninvalidtime replength: $rep_length intervals_with_no_q_response: $intervals_with_no_q_response no_q_response_and_validmethod_time: $no_q_response_and_validmethod_time\n" if $output_format eq 'debug';
    #print "confidence: ".($confidence_length ? $confidence_length : "none")."\n" if $output_format eq 'debug';

    # Work out what we are
    return 'shame' if ($shametime > $rep_length * 0.1);
    return 'toofew' if ($sent_messages{$repid} < 10);
    #return 'toofew' if (!defined($confidence_length) || $confidence_length > 0.50);
    return 'good' if ($intervals_with_no_q_response == 0);
    return 'good' if ($intervals_with_no_q_response_and_validmethod == 0);
    return 'good' if ($no_q_response_and_validmethod_time < $rep_length * 0.1);
    #return 'badcontact' if ($knowninvalidtime > $rep_length * 0.5);
    return 'unknown';
}

sub emit_php($$) {
    my ($var, $value) = @_;
    if (!defined($value)) {
        print "        '$var' => null,\n";
    } else {
        $value =~ s/'/\\'/g;
        print "        '$var' => '$value',\n";
    }
}

sub display_rep($$) {
    my ($repid, $category) = @_;

    return if $repid == 26988; #  "Election Pending following the death of Robin Cook"

    my $r_info = $repinfo{$repid};
    my $areaid = $reptoarea->{$repid};
    my $a_info = $areainfo{$areaid};
    #print "repid: $repid\n"; print Dumper($r_info); print Dumper($a_info); exit;

    my $f_after_dispatch = $fails_after_dispatch{$repid} || 0;
    my $n_dispatched = $not_dispatched{$repid} || 0;

    my $q_data = $r{$repid};

    for (0..3) {
        die Dumper($r_info) . "rep $repid has missing q data" if !defined($q_data->[$_]);
    }
    die "$repid has no sent_messages field" if !exists($sent_messages{$repid});
    my ($re_mean, $re_low, $re_high) = 
        $q_data->[1] > 0 ? mySociety::Util::binomial_confidence_interval($q_data->[0], $q_data->[1]) : undef;
    my ($ft_mean, $ft_low, $ft_high) = 
        $q_data->[3] > 0 ? mySociety::Util::binomial_confidence_interval($q_data->[2], $q_data->[3]) : undef;

    if ($output_format eq "PHP") {
        print "    array(\n";
        emit_php('recipient_id', $repid);
        emit_php('category', $category);
        emit_php('name', $r_info->{'name'});
        emit_php('party', $r_info->{'party'});
        emit_php('area', $a_info->{'name'});

        emit_php('dispatched_success', $sent_messages{$repid});

        emit_php('responded', $q_data->[0]);
        emit_php('responded_outof', $q_data->[1]);
        emit_php('responded_mean', $re_mean);
        emit_php('responded_95_low', $re_low);
        emit_php('responded_95_high', $re_high);

        emit_php('firsttime', $q_data->[2]);
        emit_php('firsttime_outof', $q_data->[3]);
        emit_php('firsttime_mean', $ft_mean);
        emit_php('firsttime_95_low', $ft_low);
        emit_php('firsttime_95_high', $ft_high);

        emit_php('when_generated', time());
        print "    ),\n\n";
    } else {
        print sprintf("repid$repid %s (%s) of %s 
        sent-success:%d sent-fail:%d not-sent(approx):%d
        Qresponded:%d/%d Qfirsttime:%d/%d
        deleted%s edittimes:%d-%s-%s \n", 
                $r_info->{'name'}, $r_info->{'party'}, $a_info->{'name'},
                $sent_messages{$repid}, $f_after_dispatch, $n_dispatched,
                $q_data->[0], $q_data->[1], $q_data->[2], $q_data->[3],
                $r_info->{'deleted'}, 
                $r_info->{'edit_times'}, $r_info->{'last_editor'}, 
                $r_info->{'method'}
                );
    }
    die if $a_info->{'type'} ne $area_type; # assertion

    # pretty display of intervals for one MP
    if ($output_format eq 'debug') {
        my $first = 1;
        print "    ";
        foreach my $interval (@{$allintervals->{$repid}}) {
            if ($first) {
                print strftime("(%d %b %Y)", localtime($interval->{'from'}));
            }
            print sprintf("<v%sQr%d/%d>", 
                    $interval->{'valid_method'}, 
                    $interval->{'r'}->[0], $interval->{'r'}->[1], 
            );
            print strftime("(%d %b %Y)", localtime($interval->{'to'}));
            $first = 0;
        }
        print "\n";
        print "    category: $category\n";
    }
}

my $total_sent = 0;
my $total_responded = 0;
my $total_responded_outof = 0;
my $total_firsttime = 0;
my $total_firsttime_outof = 0;
my $total_fails_after_dispatch = 0;
print "<?php\n/* Automatically generated by fyr/bin/stats-yearly-response */\n\n" if $output_format eq "PHP";
print "\$questionnaire_report_${year}_${area_type} = array(\n" if $output_format eq "PHP";
foreach my $repid (@allreps) {
    my $category = work_out_rep_category($repid);
    display_rep($repid, $category);

    my $q_data = $r{$repid};
    $total_sent += $sent_messages{$repid};
    $total_responded += $q_data->[0];
    $total_responded_outof += $q_data->[1];
    $total_firsttime += $q_data->[2];
    $total_firsttime_outof += $q_data->[3];
    $total_fails_after_dispatch += ($fails_after_dispatch{$repid} || 0); 

    print "\n" if $output_format eq 'debug';
}

if ($output_format eq 'debug') {
    print sprintf ("Totals: success-sentmsg: %d fails-after-dispatch: %d responded: %d/%d firsttime: %d/%d\n",
        $total_sent, $total_fails_after_dispatch, $total_responded, $total_responded_outof, $total_firsttime, $total_firsttime_outof) 
} else {
    emit_php('total_dispatched_success', $total_sent);
    #emit_php('total_fails_after_dispatch', $total_fails_after_dispatch); # this is a bit useless
    emit_php('total_responded', $total_responded);
    emit_php('total_responded_outof', $total_responded_outof);
    emit_php('total_firsttime', $total_firsttime);
    emit_php('total_firsttime_outof', $total_firsttime_outof);
    print ");\n" if $output_format eq "PHP";
}

print "\n";
print "\$party_report_${year}_${area_type} = array(\n" if $output_format eq "PHP";
foreach my $party (keys %$partyr) {
    my $data = $partyr->{$party};
# TODO: fix binomial_confidence_interval to cope with large input numbers (fallback to normal)
#    my ($re_mean, $re_low, $re_high) = 
#        $data->[1] > 0 ? mySociety::Util::binomial_confidence_interval($data->[0], $data->[1]) : undef;
#    my ($ft_mean, $ft_low, $ft_high) = 
#        $data->[3] > 0 ? mySociety::Util::binomial_confidence_interval($data->[2], $data->[3]) : undef;

    print "   '$party' => array(\n";
    emit_php('responded', $data->[0]);
    emit_php('responded_outof', $data->[1]);
#    emit_php('responded_mean', $re_mean);
#    emit_php('responded_95_low', $re_low);
#    emit_php('responded_95_high', $re_high);
    emit_php('firsttime', $data->[2]);
    emit_php('firsttime_outof', $data->[3]);
#    emit_php('firsttime_mean', $ft_mean);
#    emit_php('firsttime_95_low', $ft_low);
#    emit_php('firsttime_95_high', $ft_high);
    print "   ),\n";
}
print ");\n" if $output_format eq "PHP";

print "?>\n" if $output_format eq "PHP";


