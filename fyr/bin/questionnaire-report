#!/usr/bin/perl -w
#
# questionnaire-report:
# Produce a CSV report on response rates for a particular type of
# representative. Presently only really works for WMC/EUR.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: questionnaire-report,v 1.1 2005-11-04 01:28:27 chris Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use Text::CSV_XS;
use DateTime;

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::DaDem;
use mySociety::MaPit;
use mySociety::Parties;
use mySociety::VotingArea;

use FYR;

my @timeperiods = (
        ['six months to date', DateTime->now()->subtract(months => 6), DateTime->now()],
        ['year to date',        DateTime->now()->subtract(years => 1), DateTime->now()]
    );


my $C = new Text::CSV_XS({ binary => 1 });

my $type = shift(@ARGV);
$type ||= 'WMC';

if (!grep { $_ eq $type } @mySociety::VotingArea::known_types) {
    die "no area type '$type' known";
}

# Heading.
my @h = (
        $mySociety::VotingArea::rep_name{$type},
        'Party',
        'Party (canonical)',
        $mySociety::VotingArea::type_name{$type}
    );

foreach (@timeperiods) {
    push(@h, "$_->[0]: messages", "questionnaires", "received response", "first time");
}

$C->combine(@h);
print $C->string(), "\n";

# Need to obtain a list of MP/constituency names and then pick out messages
# by those.
print STDERR "get $type IDs... ";
my $areaids = mySociety::MaPit::get_areas_by_type($type);
print STDERR "done\n";
print STDERR "get $type info... ";
my $areas = mySociety::MaPit::get_voting_areas_info($areaids);
print STDERR "done\n";

print STDERR "get rep IDs... ";
my $repids = mySociety::DaDem::get_representatives([keys %$areas]);
print STDERR "done\n";

print STDERR "get rep info... ";
my $reps = mySociety::DaDem::get_representatives_info([map { @$_ } values %$repids]);
print STDERR "done\n";

my @results = ( );

# Questionnaire answers: question_id #0 is "did you get a response?"; #1 is
# "is this your first time?".
my $stn = dbh()->prepare("
            select count(id), recipient_id
            from message
            where recipient_type = ?
                and state in ('sent', 'finished')
                and dispatched >= ? and dispatched < ?
                and dispatched < ?
            group by recipient_id");
my $stq = dbh()->prepare("
            select distinct on(message_id, question_id)
                message_id, question_id, answer, recipient_id
            from questionnaire_answer, message
            where questionnaire_answer.message_id = message.id
                and recipient_type = ?
                and dispatched >= ? and dispatched < ?
                and dispatched < ?");

foreach (@timeperiods) {
    my ($name, $st, $en) = @$_;
    print STDERR "get message counts for $name... ";
    # Total # messages
    my %r;
    $stn->execute($type, $st->epoch(), $en->epoch(), time() - 86400 * 14);
    while (my ($n, $rep) = $stn->fetchrow_array()) {
        $r{$rep} = [$n, 0, 0, 0];
    }
    print STDERR "done\n";
    
    print STDERR "get questionnaire responses for $name... ";
    $stq->execute($type, $st->epoch(), $en->epoch(), time() - 86400 * 14);
    my %mm;
    while (my ($msgid, $qid, $answer, $rep) = $stq->fetchrow_array()) {
        if (!exists($mm{$msgid})) {
            ++$r{$rep}->[1];
            $mm{$msgid} = 1;
        }
        if ($qid == 0 && $answer eq 'yes') {
            ++$r{$rep}->[2];
        } elsif ($qid == 1 && $answer eq 'yes') {
            ++$r{$rep}->[3];
        }
    }
    print STDERR "done\n";

    foreach my $repid (keys %$reps) {
        $r{$repid} ||= [0, 0, 0, 0];
    }

    push(@results, \%r);
}

foreach my $repid (keys %$reps) {
    my $rep = $reps->{$repid};
    my $area = $areas->{$rep->{voting_area}};
    my $canon = $mySociety::Parties::canonical{$rep->{party}};
    $canon ||= '-';
    my @r = (
            $rep->{name},
            $rep->{party},
            $canon,
            $area->{name}
        );

    for (my $i = 0; $i < @timeperiods; ++$i) {
        push(@r, @{$results[$i]->{$repid}});
    }

    $C->combine(@r);
    print $C->string(), "\n";
}
