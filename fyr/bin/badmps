#!/usr/bin/perl -w
#
# badmps:
# List current MPs to whom messages have been sent but for whom no positive
# questionnaire responses have been received.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: badmps,v 1.5 2005-11-26 01:52:19 dademcron Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use CGI;
use DateTime;
use DateTime::Format::Strptime;
use HTML::Entities;
use Data::Dumper;

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::DaDem;
use mySociety::MaPit;
use mySociety::VotingArea;

use FYR;

my $verbose = 0;

# Need to obtain a list of MP/constituency names and then pick out messages
# by those.
print STDERR "get constituency IDs... " if $verbose > 0;
my $areaids = mySociety::MaPit::get_areas_by_type('WMC');
print STDERR "done\n" if $verbose > 0;
print STDERR "get constituency info... " if $verbose > 0;
my %wmc = %{mySociety::MaPit::get_voting_areas_info($areaids)};
print STDERR "done\n" if $verbose > 0;

print STDERR "get MP IDs... " if $verbose > 0;
my $repids = mySociety::DaDem::get_representatives([keys %wmc]);
print STDERR "done\n" if $verbose > 0;

my %repid_to_area_name;

foreach (keys %$repids) {
    if (!@{$repids->{$_}}) {
        print STDERR "area #$_ ($wmc{$_}->{name}) has no representative\n";
    } else {
        my $repid = $repids->{$_}->[0];
        if ($repid !~ /^[1-9]\d*$/) {
            print STDERR "area #$_ ($wmc{$_}->{name}) has bad representative ID $repid\n";
        } else {
            $repid_to_area_name{$repid} = $wmc{$_}->{name};
        }
    }
}

print STDERR "get MP info... " if $verbose > 0;
my $reps = mySociety::DaDem::get_representatives_info([map { $_->[0] } grep { @$_ == 1 } values %$repids]);
print STDERR "done\n" if $verbose > 0;

print STDERR "get MP message counts... " if $verbose > 0;
my $messagecount = dbh()->selectall_hashref("
                        select recipient_id, count(id) as num
                        from message
                        where state = 'finished'
                        group by recipient_id",
                        'recipient_id');
print STDERR "done\n" if $verbose > 0;

my $stq = dbh()->prepare("
            select distinct on(message_id, question_id) answer, recipient_id
            from questionnaire_answer, message
            where questionnaire_answer.message_id = message.id
                and recipient_type = 'WMC'
                and question_id = 0
                and recipient_id in (" . join(', ', keys %$reps) . ")");

$stq->execute();

while (my ($answer, $recipient_id) = $stq->fetchrow_array()) {
    if ($answer eq 'yes') {
        delete $reps->{$recipient_id};
    } elsif (exists($reps->{$recipient_id})) {
        ++$reps->{$recipient_id}->{noes};
    }
}

# Filter out items with < 5 messages sent to them
my $got_something = 0;
my @output;
foreach (keys %$reps) {
    next unless (exists($messagecount->{$_}));
    next unless (defined($messagecount->{$_}));
    next unless ($messagecount->{$_}->{num} >= 5);
    push @output, $reps->{$_};
    $got_something = 1;
}
exit if (!$got_something);
@output = sort { $messagecount->{$b->{id}}->{num} <=> $messagecount->{$a->{id}}->{num} } @output;

print <<EOF;
* Check addresses of these MPs, who have no positive feedback:
EOF

our $admin_url = mySociety::Config::get('ADMIN_URL');
foreach (@output) {
    $_ = $_->{id};
    printf "  - %s (%s) has been sent %d msgs (got %d 'no', 0 'yes')\n    %s\n",
            $reps->{$_}->{name},
            $repid_to_area_name{$_},
            $messagecount->{$_}->{num},
            $reps->{$_}->{noes} || 0,
            $admin_url . '/?page=reps&rep_id=' . $_
            ;
}



