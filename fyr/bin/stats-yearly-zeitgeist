#!/usr/bin/perl -w
#
# stats-yearly-zeitgeist:
#
# General yealy statistical information about WriteToThem.

# Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: stats-yearly-zeitgeist,v 1.8 2007-02-02 12:21:22 dademcron Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use CGI;
use DateTime;
use DateTime::Format::Strptime;
use HTML::Entities;
use Data::Dumper;
use POSIX qw(strftime);
use utf8;
binmode(STDOUT, ':utf8');

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::DaDem;
use mySociety::MaPit;
use mySociety::VotingArea;
use mySociety::Util;

use FYR;

# Configurable parameters
my $year = shift;
die "enter a reasonable year as first argument" if !$year || $year < 2000 || $year > 5000;

############################################################################
# Extract basic data from MaPit/DaDem

my $start_epoch = DateTime->new( year=>$year, month=>1, day=>1, hour=>0, minute=>0, time_zone=>'GMT')->epoch;
my $end_epoch = DateTime->new( year=>$year+1, month=>1, day=>1, hour=>0, minute=>0, time_zone=>'GMT')->epoch;
# We choose 4 weeks, because 2 weeks until first questionnaire, another week before reminder, then give
# at least another week for reponse and safety margin.
die "Need to wait 4 weeks into year before running to be sure have all questionnaire info" if ($end_epoch > time() - 86400 * 28);
my $period_length = $end_epoch - $start_epoch;

print STDERR "year: $year epochs of calculation: $start_epoch => $end_epoch\n";

my $summary_types = {
    # Councillors of whatever sort 
    'council' => ['DIW','CED','LBW','COP','LGE','MTW','UTE','UTW'],
    # Parliament 
    'westminster' => ['WMC'],
    'lords' => ['HOC'],
    # Devolved assembly members / MSPs
    'scotland' => ['SPC','SPE'],
    'wales' => ['WAC','WAE'],
    'london' => ['LAC','LAE'],
    'northern_ireland' => ['NIE'],
    # MEPs
    'europe' => ['EUR']
};
my $summary_reverse;
foreach my $summary_type (keys %$summary_types) {
    foreach my $area_type (@{$summary_types->{$summary_type}}) {
        $summary_reverse->{$area_type} = $summary_type;
    }
}

############################################################################
# Fill in message counts and questionnaire answers

# Questionnaire answers: question_id 
#   #0 is "did you get a response?"; 
#   #1 is "is this your first time?".

print STDERR "get message counts... ";
my $stn = dbh()->prepare("
            select count(id), recipient_type
            from message
            where state in ('sent', 'finished')
                and dispatched >= ? and dispatched < ?
                and dispatched < ?
            group by recipient_type");

my $sent_messages;
$stn->execute($start_epoch, $end_epoch, time() - 86400 * 28);
while (my ($n, $reptype) = $stn->fetchrow_array()) {
    die "$reptype not known" if !$summary_reverse->{$reptype};
    $sent_messages->{$summary_reverse->{$reptype}} += $n;
}
print STDERR "done\n";

print STDERR "get overall questionnaire responses... ";
my $stqo = dbh()->prepare("
            select distinct on(message_id, question_id)
                message_id, dispatched, question_id, answer, recipient_type
            from questionnaire_answer, message
            where questionnaire_answer.message_id = message.id
                and dispatched >= ? and dispatched < ?
                and dispatched < ?");
$stqo->execute($start_epoch, $end_epoch, time() - 86400 * 28);
my $r;
while (my ($msgid, $dispatched, $qid, $answer, $reptype) = $stqo->fetchrow_array()) {
    my $summary_type = $summary_reverse->{$reptype};
    if ($qid == 0) {
        ++$r->{$summary_type}->[1];
    } elsif ($qid == 1) {
        ++$r->{$summary_type}->[3];
    }
    if ($qid == 0 && $answer eq 'yes') {
        ++$r->{$summary_type}->[0];
    } elsif ($qid == 1 && $answer eq 'yes') {
        ++$r->{$summary_type}->[2];
    }
}
#foreach my $repid (@allreps) {
#    foreach (0..3) {
#        $r{$repid}->[$_] = 0 if (!$r{$repid}->[$_]);
#    }
#}
print STDERR "done\n";

############################################################################

sub emit_php($$) {
    my ($var, $value) = @_;
    if (!defined($value)) {
        print "        '$var' => null,\n";
    } else {
        $value =~ s/'/\\'/g;
        print "        '$var' => '$value',\n";
    }
}

my $total_sent = 0;
my $total_responded = 0;
my $total_responded_outof = 0;
my $total_firsttime = 0;
my $total_firsttime_outof = 0;
print "<?php\n/* Automatically generated by fyr/bin/stats-yearly-zeitgeist */\n\n";
print "\$zeitgeist_by_summary_type_${year} = array(\n";
foreach my $summary_type (keys %$summary_types) {
    my $data = $r->{$summary_type};
    if (!$data) {
        print STDERR "no data for $summary_type\n";
        next;
    }
    my ($re_mean, $re_low, $re_high) = 
        $data->[1] > 0 ? mySociety::Util::binomial_confidence_interval($data->[0], $data->[1]) : undef;
    my ($ft_mean, $ft_low, $ft_high) = 
        $data->[3] > 0 ? mySociety::Util::binomial_confidence_interval($data->[2], $data->[3]) : undef;
    print "    '$summary_type' => array(\n";
    emit_php("dispatched_success", $sent_messages->{$summary_type});
    emit_php('responded', $data->[0]);
    emit_php('responded_outof', $data->[1]);
    emit_php('responded_mean', $re_mean);
    emit_php('responded_95_low', $re_low);
    emit_php('responded_95_high', $re_high);
    emit_php('firsttime', $data->[2]);
    emit_php('firsttime_outof', $data->[3]);
    emit_php('firsttime_mean', $ft_mean);
    emit_php('firsttime_95_low', $ft_low);
    emit_php('firsttime_95_high', $ft_high);
    print "    ),\n";

    my $q_data = $r->{$summary_type};
    $total_sent += $sent_messages->{$summary_type};
    $total_responded += $q_data->[0];
    $total_responded_outof += $q_data->[1];
    $total_firsttime += $q_data->[2];
    $total_firsttime_outof += $q_data->[3];

    print "\n";
}

print "\n";
print "    'total' => array(\n        'total' => true,\n";
emit_php('dispatched_success', $total_sent);
#emit_php('total_fails_after_dispatch', $total_fails_after_dispatch); # this is a bit useless
emit_php('responded', $total_responded);
emit_php('responded_outof', $total_responded_outof);
emit_php('firsttime', $total_firsttime);
emit_php('firsttime_outof', $total_firsttime_outof);
print "    ),\n";
print ");\n?>\n";


