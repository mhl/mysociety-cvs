#!/usr/bin/env python2.5
#
# nptdr-plan
# Calculate journey times across a network to a destination at a specific time,
# using the NPTDR accessibilty planning data.
#
# Copyright (c) 2008 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

import sys
import logging
import datetime

sys.path.append("../../pylib")
sys.path.append("../pylib")
import makeplan

# Parameters (should be input on the command line or via a config file)
nptdr_files = [
    "/home/francis/toobig/nptdr/sample/ATCO_040_COACH.CIF",
    "/home/francis/toobig/nptdr/sample/ATCO_040_METRO.CIF",
    "/home/francis/toobig/nptdr/sample/ATCO_040_TRAIN.CIF",
    "/home/francis/toobig/nptdr/sample/ATCO_040_BUS.CIF",
]
#target_location = '9100AYLSBRY'
target_location = '210021422650'
target_when = datetime.datetime(2007,10,16, 12,0) # 15th-21st October 2007 is valid week range for 2007
#output_format = 'human'
output_format = 'for_map'
#logging.basicConfig(level=logging.DEBUG)
#logging.basicConfig(level=logging.INFO)
logging.basicConfig(level=logging.WARN)

#print atco.adjacent_location_times('9100AYLSBRY', datetime.datetime(2007, 10, 9, 9, 0))
#print atco.adjacent_location_times('9100AMERSHM', datetime.datetime(2007, 10, 9, 9, 0))

# Load in journey tables
atco = makeplan.PlanningATCO()
for nptdr_file in nptdr_files:
    atco.read(nptdr_file)
atco.index_by_short_codes()

#atco.find_journeys_crossing_midnight()

# Calculate shortest route from everywhere on network
(results, routes) = atco.do_dijkstra(target_location, target_when)

# Output the results
if output_format == 'human':
    s = "Journey times to " + target_location + " by " + str(target_when)
    print
    print s
    print len(s) * '='
    print

    for location in sorted(results.keys()):
        when = results[location]

        delta = target_when - when
        mins = delta.seconds / 60 + delta.days * 24 * 60
        print location.ljust(12) + " " + str(mins) + " mins"
        route = routes[location]
        route.reverse()
        for waypoint in route:
            print "\tleave %s (%s) at %s" % (waypoint.location, atco.location_details[waypoint.location].long_description(), str(waypoint.when))

elif output_format == 'for_map':
    for location, when in results.iteritems():
        delta = target_when - when
        secs = delta.seconds + delta.days * 24 * 60 * 60
        loc = atco.location_details[location]
        print loc.additional.grid_reference_easting + " " + loc.additional.grid_reference_northing + " " + str(secs)
    
else:
    raise Exception("Unknown output format " + output_format)




