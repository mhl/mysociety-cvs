#!/usr/bin/perl -w -I../../perllib
#
# calc-bounding-rectangle-latlon
# Given a sqlite postcode database (see postcodes-into-db), a postcode and a
# size (in metres, e.g. 20,000), returns the bounding rectangle in laton.
#
# Copyright (c) 2008 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: calc-bounding-rectangle-latlon,v 1.1 2008-04-25 11:16:39 francis Exp $';

use strict;

use DBI;
use Text::CSV_XS;
use mySociety::GeoUtil;

my ($sqlite_db, $to, $size) = @ARGV;
die "Parameters are filename of sqlite database and postcode and size" if !$sqlite_db || !$to || !$size;

my $dbh = DBI->connect("dbi:SQLite:dbname=$sqlite_db", "", "", { AutoCommit => 0 });

my ($E, $N) = $dbh->selectrow_array('select easting, northing from postcode where postcode = ?', {}, $to);
die "no location for destination postcode '$to'" if (!defined($E));

# Bounds of rectangle.
my $WW = $E - $size / 2;
my $EE = $E + $size / 2;
my $SS = $N - $size / 2;
my $NN = $N + $size / 2;

# Convert crudely to lat/lon
my ($LSS, $LWW) = mySociety::GeoUtil::national_grid_to_wgs84($WW, $SS, 'G');
my ($LNN, $LEE) = mySociety::GeoUtil::national_grid_to_wgs84($EE, $NN, 'G');

#warn "center = ($E, $N)\n";
#warn "bounds = ($WW, $SS) to ($EE, $NN)\n";
print "$LWW $LEE $LSS $LNN\n";

