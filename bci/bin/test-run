#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for FixMyStreet.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../conf/general file set up for FixMyStreet, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a database with name ending "_testharness"; this script will drop and remake the
#   database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# Email: matthew@mysociety.org; WWW: http://www.mysociety.org/

# TODO
#   Admin
#   RSS
#   Whatever I've missed!

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.10 2009-08-27 20:03:37 louise Exp $';

use strict;
require 5.8.0;

use FindBin;
use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

my @actions = ('report', 'update', 'questionnaire', 'alert', 'static', 'cobrand');
my %actions_desc = (
    'report' => 'report a problem',
    'update' => 'leave an update on a report',
    'questionnaire' => 'receive and answer a questionnaire or two',
    'alert' => 'sign up for a local alert, and an update alert, check they arrive',
    'static' => 'check static pages',
    'cobrand' => 'check cobranding'
);

date_print("Set up web test harness...");

my ($wth, $action, $verbose, $pause, $multispawn) = mySociety::WebTestHarness::setup({
    actions => \@actions,
    actions_desc => \%actions_desc,
    dbname => 'BCI',
    'sql_extra' => ['../db/alert_types.sql'],
});
$multispawn = 1;

# Set up options
our $base_url;
sub set_base_url($) {
    my $cobrand = shift;
    $base_url = mySociety::Config::get('BASE_URL');
    $base_url =~ m#^http://(.+)/?$#;
    $base_url = $1;
    $base_url = "http://" . $cobrand . $base_url;
}
set_base_url('');
die "domain conf not consistent" if (mySociety::Config::get('BASE_URL') ne $base_url);

my $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
my $contact_email = mySociety::Config::get('CONTACT_EMAIL');
my $test_email_prefix = mySociety::Config::get('TEST_EMAIL_PREFIX');
sub email_n { my $n = shift; return "$test_email_prefix+$n\@$email_domain"; }
sub name_n { my $n = shift; return ($n % 100  == 0) ? "Rachel Reporter $n" : "Peter Person $n"; }

#############################################################################
# Main code

# Setup error log watching
$wth->log_watcher_self_test($base_url . "/test.cgi?error=1", "Illegal division by zero");
sleep(1); # XXX Without this, the above/below suck in one error line but not the other?!
my $errors = $wth->_log_watcher_get_errors(); # As Perl has two error lines.

# Run the reports
foreach (@actions) {
    next unless $action->{$_};
    date_print($actions_desc{$_}) if $actions_desc{$_};
    do_report() if $_ eq 'report';
    do_update() if $_ eq 'update';
    do_questionnaire() if $_ eq 'questionnaire';
    do_alert() if $_ eq 'alert';
    do_static() if $_ eq 'static';
    do_cobrand() if $_ eq 'cobrand';
}

# Check for any unhandled mails or errors
call_send_emails();
$wth->email_check_none_left();
$wth->log_watcher_check();
if ($action->{'all'})  {
    print "Everything completed successfully\n";
} else {
    print "Tests completed successfully\n";
}

#############################################################################
# Functions to make reports, and so on

# Print log line with date
sub date_print {
    print scalar localtime() . ' ' . shift() . "\n";
}

# Print what we're doing
sub comment {
    my $comment = shift;
    date_print("  $comment") if $verbose > 0;
}
sub verbose {
    my $comment = shift;
    date_print("    $comment") if $verbose > 1;
}

# display_url URL
# Print the URL if in verbose mode.  If --pause set, also print it and 
# wait for RETURN to be pressed.
sub display_url {
    my ($circumstance, $url) = @_;
    $wth->email_check_url($url);
    date_print("$circumstance: " . $url . "\n") if $verbose > 1 || $pause;
    if ($pause) {
        print "Press RETURN to continue";
        readline(*STDIN);
    }
}

# Change the date that all parts of FixMyStreet think is today.  Call with no
# parameters to reset it to the actual today.
sub set_fms_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate');
        dbh()->do('insert into debugdate (override_today) values (?)', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate');
    }
    dbh()->commit();
}

# Database functions
sub do_something_databasey {
    my ($param) = @_;
    dbh()->do('update something set foo = 1 where bar = ?', {}, $param);
    dbh()->commit();
}

# Call all the email sending scripts
sub call_send_emails {
    $wth->multi_spawn($multispawn, "./send-reports " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
    $wth->multi_spawn($multispawn, "./send-alerts", $verbose);
    $wth->multi_spawn($multispawn, "./send-questionnaires " . ($verbose > 1 ? qw(--verbose) : ''), $verbose);
}

#############################################################################

sub do_report {
    set_base_url('');
    $wth->browser_get($base_url);
    my $postcode = 'SW1A 0AA';
    $wth->browser_submit_form(form_name => 'postcodeForm',
        fields => { pc => $postcode},  
        );
    $wth->browser_check_contents('Problems in this area');
    {
        # Writing values to hidden fields, so switching 
        # off errors in a local context

        local $^W = 0;

        # WWW::Mechanize doesn't like the added tile coords, so
        # just post them         
        $wth->browser_post($base_url,
                      { pc => $postcode,
                        x => 3287,
                        y => 1112,
                        'tile_3287.1113.x' => 	221,
                        'tile_3287.1113.y' => 	158,
                        submit_map => 1});
    
        $wth->browser_check_contents('<h1>Reporting a problem</h1>');
        $wth->browser_submit_form(form_name => 'mapForm', 
            fields => { submit_map => 2,
                        x => 3287, 
                        y => 1112,
                        pc => $postcode, 
                        council => -1,
                        easting => 530375.920751842, 
                        northing => 179501.524003048,
                        title => 'My test problem', 
                        detail => 'Detail of my test problem', 
                        anonymous => 1, 
                        name => name_n(1),
                        email => email_n(1), 
                        phone => '555 5555'}, 
         );
   } 
   $wth->browser_check_contents('Nearly Done!');
    my $confirmation_email = $wth->email_get_containing(
            '%Subject: Confirm your problem on FixMyStreet'.
            '%To: "'.name_n(1).'" <'.email_n(1).'>'.
            '%to confirm the problem%');
    die "Message confirmation link not found" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
    print "Message confirm URL is $1\n" if $verbose > 1;
    $wth->browser_get($1);
    $wth->browser_check_contents('successfully confirmed your problem');
}

sub do_update {
    set_base_url('');
}

sub do_questionnaire {
    set_base_url('');
}

sub do_alert {
    set_base_url('');
}

sub do_cobrand {
    set_base_url('emptyhomes.');
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Empty Homes Agency");
}

sub do_static {
    set_base_url('');
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text => 'All reports');
    $wth->browser_follow_link(text => 'Cheltenham Borough Council');
    $wth->browser_follow_link(text => 'see more details');
    $wth->browser_follow_link(text => 'Help');
    $wth->browser_follow_link(text => 'Contact');
    $wth->browser_submit_form(
        with_fields => {
            name => 'Mr Test Example',
            em => email_n(1),
            subject => 'This is a test message.',
            message => 'FixMyStreet rocks!',
        }
    );
    $wth->email_get_containing('%This is a test message%');
}

#browser_get(URL)
#browser_follow_link(text_regex => qr//)
#browser_check_contents(qr// | '')
#browser_check_no_contents("successful");
#browser_submit_form(form_name => '', fields => '', button => '')
#browser_content();
#email_get_containing( '%To: "' . name_n(3) . '" <' . email_n(3) . '>%From: "' . name_n(0) . '"%You signed this pledge after this message%Love and kisses%');
#email_check_none_left();

