#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for Hassleme
# 
# Requires:
# * ../general/conf file set up for HassleMe and matching the below requirements
# * a database with name ending "_testharness"; this script will drop and remake the
#   database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery.
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# Email: louise@mysociety.org; WWW: http://www.mysociety.org/

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.13 2009-04-28 10:40:24 louise Exp $';

use strict;
require 5.8.0;

use Getopt::Long;
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";
use Carp qw(verbose);
BEGIN {
    use mySociety::Config;
    mySociety::Config::set_file('../conf/general');
}

use mySociety::WebTestHarness;
use Hassle;

sub help {
print <<END

Usage: test-run [OPTION]

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)

END
}
# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $help;
our $multispawn = 1;

if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'help' =>               \$help,
        'multispawn=i' => \$multispawn,
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}
#----------------------------------
# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
our $base_url = mySociety::Config::get('WEBURL');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');

$wth->database_connect('HM_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_cycle_sequences(200);
$wth->email_setup({ eveld_bin => undef,
                    log_mailbox => "log_mailbox" });
#----------------------------------
sub email_n { my $n = shift; return "hm-testharness+$n\@$email_domain"; }
#----------------------------------
sub bounce_n { my $n = shift; return "hm-testbounce+$n\@$email_domain"; }
#----------------------------------
sub signup_user($$){
    my ($email, $test_hassle) = @_;
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Set up a hassle now!");
    $wth->browser_check_contents("This is a test site");
   
    $wth->browser_submit_form(form_name => 'createHassleForm',
        fields => { freq => "3650", 
                    what => $test_hassle,
                    email => $email, 
                    public => "true"},  
        );
    $wth->browser_check_contents("Now check your email!");
    
    # Shouldn't be considering sending hassles yet
    my $hassle_output = `./send-hassles --verbose=1 2>&1`;
    die 'Active hassle for unconfirmed user' if ($hassle_output =~ /$test_hassle/);

    # Confirm email
    my $confirmation_email = $wth->email_get_containing('%To: ' . $email . '%');
    die "HassleMe confirmation link not found\n" if ($confirmation_email !~ m#^\s+(http://.*$)#m);
    my $confirmation_url = $1;
    $wth->email_check_url($confirmation_url);
    print "Confirmation URL: " . $confirmation_url . "\n" if $verbose > 1;
    $wth->browser_get($confirmation_url);
    $wth->browser_check_contents("Well done - we'll now hassle you as per your request."); 
    # Hassle should now be in the set considered for emails
    $hassle_output = `./send-hassles --verbose=1 2>&1`;
    die 'No active hassle for confirmed user' unless ($hassle_output =~ /$test_hassle/);
}

#----------------------------------
# Send one mail to bounce handling script
sub call_handlemail($) {
    my $content = shift;
    my ($rd, $wr);
    $rd = new IO::Handle();
    $wr = new IO::Handle();
    my $p = new IO::Pipe($rd, $wr);
    my ($p2, $pid) = mySociety::TempFiles::pipe_via("./handlemail", $wr);
 
    $p2->print($content);
    $p2->close(); 
    waitpid($pid, 0);
}
#----------------------------------
sub do_non_bounce_reply_without_verp_test(){
    
    my $non_bouncing_hassle = 'get out of the office more';
    signup_user(email_n(2), $non_bouncing_hassle);
    my $non_bounce_email = 'From ' . email_n(2) . ' Tue Sep 09 16:25:52 2008
Return-path: <' . email_n(2) . '>
Envelope-to: hm-testharness@sandwich.ukcod.org.uk
Delivery-date: Tue, 09 Sep 2008 16:25:52 +0100
X-IronPort-AV: E=Sophos;i="4.32,366,1217822400"; 
   d="scan\'208,217";a="1201752"
Subject: I am out of the office.
From: me <' . email_n(2) . '>
To: HassleMe <hm-testharness@sandwich.ukcod.org.uk>
Message-ID: <OF367A6E95.C47CFFC5-ON852574BF.0054BE74-852574BF.0054BE74@x>
Date: Tue, 9 Sep 2008 11:25:37 -0400
X-MIMETrack: Serialize by Router on DRNotes1/NY/US/KSFHH(Release 7.0.2FP2 HF144|July 27, 2007) at
 09/09/2008 11:25:39 AM
MIME-Version: 1.0
Content-type: multipart/alternative; 
	Boundary="0__=0ABBFE2CDFC738E48f9e8a93df938690918c0ABBFE2CDFC738E4"
Content-Disposition: inline
Status: O
Content-Length: 602
Lines: 18

--0__=0ABBFE2CDFC738E48f9e8a93df938690918c0ABBFE2CDFC738E4
Content-type: text/plain; charset=US-ASCII


I will be out of the office starting  09/08/2008 and will not return until
09/29/2008.

I will respond to your message when I return.
--0__=0ABBFE2CDFC738E48f9e8a93df938690918c0ABBFE2CDFC738E4
Content-type: text/html; charset=US-ASCII
Content-Disposition: inline

<html><body>
<p>I will be out of the office starting  09/08/2008 and will not return until 09/29/2008.<br>
<br>
I will respond to your message when I return.</body></html>
--0__=0ABBFE2CDFC738E48f9e8a93df938690918c0ABBFE2CDFC738E4--
    ';
    call_handlemail($non_bounce_email);

    # Hassle should still be in the set considered for emails
    my $hassle_output = `./send-hassles --verbose=1 2>&1`;    
    die 'Inactive hassle for user following non bounce mail' unless ($hassle_output =~ /$non_bouncing_hassle/);
}
#----------------------------------
sub do_permanent_bounce_without_verp_test(){
    
    my $bouncing_hassle = 'keep my email account from being shut down';
    signup_user(email_n(1), $bouncing_hassle);
    my $bounce_email = 'From MAILER-DAEMON Tue Sep 09 17:04:38 2008
Return-path: <>
Envelope-to: hm-testharness@sandwich.ukcod.org.uk
Delivery-date: Tue, 09 Sep 2008 17:04:38 +0100
From: postmaster@yoo.com
To: hm-testharness@sandwich.ukcod.org.uk
Date: Tue, 9 Sep 2008 17:02:23 +0100
MIME-Version: 1.0
Content-Type: multipart/report; report-type=delivery-status;
	boundary="9B095B5ADSN=_01C8F669DA6E489E0002048Dsmtp.yoo.com"
X-DSNContext: 335a7efd - 4523 - 00000001 - 80040546
Message-ID: <8T9vLehr2000166ee@smtp.yoo.com>
Subject: Delivery Status Notification (Failure)
Status: O
Content-Length: 2370
Lines: 76

This is a MIME-formatted message.  
Portions of this message may be unreadable without a MIME-capable mail program.

--9B095B5ADSN=_01C8F669DA6E489E0002048Dsmtp.yoo.com
Content-Type: text/plain; charset=unicode-1-1-utf-7

This is an automatically generated Delivery Status Notification.

Delivery to the following recipients failed.

      ' . email_n(1) . '


--9B095B5ADSN=_01C8F669DA6E489E0002048Dsmtp.yoo.com
Content-Type: message/delivery-status

Reporting-MTA: dns;smtp.yoo.com
Received-From-MTA: dns;ixe-mta-02.emailsystems.com
Arrival-Date: Tue, 9 Sep 2008 17:02:22 +0100

Final-Recipient: rfc822;' . email_n(1) . '
Action: failed
Status: 5.1.1

--9B095B5ADSN=_01C8F669DA6E489E0002048Dsmtp.yoo.com
Content-Type: message/rfc822

X-EMS-Archived: 1160
From: Hasslebot <hassle@hassleme.co.uk>
To: ' . email_n(1) . '
Subject: Don\'t forget to... 
Message-ID: <6fb670547a7e878cf@hassleme.co.uk>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
Sender: HassleMe <hm-testharness@sandwich.ukcod.org.uk>
Date: Tue, 09 Sep 2008 17:00:15 +0100
Return-Path: hm@sandwich.ukcod.org.uk
X-OriginalArrivalTime: 09 Sep 2008 16:02:22.0775 (UTC) FILETIME=[71EFFC70:01C91295]

Message content

--9B095B5ADSN=_01C8F669DA6E489E0002048Dsmtp.yoo.com--    
';

    call_handlemail($bounce_email);

    # Hassle should no longer be in the set considered for emails
    my $hassle_output = `./send-hassles --verbose=1 2>&1`;    
    die 'Active hassle for deleted user' if ($hassle_output =~ /$bouncing_hassle/);
}
#----------------------------------
sub do_basic_signup_test(){
    
    my $test_hassle = 'run the test suite for Hassleme';
    signup_user(email_n(0), $test_hassle);
    
}
#----------------------------------
# Test the process of signing up for a hassle
print "Testing basic signup...\n" if $verbose > 0;
do_basic_signup_test();

# Test the deletion of a recipient whose hassles produce permanent bounces
print "Testing deletion of recipient following permanent bounce...\n" if $verbose > 0;
do_permanent_bounce_without_verp_test();

# Test the handling of a non-bounce reply to a hassle - should be ignored
print "Testing non-bounce reply is ignored" if $verbose > 0; 
do_non_bounce_reply_without_verp_test();

print "Checking no emails left at end...\n" if $verbose > 0;
$wth->email_check_none_left();
print "Everything completed successfully\n" if $verbose > 0;
