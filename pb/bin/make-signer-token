#!/usr/bin/perl -w
#
# make-signer-token:
# Quick test script to create a token for the obsolete signer interface, for
# testing migration.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: make-signer-token,v 1.1 2005-05-26 18:28:19 chris Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use DBI;
use DBD::Pg;
use IO::String;

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);

use RABX;

use PB;


die "arguments are: pledge ref, email, name" unless (@ARGV == 3);
my ($ref, $email, $name) = @ARGV;

my $signer = {
        pledge_id => scalar(dbh()->selectrow_array('select id from pledges where ref ilike ?', {}, $ref)),
        email => $email,
        name => $name,
        showname => 1
    };

die "pledge ref '$ref' is unknown" unless (defined($signer->{pledge_id}));

my $i = new IO::String();
RABX::wire_wr($signer, $i);
my $ser = ${$i->string_ref()};

my $token = sprintf('%08x', rand(0xffffffff));

my $s = dbh()->prepare("insert into token (scope, token, data, created) values ('signup-web', '$token', ?, pb_current_timestamp())");
$s->bind_param(1, $ser, { pg_type => DBD::Pg::PG_BYTEA });

$s->execute();

dbh()->commit();

print "/C/$token\n";

