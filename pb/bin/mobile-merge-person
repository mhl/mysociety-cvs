#!/usr/bin/perl -w
#
# mobile-merge-person
# Database migration script. Move the mobile field from the signers table into the person table.
#
# Copyright (c) 2007 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: mobile-merge-person,v 1.6 2007-06-20 03:24:23 francis Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";
use Data::Dumper;

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);

use PB;

# Do schema upgrades
dbh()->do('alter table person add mobile text');
dbh()->do('alter table person alter email drop not null');
dbh()->do('update signers set showname = \'f\' where mobile is not null and showname and name is null');
#dbh()->do('alter table signers drop constrant "$1"');
# Find all pairs of people whose email addresses differ only by upper/lower case.
my @signers;
my $st = dbh()->prepare('select signers.*, person.email from signers left join person on person.id = signers.person_id where signers.mobile is not null');
$st->execute();
my $c=0;
while (my $signer = $st->fetchrow_hashref()) {
    push @signers, $signer;
}
foreach my $signer (@signers) {
    print $c++ . "\n";
    print "Signer: " . $signer->{id} . "\n";
    print Dumper($signer);
    # See whether this person has converted already
    if ($signer->{person_id}) {
    	#print "Signer has a person_id\n";
        my $person = dbh()->selectrow_hashref('select * from person where id = ?', {}, $signer->{person_id});
        #print Dumper($person);
        # If there is a mobile field already, check it has same value
        if ($person->{mobile}) {
            die "signer/mobile mismatch" if $person->{mobile} ne $signer->{mobile};
        } else {
            # Otherwise copy mobile from signer to person table
            dbh()->do('update person set mobile = ? where id = ?', {}, $signer->{mobile}, $person->{id}); 
        }
    } else {
    	#print "Signer has no person_id\n";
        # See if that mobile already has a person record
        my $person = dbh()->selectrow_hashref('select * from person where mobile = ?', {}, $signer->{mobile});
        # If there is, check the email is also the same
        if ($person) {
            print Dumper($person);
            #die if (defined($person->{email}) && !defined($signer->{email})); # this happens when one converted SMS is merged with another non-converted SMS
            die if (!defined($person->{email}) && defined($signer->{email})); # XXX todo this case
            if (defined($person->{email}) && defined($signer->{email})) {
                die "email/mobile mismatch" if $person->{email} ne $signer->{email};
            }
            dbh()->do('update signers set person_id = ? where signers.id = ?', {}, $person->{id}, $signer->{id}); 
        } else {
            # Otherwise, make a brand new shiny person record
            my $next_person_id =  dbh()->selectrow_array("select nextval('person_id_seq')");
            dbh()->do('insert into person (id, mobile) values (?, ?)', {}, $next_person_id, $signer->{mobile});
            dbh()->do('update signers set person_id = ? where signers.id = ?', {}, $next_person_id, $signer->{id}); 
        }
    }
}

#dbh()->commit();
print "adding\n";
dbh()->do('alter table person add check ( email is not null or mobile is not null )');
print "adding 1\n";
dbh()->do('alter table signers drop mobile');
print "adding 2\n";
dbh()->do('alter table signers add check ( person_id is not null)');
print "adding 3\n";
dbh()->do('alter table signers add check ( (showname and name is not null) or (not showname))');

#dbh()->rollback();
dbh()->commit();

# create or replace function pledge_is_valid_to_sign(integer, text, text);
# drop function signers_combine_2(integer, integer);
# create function smssubscription_sign(integer, text)



