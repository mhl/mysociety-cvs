#!/usr/local/bin/php -q
<?php
/* 
 * send-local-alerts:
 * Run from cron regularly to send new pledge local alerts.
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: francis@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: send-local-alerts,v 1.15 2005-10-24 12:40:18 francis Exp $
 *
 */

$short_opts = '';
$long_opts = array('verbose','help');

require_once "../phplib/pbcgi.php";
require_once '../phplib/fns.php';
require_once "../phplib/alert.php";
require_once '../../phplib/db.php';
require_once '../../phplib/utility.php';

function verbose($str) {
    global $verbose;
    if ($verbose) 
        fwrite(STDERR, "send-local-alerts: $str\n");
}
function error($str) {
    fwrite(STDERR, "send-local-alerts: ERROR: $str\n");
}

$switches = $options[0];
$args = $options[1];
$verbose = 0; 
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--help') {
?>

PledgeBank local alert sending script.

Usage: send-local-alerts [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

// Main code at end.

// send_local_alerts sends alerts for new pledges near people
function send_local_alerts() {
    global $pb_today;
    verbose("sending local alerts");

    // Grab all relevant alerts
    $p = db_query("
                select alert.id as alert_id,
                    latitude as alert_latitude, longitude as alert_longitude, 
                    location.description as alert_description,
                    alerted.name as alerted_name,
                    alerted.email as alerted_email,
                    alerted.id as alerted_person_id
                from alert 
                    left join person as alerted on alert.person_id = alerted.id
                    left join location on alert.location_id = location.id
                where 
                    whendisabled is null and
                    event_code = 'pledges/local'
                ");

    $consolidated = array();
    while ($alert = db_fetch_array($p)) {
        # verbose("checking local alert for " . $alert["alerted_email"]) . " " . $alert["alert_description"];

        // Search for pledges matching alert
        $local_alert_radius = 20.0; /* km; XXX should adjust by population density */
        $q = db_query("
                select pledges.*, pledges.id as pledge_id, distance, person.name as creator_name
                from pledge_find_nearby(?, ?, ?) as nearby
                    left join pledges on nearby.pledge_id = pledges.id
                    left join person on pledges.person_id = person.id
                where
                    pledges.pin is null and
                    '$pb_today' <= pledges.date and
                    pb_pledge_prominence(pledges.id) <> 'backpage' and
                    (select id from signers
                    where signers.person_id = ?
                        and signers.pledge_id = pledges.id) is null and
                    (select whenqueued from alert_sent where
                        alert_sent.alert_id = ? and
                        alert_sent.pledge_id = pledges.id) is null 
                order by distance
            ", array(
                $alert['alert_latitude'], $alert['alert_longitude'], $local_alert_radius,
                $alert['alerted_person_id'],
                $alert['alert_id']
            ));

        if (db_num_rows($q) == 0) {
            continue;
        } 
    
        # Grab a lock
        $stillthere = db_getOne('select id from alert where id = ? for update', $alert['alert_id']);
        if (!$stillthere) continue;

        $count = 0; # how many pledges in this alert
        $text = ""; # description and link to each
        $lastrow = array();
        while ($row = db_fetch_array($q)) {
            verbose("person #${alert['alerted_person_id']} (${alert['alerted_email']}) has alert #${alert['alert_id']} on new local pledge ${row['ref']} which is ".round($row['distance'],1)."km from ${alert['alert_description']}");

            # Check to see if the alert has been sent meanwhile
            $alreadysent = db_getOne('select alert_id from alert_sent where alert_id = ? and pledge_id = ?', 
                     array($alert['alert_id'], $row['pledge_id']));
            if ($alreadysent) continue;

            # Store that alert has been sent
            db_query("insert into alert_sent (alert_id, pledge_id) values (?, ?)", 
                     array($alert['alert_id'], $row['pledge_id']));

            $pledge = new Pledge($row);
            $row['pledge_url'] = $pledge->url_main();
            $row['distance'] = round($row['distance'], 0);
            if ($row['distance'] < 1) {
                $row['distance'] = "under 1";
            }
            $lastrow = $row;
           
            # Construct repeating text
            $text .= $row['distance'] . " km away: '" . $pledge->sentence(array('firstperson'=>true)) . "'";
            $text .= " -- " . $row['creator_name'] . ".";
            $text .=" Click for more info: " . $row['pledge_url'];
            $text .= "\n\n";

            # Record how many we have
            $count++;
        }

        # Send email
        $alert['unsubscribe_url'] = alert_unsubscribe_link($alert['alert_id'], $alert['alerted_email']);
        $alert['pledges_count'] = $count;
        $alert['pledges_text'] = $text;
        if ($count > 1) {
            $f = pb_send_email_template($alert['alerted_email'], 'alert-local-multiple', $alert, array());
        } else {
            $params = array_merge($alert, $lastrow);
            $f = pb_send_email_template($alert['alerted_email'], 'alert-local-single', $params, array());
        }
        verbose("sent $count new pledge alerts in one mail to " . $alert["alerted_email"]);
        if (!$f) {
            # Revert record that it has been sent
            db_rollback();
            error("Failed to send new local pledge alert to " . $alert['alerted_email'] . " alert #" . $alert['alert_id'] . " $count pledges");
        } else {
            # Commit that it has been sent
            db_commit();
        }
    }

    verbose("finished sending local alerts");
}

db_connect();
send_local_alerts();

