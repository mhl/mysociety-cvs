#!/usr/bin/php -q
<?php
/* 
 * send-comment-alerts-alerts:
 * Run from cron regularly to send new comment email alerts.
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: francis@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: send-comment-alerts,v 1.17 2006-11-03 09:04:13 matthew Exp $
 *
 */

$short_opts = '';
$long_opts = array('verbose','help');

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once "../phplib/pbcli.php";
require_once '../phplib/fns.php';
require_once "../phplib/alert.php";
require_once '../../phplib/db.php';
require_once '../../phplib/utility.php';

function verbose($str) {
    global $verbose;
    if ($verbose) 
        fwrite(STDERR, "send-comment-alerts: $str\n");
}
function error($str) {
    fwrite(STDERR, "send-comment-alerts: ERROR: $str\n");
}

$switches = $options[0];
$args = $options[1];
$verbose = 0; 
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--help') {
?>

PledgeBank comment alert sending script.

Usage: send-comment-alerts [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

// Main code at end.

// send_comment_alerts sends alerts for new comments on a pledge
function send_comment_alerts() {
    verbose("sending comment alerts");

    // Search for alert
    $q = db_query("
            select alert.id as alert_id, alert.person_id as alert_person_id, alert.pledge_id, comment.id as comment_id,
                   comment.text as comment_text,
                   comment.name as comment_author_name,
                   comment.website as comment_author_website,
                   pledges.*,
                   alerted.name as alerted_name,
                   alerted.email as alerted_email
            from alert
                left join comment on alert.pledge_id = comment.pledge_id
                left join pledges on alert.pledge_id = pledges.id
                left join person as alerted on alert.person_id = alerted.id
            where
                whendisabled is null and
                event_code = 'comments/ref' and
                whenposted >= whensubscribed and
                (select whenqueued from alert_sent where
                    alert_sent.alert_id = alert.id and
                    alert_sent.comment_id = comment.id) is null
                and comment.person_id <> alert.person_id
                and not comment.ishidden
            order by alert.id, whenposted
            ");

    $last_alert_id = null;
    $data = array('comments'=>'');
    while ($row = db_fetch_array($q)) {
        # Grab a lock, making sure alert hasn't been deleted meanwhile
        $stillthere = db_getOne('select id from alert where id = ? for update', $row['alert_id']);
        if (!$stillthere) continue;

        # Check to see if the alert has been sent meanwhile
        $alreadysent = db_getOne('select alert_id from alert_sent where alert_id = ? and comment_id = ?', 
                 array($row['alert_id'], $row['comment_id']));
        if ($alreadysent) continue;

        verbose("person #${row['alert_person_id']} (${row['alerted_email']}) has alert on pledge ${row['ref']} for comment #${row['comment_id']} (by ${row['comment_author_name']})");
        # Debugging
        if (!array_key_exists('title', $row)) {
            print_r($row);
            error("No title in row ".$row['ref']." ".$row['comment_id']); 
        }

        # Store that alert has been sent
        db_query("insert into alert_sent (alert_id, comment_id) values (?, ?)", 
                 array($row['alert_id'], $row['comment_id']));

        # Send email
        if (!is_null($last_alert_id) && $last_alert_id != $row['alert_id']) {
                $pledge = new Pledge($data);
                locale_push($pledge->lang());
                $data['comment_url'] = $pledge->url_comments();
                $data['unsubscribe_url'] = alert_unsubscribe_link($data['alert_id'], $data['alerted_email']);
                $f = pb_send_email_template($data['alerted_email'], 'alert-comment', $data, array());
                locale_pop();
                if (!$f) {
                    # Revert record that it has been sent
                    db_rollback();
                    error("Failed to send comment alert to " . $data['alerted_email'] . " alert #" . $data['alert_id']);
                } else {
                    # Commit that it has been sent
                    db_commit();
                }
                $data = array('comments'=>'');
        }

        $data['comments'] .= $row['comment_author_name'] . ' : ' . trim($row['comment_text']) . "\n\n------\n\n";
        if (!isset($data['title'])) {
            $data = array_merge($data, $row);
        }
        $last_alert_id = $row['alert_id'];
    }

    verbose("finished sending comment alerts");
}

db_connect();
send_comment_alerts();

