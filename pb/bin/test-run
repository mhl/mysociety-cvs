#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for PledgeBank.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for PledgeBank, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a database with name ending "_testharness"; this script will drop and remake the
#   database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# Tests to do:
# Check other private pages are private (e.g. flyers)
# Send SMS messages somehow without costing us a fortune

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.16 2005-04-01 07:24:25 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

#DBI->trace(1);

our $base_url = mySociety::Config::get('BASE_URL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
sub email_n { my $n = shift; return "pbharness+$n\@owl"; }
sub name_n { my $n = shift; return $n == 0 ? "Peter Setter" : "Siegfried Signer $n"; }
my $verbose = 1;

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness({db_option_prefix => 'PB_'});
$wth->log_watcher_setup($httpd_error_log);
$wth->database_drop_reload('../db/schema.sql');
$wth->email_setup({ eveld_bin => "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });
our $b = $wth->browser_get_agent();

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../pb/");
$wth->php_check_syntax("../../pb/templates/emails/", qr//);

# Check that we can detect PHP errors
print "Confirm we can detect errors...\n" if $verbose > 0;
$b->get($base_url . "/test.php?error=1" );
die "Unable to detect errors from PHP" if !$wth->log_watcher_get_errors();

# Run some pledges through life cycle
print "Making private pledge and letting it expire...\n" if $verbose > 0;
do_private_failing_pledge();
print "Making public pledge and making it succeed...\n" if $verbose > 0;
do_public_succeeding_pledge();

# Check for any unhandled mails or errors
$wth->email_check_none_left();
$wth->log_watcher_check();
print "Everything completed successfully\n";

#############################################################################
# Functions to make and sign pledges, and so on

# sign_pledge WHO SHOW_SIGNATURE
# Adds a signer to a pledge, assumes browser is already pointing to pledge
# signup page.  Adds person number WHO.  SHOW_SIGNATURE is 1 for their
# signature to be public, undef for private.
sub sign_pledge {
    my ($who, $show_signature) = @_;

    $wth->browser_check_contents("Sign me up");
    $b->submit_form(form_name => 'pledge',
        fields => { 
            name => name_n($who), email => email_n($who), showname => $show_signature 
            },
        button => 'submit') or die "Failed to submit signing form";
    $wth->browser_check_contents("We've sent you an email to confirm your address");
    $wth->log_watcher_check();
}

# find_and_sign_pledge ACTION WHO SHOW_SIGNATURE
# Finds a public pledge from the front page use text ACTION, then calls
# sign_pledge.
sub find_and_sign_pledge {
    my ($action, $who, $show_signature) = @_;

    $b->get($base_url);
    $b->follow_link(text_regex => qr/$action/) or die "Pledge not appeared on front page";
    sign_pledge($who, $show_signature);
}

# confirm_signature ACTION WHO EXPECTED
# Looks for confirmation email to WHO with pledge action ACTION.  Follows link to
# confirm the signature.  EXPECTED indicates what result is expected:
#   'signed' - a successful signing
#   'reached' - a successful signing, which caused pledge to reach its target
#   'finished' - failed signing, because pledge has finished (closed, expired)
sub confirm_signature {
    my ($action, $who, $expected) = @_;
    $expected ||= "signed";
    
    # Click link in the confirmation email
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.email_n($who).
        '%Subject: Signing up to \''.$action.'\''.
        '%to confirm your signature%');
    print "Confirmation link not found\n" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
#print "Confirm link is $1"; exit; # for testing confirmation links ;)
    $b->get($1);

    # Check there were no errors
    $wth->log_watcher_check();

    # Look for appropriate result in web page
    if ($expected eq 'signed' || $expected eq 'reached') {
        $wth->browser_check_contents("Thanks for signing");
        if ($expected eq 'reached') {
            $wth->browser_check_contents("Your signature has made this pledge reach its target!");
        }
    } elsif ($expected eq 'finished') {
        $wth->browser_check_contents("the pledge finished");
    } else {
        die "Unknown flag '$expected'";
    }
}

# create_pledge WHO PAGE1 PAGE2
# Creates a new pledge, setter is person number WHO.  PAGE1
# and PAGE2 contain parameters for each page of the sign-up form.
sub create_pledge {
    my ($who, $page1, $page2) = @_;
    $page1->{name} = name_n($who); 
    $page1->{email} = email_n($who);

    $b->get($base_url);
    $b->follow_link(text_regex => qr/Start your own pledge/) or die "Start your own pledge link missing";
    $wth->browser_check_contents("New Pledge");
    $b->submit_form(form_name => 'pledge', fields => $page1,
        button => 'submit') or die "Failed to submit creating form stage 1";
    $wth->browser_check_contents("Step 2");
    $wth->log_watcher_check();
    $b->submit_form(form_name => 'pledge',
        fields => $page2,
        button => 'submit') or die "Failed to submit creating form stage 2";
    $wth->browser_check_contents("You must now click on the link within the email we've just sent you");
    $wth->log_watcher_check();
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.email_n($who).'%to confirm that you%');
    die "Confirmation link not found\n" if ($confirmation_email !~ m#^($base_url.*$)#m);
    $b->get($1);
    $wth->browser_check_contents("Thank you for confirming your pledge");
}

# Change the date that all parts of PledgeBank think is today.  Call with no
# parameters to reset it to the actual today.
sub set_pb_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate; insert into debugdate (override_today) values (?);', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate;');
    }
    dbh()->commit();
}

# Call frequentupdate cron job
sub call_frequentupdate {
    system("php", "frequentupdate", "--verbose") and die "Failed to call frequentupdate";
}

#############################################################################
sub do_private_failing_pledge {
    my $pledge_action_private = 'check private pledges are private';
    my $private_password = 'zx3uuhai';
    set_pb_date('1980-12-01');
    create_pledge(0, 
        { title => $pledge_action_private, 
            target => '10', date => 'Dec 31st', ref => 'privatepledge' 
        },
        { visibility => 'password', password => $private_password }
    );
    $b->get($base_url);
    $wth->browser_check_no_contents($pledge_action_private);

    my $goto_pledge_page = sub {
        $b->get($base_url . "/privatepledge");
        $wth->browser_check_contents("Password Protected Pledge");
        $wth->browser_check_no_contents("Incorrect password!");
        $b->submit_form(form_name => 'pledge',
                fields => { pw => 'thisisnotthepassword' },
                button => 'submit') or die "Failed to submit password form";
        $wth->browser_check_contents("Incorrect password!");
        $b->submit_form(form_name => 'pledge',
                fields => { pw => $private_password },
                button => 'submit') or die "Failed to submit password form";
        $wth->browser_check_contents($pledge_action_private);
    };

    &$goto_pledge_page();
    $wth->browser_check_no_contents("This pledge is now closed");
    sign_pledge(1, 1);
    confirm_signature($pledge_action_private, 1);

    # Test what happens upon expiry
    # ... partially sign the pledge
    &$goto_pledge_page();
    sign_pledge(2, 1);
    # ... then expire it
    set_pb_date('1981-01-15');
    # ... make sure completing the partial signing fails
    confirm_signature($pledge_action_private, 2, 'finished');
    # Check failure emails
    call_frequentupdate();
    $wth->email_get_containing('%To: '.email_n(0).  '%your pledge did not meet its target%');
    $wth->email_get_containing('%To: '.email_n(1).  '%sorry to have to inform you that%');

    # Make sure pledge says it is expired, and has no sign up box
    &$goto_pledge_page();
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign me up");
}

#############################################################################
sub do_public_succeeding_pledge {
    # Make the pledge
    set_pb_date('1982-02-01');
    my $pledge_action_completion = 'make sure a pledge can be completed';
    create_pledge(0, 
        { title => $pledge_action_completion, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => 'tomorrow', ref => 'automatedtest',
        },
        {  }
    );

    # Sign it a few times
    for (my $i = 1; $i <= 3; ++$i) {
        #print "Signing the pledge $i...\n" if $verbose > 0;
        # Don't show name for one of the users
        my $show_signature = ($i == 2) ? undef : 1;
        find_and_sign_pledge($pledge_action_completion, $i, $show_signature);
    }
    for (my $i = 1; $i <= 3; ++$i) {
        #print "Confirming signature $i...\n" if $verbose > 0;
        my $expect_target = ($i == 3);
        confirm_signature($pledge_action_completion, $i);
    }

    # Try to sign the pledge a second time as the same person
    find_and_sign_pledge($pledge_action_completion, 2, undef);
    $wth->email_get_containing('%To: '.email_n(2).
            '%according to our records you have already signed it%');

    # Partially sign pledge before completion state change
    find_and_sign_pledge($pledge_action_completion, 4, 1);
    # Check pledge has completed
    call_frequentupdate();
    $b->get($base_url);
    $wth->browser_check_contents("Target met, pledge still open for 1 day");
    $b->follow_link(text_regex => qr/$pledge_action_completion/) or die "Pledge not appeared on front page";
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents("Plus 1 other who did not want to give their name");
    for (my $i = 0; $i <= 3; ++$i) {
        # Check email there or not there
        if ($i == 2) {
            $wth->browser_check_no_contents(name_n($i));
        } else {
            $wth->browser_check_contents(name_n($i));
        }
        # Check got success emails
        my $confirmation_email = $wth->email_get_containing( '%To: '.email_n($i).'%Congratulations%');
        if ($i == 0) {
            # TODO: We need to grab link for creator to send mail here
            #print $confirmation_email;
            #exit;
        }
    }
    $wth->log_watcher_check();
    # ... complete partial signature
    confirm_signature($pledge_action_completion, 4);

    # Check what happens when the pledge expires
    set_pb_date('1982-02-03');
    call_frequentupdate();
    # Front page should no longer have pledge on it
    $b->get($base_url);
    $wth->browser_check_no_contents($pledge_action_completion);
    # Pledge should say the right things
    $b->get($base_url . "/automatedtest");
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign me up");
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents(name_n(4));
    $wth->browser_check_no_contents(name_n(5));
}

