#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for PledgeBank.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../conf/general file set up for PledgeBank, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a database with name ending "_testharness"; this script will drop and remake the
#   database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/

# TODO
# Now we have hook in WebTestHarness, make it do error log check automatically
# (at the moment we often get HTML validation errors shown for what are really
# things that are in the error log)
# Add test code for:
#   Prominence
#     Calculated prominence stuff
#     Backpage pledges
#   Search
#   Categories
#   Fuzzy pledge ref match

#   PDF and RTF stuff from poster.cgi
#   SMS on failure
#   SMS already signed, and SMS am creator so can't sign
#   Remember Me button (how do we test Cookie expirty with WWW::Mechanize?)
#   Picture uploading
#   Info page graph
#   Log in with wrong password
#   Private pledges: info page, announcearchive page

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.161 2005-11-25 17:38:20 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Storable;
use FindBin;
use Getopt::Long;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

sub help {
print <<END

Usage: test-run [OPTION] [ACTION]...

Actions are a list of tests, run if present in this order:
    public - make a public succeeding pledge
    private - make a private failing pledge
    sms - make a pledge, sign up by SMS and convert
    login - exhaustively test user login / authentication
    category - display of pledges by prominence, category and language
If you specify no actions, it will run all of them, plus some
extra smaller testes.

Options are:
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)
    --pause       Pause after displaying URLs read from emails

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $pause = 0;
our $help;
if (!GetOptions(
        'verbose=i' => \$verbose,
        'pause' => \$pause,
        'help' => \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}
our %action;
foreach (@ARGV) {
    if ($_ eq "public") {
        $action{'public'} = 1;
    } elsif ($_ eq "private") {
        $action{'private'} = 1;
    } elsif ($_ eq "sms") {
        $action{'sms'} = 1;
    } elsif ($_ eq "login") {
        $action{'login'} = 1;
    } elsif ($_ eq "category") {
        $action{'category'} = 1;
    } else {
        help();
        print "Action '$_' not known\n";
        exit(0);
    }
}
if (scalar(@ARGV) == 0) {
    $action{'all'} = 1;
    $action{'public'} = 1;
    $action{'private'} = 1;
    $action{'sms'} = 1;
    $action{'login'} = 1;
    $action{'category'} = 1;
}

# Set up options

our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $sms_in_url = mySociety::Config::get('PB_SMS_C360_INCOMING_URL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
our $contact_email = mySociety::Config::get('CONTACT_EMAIL');
sub email_n { my $n = shift; return "pbharness+$n\@$email_domain"; }
sub name_n { my $n = shift; return ($n % 100  == 0) ? "Peter Setter $n" : "Siegfried Signer $n"; }
sub mobile_n { my $n = shift; return "9876543$n"; }
sub password_n { my $n = shift; return "mypass$n"; }
our $login_count; # reference to hash of person number => how many times they've logged in

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness();
$wth->log_watcher_setup($httpd_error_log);

our $locale_url = $base_url;
sub lock_locale_url { 
    #print "lock_locale_url browser URL is " . $wth->browser_uri() . "\n" if $verbose > 1;
    $wth->browser_uri() =~ m#^(http://[^/]+)/?#; 
    $locale_url = $1;
    #print "lock_locale_url URL is " . $locale_url . "\n" if $verbose > 1;
}

$wth->database_connect('PB_');
$wth->database_drop_reload('../db/schema.sql');
$wth->database_load_schema('../db/ican-categories.sql');
$wth->database_cycle_sequences(200);
$wth->email_setup({ eveld_bin => "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });
$wth->browser_set_validator("/usr/bin/validate");
sms_setup();

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../pb/");
$wth->php_check_syntax("../../pb/templates/emails/", qr//);

# Check that we can detect PHP errors
print "Confirm we can detect errors...\n" if $verbose > 0;
$wth->log_watcher_check();
$wth->browser_get($base_url . "/test.php?error=1" );
my $errors = $wth->log_watcher_get_errors();
die "Unable to detect errors from PHP" if ($errors !~ m/deliberate_error_to_test_error_handling/);

# Run some pledges through life cycle
if ($action{'all'}) {
    print "Making unconfirmed pledge...\n" if $verbose > 0;
    do_unconfirmed_pledge();
}
if ($action{'public'}) {
    print "Making public pledge and making it succeed...\n" if $verbose > 0;
    do_public_succeeding_pledge();
} 
if ($action{'private'}) {
    print "Making private pledge and letting it expire...\n" if $verbose > 0;
    do_private_failing_pledge();
}
if ($action{'sms'}) {
    print "Testing SMS with pledge...\n" if $verbose > 0;
    do_sms_pledge();
}
if ($action{'login'}) {
    print "Testing user login...\n" if $verbose > 0;
    do_login_tests();
}
if ($action{'category'}) {
    print "Testing display of pledges of different types...\n" if $verbose > 0;
    do_category_tests();
}
if ($action{'all'}) {
    print "Checking administration functions...\n" if $verbose > 0;
    do_admin_tests();
    print "Final checks (RSS etc.)...\n" if $verbose > 0;
    do_final_checks();
}

# Check for any unhandled mails or errors
call_frequentupdate();
call_send_alerts();
$wth->email_check_none_left();
sms_check_none_left();
$wth->log_watcher_check();
if ($action{'all'})  {
    print "Everything completed successfully\n";
} else {
    print "Tests completed successfully\n";
}

#############################################################################
# Functions to make and sign pledges, and so on

# display_url URL
# Print the URL if in verbose mode.  If --pause set, also print it and 
# wait for RETURN to be pressed.
sub display_url {
    my ($circumstance, $url) = @_;
    $wth->email_check_url($url);
    print "$circumstance: " . $url . "\n" if $verbose > 1 || $pause;
    if ($pause) {
        print "Press RETURN to continue";
        readline(<STDIN>);
    }
}

# perform_login_action WHO LOGIN_OPTIONS EMAIL_TEXT
# Call after doing something which requires login.  LOGIN_OPTIONS defines what
# to do about this.  It is a hashref of values.  They are:
#   "action" which can have the values
#       "viaemail" means request a confirmation email, wait for it, and follow link in it
#       "loggedin" means expect to be already logged in
#       "password" means the user is not logged in but has a password, so log in with it
#       "wrongpassword" means the user is not logged in, try logging in with the wrong password
#       "abandon" means request a confirmation email, check it is there, but don't follow link
#       "suspend" means request a confirmation email, and leave it in mail queue table
#       "resume" means to continue from point of waiting for confirmation mail
#   "setpassword" which applies for "viaemail" and "resume" types and can have the values:
#       0 never to set the user's password
#       1 to set the user's password if second login
#   "givemail" applies for every type except "resume" and "loggedin"
#       0 the login form does not require email (was entered in an earlier form)
#       1 the login form requires email
#   TODO distinguish viaemail already logged in from not?
# EMAIL_TEXT is an SQL LIKE query fragment that confirmation mail must match.
sub perform_login_action {
    my ($who, $login_options, $email_text) = @_;
    my $login_action = $login_options->{'action'};
    my $login_fields = $login_options->{'giveemail'} ? { email => email_n($who) } : {};

    print "login by ".name_n($who)." action '$login_action' for " . $wth->browser_uri() . "\n" if $verbose > 1;

    if ($login_action eq "viaemail" || $login_action eq "abandon" || 
        $login_action eq "suspend" || $login_action eq "resume") {

        # Request confirmation email (unless we are resuming request)
        if ($login_action ne "resume") {
            $wth->browser_check_contents(qr/(I've never used PledgeBank before|Eu nunca utilizei o PledgeBank antes)/);
            $wth->browser_submit_form(form_name => 'login',
                fields => $login_fields,
                button => 'SendEmail') or die "Failed to request confirmation email";
            $wth->browser_check_contents(qr/(you'll need to click the link|um link que deve ser clicado)/);
            $wth->log_watcher_check();
        }

        # Wait for it to arrive, and extract the link (unless we are suspending request)
        my $confirmation_url;
        if ($login_action ne "suspend") {
            my $confirmation_email = $wth->email_get_containing(
                '%To: '.email_n($who).'%'.$email_text.'%');
            die "Pledge confirmation link not found\n" if ($confirmation_email !~ m#^\s*(http://.*$)#m);
            $confirmation_url = $1;
            display_url("Email confirmation URL", $confirmation_url);
            $wth->log_watcher_check();
        }

        if ($login_action eq "viaemail" || $login_action eq "resume") {
            # Follow link and confirm
            $wth->browser_get($confirmation_url);
            $login_count->{$who}++;
            if ($login_count->{$who} > 0) {
                if ($login_options->{'setpassword'}) {
                    # We accept the option to set our password
                    $wth->browser_check_contents("Would you like to set a PledgeBank password?");
                    $wth->browser_submit_form(form_name => 'loginSetPassword',
                        fields => { pw1 => password_n($who), pw2 => password_n($who) },
                        button => 'SetPassword') or die "Failed to submit no make password form";
                } else {
                    # We reject the option to set our password
                    $wth->browser_submit_form(form_name => 'loginNoPassword',
                    button => 'NoPassword') or die "Failed to submit no make password form";
                }
            }
            $wth->log_watcher_check();
        } elsif ($login_action eq "abandon" || $login_action eq "suspend") {
            # Deliberately stop without following link
            return; 
        } else {
            die;
        }
    } elsif ($login_action eq "loggedin") {
        # Nothing to do
    } elsif ($login_action eq "password") {
        $wth->browser_check_contents("I have a PledgeBank <strong>password</strong>");
        $login_fields->{'password'} = password_n($who);
        $wth->browser_submit_form(form_name => 'login',
            fields => $login_fields,
            button => 'LogIn') or die "Failed to log in with password";
        $wth->log_watcher_check();
    } elsif ($login_action eq "wrongpassword") {
        $wth->browser_check_contents("I have a PledgeBank <strong>password</strong>");
        $login_fields->{'password'} = "thispassswordisnonsense";
        $wth->browser_submit_form(form_name => 'login',
            fields => $login_fields,
            button => 'LogIn') or die "Failed to try to log in with password";
        $wth->browser_check_contents("Either your email or password weren't recognised");
        $wth->log_watcher_check();
    } elsif ($login_action eq "resume") {
        die "Calling function should handle resumes";
    } else {
        die "Unknown login action '$login_action'";
    }
}

# create_pledge WHO PAGE1 PAGE2 LOGIN_ACTION
# Creates a new pledge, setter is person number WHO.  PAGE1,
# PAGE2 and PAGE3 contain parameters for each page of the sign-up form.
# LOGIN_ACTION is passed on to perform_login_action.
sub create_pledge {
    my ($who, $page1, $page2, $page3, $login_options) = @_;
    my $login_action = $login_options->{'action'};

    print "Creating pledge ". $page1->{'ref'} . "\n" if $verbose > 1;
    $page1->{name} = name_n($who); 
    $page1->{email} = email_n($who);
    die "'resume' not supported for pledges yet" if ($login_action eq "resume");

    # Make new pledge, step 1
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text_regex => qr/(Start your own pledge|Iniciar seu proprio contrato)/);
    $wth->browser_check_contents("New Pledge");
    $wth->browser_submit_form(form_name => 'pledge', fields => $page1,
        button => 'tostep2') or die "Failed to submit creating form step 1";
    if ($page1->{target} >= 20) {
        $wth->browser_check_contents("Please lower your target");
        $wth->browser_submit_form(form_name => 'pledge', fields => { target => $page1->{target} },
            button => 'donetargetwarning') or die "Failed to submit target warning";
    }

    # Step 2
    $wth->browser_check_contents("Step 2");
    $wth->log_watcher_check();
    my $gaze_place;
    if ($page2->{gaze_place}) {
        $gaze_place = $page2->{gaze_place};
        delete $page2->{gaze_place};
    }
    $wth->browser_submit_form(form_name => 'pledge',
        fields => $page2,
        button => 'tostep3') or die "Failed to submit creating form step 2";
    if ($gaze_place) {
        # If picked textual place, select it
        $page2->{gaze_place} = $gaze_place;
        $wth->browser_submit_form(form_name => 'pledge',
            fields => $page2,
            button => 'tostep3') or die "Failed to submit creating form step 2, with place selected";
    }

    # Step 3
    $wth->browser_check_contents("Step 3");
    $wth->log_watcher_check();
    $wth->browser_submit_form(form_name => 'pledge',
        fields => $page3,
        button => 'topreview') or die "Failed to submit creating form step 3";

    # Preview
    $wth->browser_check_contents("Step 4");
    $wth->browser_submit_form(form_name => 'pledge',
        fields => {confirmconditions => 1},
        button => 'tocreate') or die "Failed to submit creating form step 4";

    # Requires authentication
    perform_login_action($who, $login_options, "to confirm that you");
    if ($login_action eq "abandon" || $login_action eq "suspend" || $login_action eq "wrongpassword") {
        print "Done creating pledge ". $page1->{'ref'} . " ($login_action)\n" if $verbose > 1;
        return;
    }
    $wth->browser_check_contents(qr/(Thank you for creating your pledge|Obrigado por criar seu contrato)/);
    print "Done creating pledge ". $page1->{'ref'} . " ($login_action)\n" if $verbose > 1;
    return;
}

# sign_pledge WHO SHOW_SIGNATURE LOGIN_ACTION EXPECTED
# Adds a signer to a pledge, assumes browser is already pointing to pledge
# signup page.  Adds person number WHO.  SHOW_SIGNATURE is 1 for their
# signature to be public, undef for private.  LOGIN_ACTION is passed
# on to perform_login_action.  EXPECTED indicates what result is expected:
#   'signed' - a successful signing (default)
#   'reached' - a successful signing, which caused pledge to reach its target
#   'finished' - failed signing, because pledge has finished (closed, expired)
#   'already' - failed signing, because you've already signed.
#   'ownpledge' - failed signing, because you're the pledge creator.
sub sign_pledge {
    my ($who, $show_signature, $login_options, $expected) = @_;
    my $login_action = $login_options->{'action'};

    # Sign up now, unless we are resuming abandoned signup
    if ($login_action ne "resume") {
        $wth->browser_check_contents("Sign up now");
        $wth->browser_submit_form(form_name => 'pledge',
            fields => { 
                name => name_n($who), email => email_n($who), showname => $show_signature 
                },
            button => 'submit') or die "Failed to submit signing form";
    }

    # Perform appropriate login action
    perform_login_action($who, $login_options, "to confirm your signature");
    return if ($login_action eq "abandon" || $login_action eq "suspend" || $login_action eq "wrongpassword");

    # Look for appropriate result in web page
    if ($expected eq 'signed' || $expected eq 'reached') {
        $wth->browser_check_contents("Thanks for signing");
        if ($expected eq 'reached') {
            $wth->browser_check_contents("Your signature has made this pledge reach its target!");
        }
    } elsif ($expected eq 'finished') {
        $wth->browser_check_contents("That pledge has already finished");
    } elsif ($expected eq 'already') {
        $wth->browser_check_contents("already signed this pledge");
    } elsif ($expected eq 'ownpledge') {
        $wth->browser_check_contents("cannot sign your own");
    } else {
        die "Unknown flag '$expected'";
    }
}

# find_and_sign_pledge FIND_TYPE FIND_STRING WHO SHOW_SIGNATURE LOGIN_ACTION EXPECTED
# Finds a public pledge depending on FIND_TYPE
#   'frontpage' - find listing via string FIND_STRING on front page
#   'list_open' - find listing via string FIND_STRING on all pledges page
#   'list_succeeded_open' - find listing via string FIND_STRING on all pledges page
#   'ref' - go directly to ref which is in FIND_STRING
# se text FIND_STRING.  Then calls
# sign_pledge.
sub find_and_sign_pledge {
    my ($find_type, $find_string, $who, $show_signature, $login_options, $expected) = @_;
    my $login_action = $login_options->{'action'};
    die "Find type '$find_type' not known" if $find_type ne 'frontpage' && $find_type ne 'list_open' && $find_type ne 'list_succeeded_open' && $find_type ne 'ref';

    if ($login_action ne "resume") {
        if ($find_type eq 'ref') {
            $wth->browser_get($locale_url . "/" . $find_string);
        } else {
            $wth->browser_get($locale_url);
            if ($find_type eq 'list_open' || $find_type eq 'list_succeeded_open') {
                $wth->browser_follow_link(text_regex => qr/All Pledges/) or die "Failed to find 'All Pledges' link";
            }
            if ($find_type eq 'list_succeeded_open') {
                $wth->browser_follow_link(text_regex => qr/Successful open/) or die "Failed to find 'Successful open' link";
            }
            $wth->browser_follow_link(text_regex => qr/$find_string/) or die "Failed to find '$find_string' link";
        }
    }
    sign_pledge($who, $show_signature, $login_options, $expected);
}

# Change the date that all parts of PledgeBank think is today.  Call with no
# parameters to reset it to the actual today.
sub set_pb_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate; insert into debugdate (override_today) values (?);', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate;');
    }
    dbh()->commit();
}

# set_pledge_prominence REF PROMINENCE
# Change pledge REF to have prominence PROMINENCE
sub set_pledge_prominence {
    my ($ref, $prominence) = @_;
    dbh()->do('update pledges set prominence = ? where ref = ?', {}, $prominence, $ref);
    dbh()->commit();
}

# Call frequentupdate cron job
sub call_frequentupdate {
    system("php", "frequentupdate", $verbose > 1 ? qw(--verbose) : ()) 
        and die "Failed to call frequentupdate";
}

# Call sendalerts cron job
sub call_send_alerts {
    system("php", "send-comment-alerts", $verbose > 1 ? qw(--verbose) : ()) 
        and die "Failed to call send-comment-alerts";
    system("php", "send-local-alerts", $verbose > 1 ? qw(--verbose) : ()) 
        and die "Failed to call send-local-alerts";
}

# Call find-pledge-connections cron job
sub call_findpledgeconnections {
    system("./find-pledge-connections", $verbose > 1 ? qw(--verbose) : ()) 
        and die "Failed to call find-pledge-connections";
}

# Run pbsmsd once
sub call_smsd {
    system("./pbsmsd", "--once", $verbose > 1 ? qw(--debug) : ()) 
        and die "Failed to call pbsmsd";
}

#############################################################################
sub do_unconfirmed_pledge {
    # Make the pledge
    set_pb_date('1980-12-01');
    my $pledge_action_unconfirmed = 'not confirm this pledge';
    my $pledge_ref = "neverconfirm";
    create_pledge(0, 
        { title => $pledge_action_unconfirmed, 
            target => '50', type => 'stubborn people', signup => 'will refuse ever to sign it',
            date => 'next thursday', ref => $pledge_ref,
        },
        { country => 'Global' },
        { },
        { action => "abandon" }
    );

    # Check not on front page
    $wth->browser_get($locale_url);
    $wth->browser_check_no_contents($pledge_action_unconfirmed);
}

#############################################################################
sub do_public_succeeding_pledge {
    # Change to US
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/choose country/, n => 1);
    $wth->browser_follow_link(text => "United States");
    lock_locale_url();

    # Sign up to local alert
    $wth->browser_get($locale_url);
    $wth->browser_submit_form(form_name => 'localalert',
        fields => {
            email => email_n(11),  # use same signer as one below, to test conversion from 
                                   # nameless to named person in the person table.
            country => 'US',
            place => 'Reno',
        },
        button => 'submit');
    $wth->browser_submit_form(form_name => 'pledge',
        fields => {
            gaze_place => '39.52972,-119.81278,Reno, Washoe County, NV'
        },
        button => 'submit');
    perform_login_action(11, {action=>"viaemail"}, "emailed whenever a new");
    $wth->browser_check_contents("Thanks for subscribing!");

    # Make the pledge
    set_pb_date('1982-02-01');
    my $pledge_action_completion = 'make sure a pledge can be completed';
    my $pledge_ref = "automatedtest";
    create_pledge(0, 
        { title => $pledge_action_completion, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '10th February', ref => $pledge_ref,
            detail => "This pledge has just one purpose.  And that is as part of an automated test suite which ensures PledgeBank always works.  It is really quite good, in our humblest opinion.  It would save the planet, if only it was more comprehensive, and updated in a timely manner.\n\nAnd this bit is the start of a brand new shiny paragraph.  It should be formatted below on posters in the correct manner.",
            identity => 'lover of PledgeBank' },
        { country => 'US', 'local' => 1, place => 'Sparks', gaze_place => '39.535,-119.75167,Sparks, Washoe County, NV' },
        { },
        { action => "viaemail" }
    );
    # Check no local alert yet (pledge has no signers, so will be backpage)
    call_send_alerts();
    $wth->email_check_none_left();

    # Add a comment, which will subscribe user 90 to comment alerts
    # (TODO: put these three comment posts in a local function)
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents("lover of PledgeBank");
    $wth->browser_submit_form(form_name => 'commentform',
        fields => {
            author_name => name_n(90), author_email => email_n(90),
            author_website => "http://www.flourish.org",
            text => "Hey! This is a great pledge.  We're sure to be able to know if the code is broken with this one.  Do I have to be a computer to take part?"
        },
        button => 'preview');
    $wth->browser_check_contents("Hey! This is a great pledge.");
    $wth->browser_submit_form(form_name => 'commentform', fields => {}, button => 'submit');
    perform_login_action(90, {action=>"viaemail"}, "comment will then be displayed");
    $wth->browser_check_contents("Your comment has now been posted");
    $wth->browser_follow_link(text_regex => qr/to the pledge comments/);
    $wth->browser_check_contents("Do I have to be a computer to take part?");
    call_send_alerts();
    $wth->email_get_containing('%To: '.email_n(0).  '%This is a great pledge%');
    # Add another comment so its email goes
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_submit_form(form_name => 'commentform',
        fields => {
            author_name => name_n(91), author_email => email_n(91),
            text => "This is a second comment, which should be sent by email to first commenter.  It cost £0 to make and was mainly done in a café.  There are some unicode characters unwittily placed within."
        },
        button => 'preview');
    $wth->browser_check_contents("This is a second comment");
    $wth->browser_submit_form(form_name => 'commentform', fields => {}, button => 'submit');
    perform_login_action(91, {action=>"viaemail"}, "comment will then be displayed");
    $wth->browser_check_contents("Your comment has now been posted");
    $wth->browser_follow_link(text_regex => qr/to the pledge comments/);
    $wth->browser_check_contents("It cost £0 to make and was mainly done in a café");
    call_send_alerts();
    $wth->email_get_containing('%To: '.email_n(0).  '%It cost £0 to make and was mainly done in a%café%');
    my $comment_alert_email = $wth->email_get_containing('%To: '.email_n(90).  '%It cost £0 to make and was mainly done in a%café%');
    $wth->email_check_none_left();
    die $comment_alert_email . "\n\nUnsubscribe link not found" if ($comment_alert_email !~ m#\b(http://.*/L/.*)\b#m);
    my $comment_unsubscribe_url = $1;
    $wth->browser_get($comment_unsubscribe_url);
    $wth->browser_check_contents("You won't receive more email");
    # Send third comment, check don't get alert
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_submit_form(form_name => 'commentform',
        fields => {
            author_name => name_n(91), author_email => email_n(91),
            text => "This is a third comment, which should not be sent by email to first commenter."
        },
        button => 'preview');
    $wth->browser_check_contents("This is a third comment");
    $wth->browser_submit_form(form_name => 'commentform', fields => {}, button => 'submit');
    perform_login_action(91, {action=>"viaemail"}, "comment will then be displayed");
    $wth->browser_check_contents("Your comment has now been posted");
    $wth->browser_follow_link(text_regex => qr/to the pledge comments/);
    $wth->browser_check_contents("This is a third comment");
    call_send_alerts();
    $wth->email_get_containing('%To: '.email_n(0).  '%This is a third comment%');
    $wth->email_check_none_left();

    # Mail pledge to friends
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_follow_link(text_regex => qr/Email pledge/);
    $wth->browser_check_contents("Email this pledge");
    my $friend_message = "Hello you!";
    $wth->browser_submit_form(form_name => 'pledge',
        fields => { 
            fromname => name_n(0), fromemail => email_n(0), 
            frommessage => $friend_message,
            email1 =>  email_n(10),
            email2 =>  email_n(11),
            email3 =>  email_n(12),
            # deliberate gap
            email5 =>  email_n(13),
            },
        button => 'submit') or die "Failed to submit friend emailing form";
    $wth->browser_check_contents("Thanks very much for spreading the word");
    $wth->log_watcher_check();
    for (my $i = 10; $i <= 13; $i++) {
        my $content = $wth->email_get_containing('%To: '.email_n($i).'%has%pledged%their%support%');
        $content =~ m#$locale_url/$pledge_ref# or die "Failed to find pledge link in friend email";
        $content =~ m#$friend_message# or die "Failed to find message in friend email";
        $content =~ m## or die "Failed to find pledge link in friend email";
    }

    # Sign it twice
    print "Signing the pledge twice...\n" if $verbose > 1;
    find_and_sign_pledge("ref", $pledge_ref, 1, 1, {action=>"viaemail"}, "signed");
    find_and_sign_pledge("list_open", $pledge_action_completion, 2, undef, {action=>"viaemail"}, "signed");

    # Now we have a signer, will get local alert
    call_send_alerts();
    $wth->email_get_containing('%To: '.email_n(11).  '%new pledge%'.$pledge_action_completion.'%');

    # Check can't get to announce page as a mere signer
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_follow_link(text_regex => qr/message to signers/);
    $wth->browser_check_contents("must be the pledge creator");
    $wth->browser_follow_link(text_regex => qr/log out/);
    # Send mid-pledge announcement, to encourage signers to do more to help
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_follow_link(text_regex => qr/message to signers/);
    perform_login_action(0, {action=>"viaemail", giveemail=>1}, "send a message to everyone");
    $wth->browser_check_contents("Send Announcement");
    $wth->browser_check_no_contents("successful");
    $wth->browser_submit_form(form_name => 'pledge',
                fields => { message_body => "Hey, please mail all your friends and get them to sign the pledge.  It's sure to work then! Love and kisses, " . name_n(0),
                },
        button => 'submit') or die "Failed to submit email success form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    # Check they all arrived
    $wth->email_get_containing( '%To: '.email_n(1).  '%From: '.name_n(0).  '%Love and kisses%');
    $wth->email_get_containing( '%To: '.email_n(2).  '%From: '.name_n(0).  '%Love and kisses%');
    call_frequentupdate();
    $wth->email_check_none_left();

    # Try to sign the pledge a second time as the same person
    find_and_sign_pledge("list_open", $pledge_action_completion, 2, 1, {action=>"viaemail"}, "already");
    # and as the creator, which also isn't allowed
    find_and_sign_pledge("list_open", $pledge_action_completion, 0, 1, {action=>"viaemail"}, "ownpledge");

    # Sign it once more, this tipping balance
    print "Signing the pledge once more...\n" if $verbose > 1;
    find_and_sign_pledge("list_open", $pledge_action_completion, 3, 1, {action=>"viaemail"}, "reached");

    # Partially sign pledge before completion state change...
    find_and_sign_pledge("list_succeeded_open", $pledge_action_completion, 4, 1, {action=>"suspend"}, "signed");

    # Check pledge has completed
    call_frequentupdate();
    $wth->browser_get($locale_url);
    $wth->browser_check_contents("Target met, pledge still open for 9 days");
    $wth->browser_follow_link(text_regex => qr/$pledge_action_completion/);
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents("1 person who did not want to give their name");
    # Check for late mid-pledge announce message
    $wth->email_get_containing( '%To: '.email_n(3).  '%From: '.name_n(0).  '%You signed this pledge after this message%Love and kisses%');
    # Check email there or not there
    my $announce_link = undef;
    for (my $i = 0; $i <= 3; ++$i) {
        if ($i == 2) {
            $wth->browser_check_no_contents(name_n($i));
        } else {
            $wth->browser_check_contents(name_n($i));
        }
        # Check got success emails
        my $success_email = $wth->email_get_containing( '%To: '.email_n($i).'%We are pleased to tell you%');
    }
    $wth->log_watcher_check();

    # Wait for reminder message
    set_pb_date('1982-02-04');
    call_frequentupdate();
    my $success_email = $wth->email_get_containing( '%To: '.email_n(0).'%However, you haven\'t sent a message yet%');
    die "Success email link not found\n" if ($success_email !~ m#^\s*(http://.*$)#m);
    $announce_link = $1;

    # Send success message using announcements page, from creator to signers.
    die "Failed to find announcements link" if !$announce_link;
    display_url("Announce URL", $announce_link);
    $wth->browser_get($announce_link);
    $wth->browser_check_contents("Send Announcement");
    $wth->browser_submit_form(form_name => 'pledge',
                fields => { message_body => "By merely partaking you have fulfilled your part in the pledge.  You rule!  This is my favourite pledge in the world and it has a lot more text these days.  Yes, it goes on and on and on for many many lines, and hopefully even word wraps in the email that it generates later.\n\nHopefully.\n\nYours sincerely, \n\n" . name_n(0),
                            message_sms => "U rul. " . (split(m/ /,name_n(0)))[0]. " x"},
        button => 'submit') or die "Failed to submit email success form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    # Check they all arrived
    for (my $i = 1; $i <= 3; ++$i) {
        my $success_email = $wth->email_get_containing( 
            '%To: '.email_n($i).
            '%From: '.name_n(0).
            '%By merely partaking%');
    }
    # Make sure no extra emails - in particular that late partial-signer hasn't got message
    call_frequentupdate();
    # TODO: Make this next line check that we only have the (unconfirmed) signup
    # message in the mail queue, and no other messages.
    # $wth->email_check_none_left();

    # ... now complete partial signature
    # (a day later, so it contains new extra header)
    set_pb_date('1982-02-05');
    find_and_sign_pledge("list_succeeded_open", $pledge_action_completion, 4, undef, {action=>"resume"}, "signed");
    # Check the late signer (number 4) also recieves the success announcement message.
    # They won't get the earlier success announcement message, instead a URL...
    call_frequentupdate();
    my $late_success_announce_email = $wth->email_get_containing( '%To: '.email_n(4).'%You signed this pledge after this message was%By merely partaking%');
    die $late_success_announce_email . "\n\nUnsubscribe link not found" if ($late_success_announce_email !~ m#\b(http://.*/L/.*)\b#m);
    my $announce_archive_link = $1;
    # ... follow it to get other messages
    $wth->browser_get($announce_archive_link);
    $wth->browser_check_contents("Love and kisses");
    $wth->browser_check_contents("By merely partaking");

    # (commented out as not very important, but hard to auto test without copying
    # lots of code from last find_and_sign_pledge for the last one)
    ## Stash test for expired tokens
    #find_and_sign_pledge($pledge_action_completion, 5, 1, {action=>"suspend"}, "signed");
    #set_pb_date('1982-02-');
    ## ... this as side effect provokes deletion of 7 day old stashes
    #find_and_sign_pledge($pledge_action_completion, 6, 1, {action=>"abandon"}, "signed");
    ## ... and check what error we get
    #find_and_sign_pledge($pledge_action_completion, 5, 1, {aciton=>"resume:nopw"}, "signed");

    # Check what happens when the pledge expires
    set_pb_date('1982-02-11');
    # Pledge should say the right things
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign up now");
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents(name_n(4));
    $wth->browser_check_no_contents(name_n(5));

    # Change back to global
    $wth->browser_get($base_url);
    lock_locale_url();
}

#############################################################################
sub do_private_failing_pledge {
    my $pledge_action_private = 'check private pledges are private';
    my $pledge_ref = "privatepledge";
    my $private_pin = 'mypin';
    set_pb_date('1980-12-01');
    create_pledge(0, 
        { title => $pledge_action_private, 
            target => '10', date => 'Dec 31st', ref => $pledge_ref
        },
        { country => 'Global' },
        { visibility => 'pin', pin => $private_pin },
        { action => "viaemail" }
    );
    # Make frontpage, to be sure that doesn't make it show
    set_pledge_prominence($pledge_ref, 'frontpage');

    # Go to private pledge page, and submit PIN to access it
    my $goto_private_pledge_page = sub {
        $wth->browser_get("$locale_url/$pledge_ref");
        $wth->browser_check_contents("PIN Protected Pledge");
        $wth->browser_check_no_contents("Incorrect PIN!");
        $wth->browser_check_no_contents($pledge_action_private);
        $wth->browser_submit_form(form_name => 'pledge',
                fields => { pin => 'thisisnotthepin' },
                button => 'submitpin') or die "Failed to submit pin form";
        $wth->browser_check_contents("Incorrect PIN!");
        $wth->browser_check_no_contents($pledge_action_private);
        $wth->browser_submit_form(form_name => 'pledge',
                fields => { pin => $private_pin },
                button => 'submitpin') or die "Failed to submit pin form";
        $wth->browser_check_contents($pledge_action_private);
    };

    # Sign up to private pledge
    &$goto_private_pledge_page();
    $wth->browser_check_no_contents("This pledge is now closed");
    sign_pledge(1, 1, {action=>"viaemail"}, "signed");
    &$goto_private_pledge_page();
    $wth->browser_check_contents("<i>1 person has signed up");

    # Try to sign up by SMS and fail, as it isn't allowed for private pledges
    sms_fake_to_pledgebank(10, "pledge $pledge_ref");
    die "Didn't get OK for incoming SMS" if $wth->browser_content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $sms_text = sms_get_containing(mobile_n(10), "%We can't find the pledge%", 0);
    print "Private sign attempt SMS text: $sms_text\n" if $verbose > 1;
    # Try to sign up by SMS, with partial pledge identifier
    sms_fake_to_pledgebank(10, "pledge rivatepl");
    die "Didn't get OK for incoming SMS" if $wth->browser_content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $sms_text = sms_get_containing(mobile_n(10), "%We can't find the pledge%", 0);
    print "Private sign attempt SMS text: $sms_text\n" if $verbose > 1;
    # Wait for delivery notification, which would confirm signature
    # (want to test that nothing happens, as nothing was signed)
    set_pb_date('1980-12-02');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    $wth->log_watcher_check();
    # Check we don't get any information leaks
    sms_check_none_left();
    # ... in particular there are no new signups
    &$goto_private_pledge_page();
    $wth->browser_check_contents("<i>1 person has signed up");
    $wth->browser_check_no_contents("This pledge is now closed");
    $wth->log_watcher_check();
 
    print "Checking no leaks of private pledge..." if $verbose > 1;

    # Check pledge really is private on lists of pledges
    # ... index page, all pledges
    $wth->browser_get($locale_url);
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);
    # ... all pledges page
    $wth->browser_get($locale_url . "/all");
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);
    # ... RSS
    $wth->browser_get($locale_url . "/rss");
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);
    $wth->log_watcher_check();

    # And all its pages require PIN to get to
    # ... email friends page
    $wth->browser_get("$locale_url/$pledge_ref/email");
    $wth->browser_check_contents("PIN Protected Pledge");
    $wth->browser_check_no_contents($pledge_action_private);
        # ... flyers index
    $wth->browser_get("$locale_url/$pledge_ref/flyers");
    $wth->browser_check_contents("PIN Protected Pledge");
    $wth->browser_check_no_contents($pledge_action_private);
    # ... individual poster
    $wth->browser_get("$locale_url/flyers/${pledge_ref}_A4_flyers8.pdf");
    $wth->browser_check_contents("Correct PIN needed");
    $wth->log_watcher_check();

    # ... ical calendar entry
    $wth->browser_get("$locale_url/$pledge_ref/ical");
    $wth->browser_check_contents("Correct PIN required");
    $wth->browser_check_no_contents($pledge_action_private);
    my $errors = $wth->log_watcher_get_errors();
    die if ($errors !~ m/Correct PIN required/);
    # ... sign page
    $wth->browser_get("$locale_url/$pledge_ref/sign");
    $wth->browser_check_contents("Permission denied");
    $wth->browser_check_no_contents($pledge_action_private);
    my $errors = $wth->log_watcher_get_errors();
    die if ($errors !~ m/Permission denied/);
    $wth->log_watcher_check();

    # Provoke chivvy too few signers email
    set_pb_date('1980-12-07');
    call_frequentupdate();
    $wth->email_get_containing('%Subject: You MUST publicise%To: '.email_n(0).  '%');
    $wth->email_check_none_left();
    # Provoke chivvy rate too low mail (we get it even though low signers count
    # as we are 'frontpage')
    set_pb_date('1980-12-10');
    call_frequentupdate();
    $wth->email_get_containing('%To: '.email_n(0).  '%rate of growth you\'ve had over the last week%');
    $wth->email_check_none_left();

    # Test what happens upon expiry
    # ... partially sign the pledge
    &$goto_private_pledge_page();
    sign_pledge(2, 1, {action=>"suspend"}, undef);
    # ... then expire it
    set_pb_date('1981-01-15');
    # ... make sure completing the partial signing fails
    sign_pledge(2, 1, {action=>"resume"}, "finished");
    # Check failure emails
    call_frequentupdate();
    my $failure_email = $wth->email_get_containing('%Subject: Sorry, your pledge failed%To: '.email_n(0).  '%');
    die "Failure email link not found\n" if ($failure_email !~ m#^\s*(http://.*$)#m);
    my $announce_link = $1;
    $wth->email_get_containing('%Subject: Pledge failed%To: '.email_n(1).  '%');

    # Make sure pledge says it is expired, and has no sign up box
    &$goto_private_pledge_page();
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign up now");

    # Send failure message using announcements page, from creators to signers
    die "Failed to find announcements link" if !$announce_link;
    display_url("Announce URL", $announce_link);
    $wth->browser_get($announce_link);
    $wth->browser_check_contents("Send Announcement");
    $wth->browser_submit_form(form_name => 'pledge',
                fields => { message_body => "What a hassle.  It is so very irksome when a pledge doesn't work.  Please sign all my other pledges instead!\n\nYours sincerely, \n\n" . name_n(0),
                            message_sms => "U suk. " . (split(m/ /,name_n(0)))[0]. " x"},
        button => 'submit') or die "Failed to submit email failure form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    my $success_email = $wth->email_get_containing('%To: '.email_n(1).  '%From: '.name_n(0).  '%What a hassle%');
    $wth->email_check_none_left();
    # Try to send second failure, which is not allowed
    $wth->browser_get($locale_url . "/$pledge_ref/announce");
    $wth->browser_check_contents("You have already sent 1 failure announcement");
}

#############################################################################

sub sms_setup {
    # Create table for outgoing SMS messages to be stored in (by pb/web/test-sms.cgi)
    dbh()->do("create table testharness_sms (
      id serial not null primary key,
      mobile text not null,
      message text not null,
      premium boolean not null)");
    dbh()->commit();


}

# sms_fake_to_pledgebank WHO MESSAGE
# Calls incoming SMS interface as if message MESSAGE had just been sent from
# the mobile phone WHO to number 60022.
our $sms_sequence = 1000;
sub sms_fake_to_pledgebank {
    my ($who, $message) = @_;
    $sms_sequence++;
    $wth->browser_post($sms_in_url, { 
            intSequence => $sms_sequence, # go up by one each time
            intTransactionID => 1, # ?
            intTime => '19820301070000', # date/time
            intDestination => '60022', # pledgebank number
            intOriginatingNumber => mobile_n($who), # mobile from #
            intDeliverer => 1, # ?
            strData => $message
    });
}

# email_get_containing MOBILE MESSAGE PREMIUM
# Returns the email containing the given STRING as an SQL expression.  i.e. Use %
# for wildcard.  It is an error if no matching mails are found within a few
# seconds, or there is more than one match.
sub sms_get_containing($$$) {
    my ($mobile, $message_like, $premium) = @_;

    # Find matching message
    my $mails = dbh()->selectall_arrayref("select id, message from testharness_sms
        where mobile = ? and message like ? and premium = ?", {}, $mobile, $message_like, $premium ? 't' : 'f');
    my $got = scalar @$mails;
    die "SMS for $mobile with '$message_like' premium $premium not found" if ($got == 0);
    die "Too many SMS found for $mobile with '$message_like' premium $premium" if ($got > 1);

    # Get content
    my ($id, $message) = @{$mails->[0]};

    # TODO: Save to logging smsbox

    # Delete from incoming queue
    dbh()->do("delete from testharness_sms where id = ?", {}, $id);
    dbh()->commit();
    return $message;
}

# sms_check_none_left
# Throws an error if there are any queued SMS messages, incoming or outgoing,
# left.
sub sms_check_none_left {
    my $received_left = dbh()->selectrow_array("select count(*) from testharness_sms");
    die "$received_left unexpected SMS received by person" if $received_left > 0;
    my $outgoing_left = dbh()->selectrow_array("select count(*) from outgoingsms");
    die "$outgoing_left unexpected outgoing SMS left" if $outgoing_left > 0;
    my $incoming_left = dbh()->selectrow_array("select count(*) from incomingsms");
    die "$incoming_left unexpected incoming SMS left" if $incoming_left > 0;
}

sub do_sms_pledge {
    # Make the pledge
    set_pb_date('1982-03-01');
    my $pledge_action_sms = 'pretend to be an SMS aggregating service';
    my $pledge_ref = "smsspoof";
    create_pledge(100, 
        { title => $pledge_action_sms, 
            target => '2', type => 'spoofed texting facilities', signup => 'do the same',
            date => '10th March', ref => $pledge_ref,
            detail => "Not sure what SMS is?  Find out here! www.wikipedia.org/wiki/Short_message_service Fab.  For more information, please visit www.ewb-uk.org/placements/2005/suriname. For more information about Engineers Without Borders UK, please visit www.ewb-uk.org, or email enquiries\@ewb-uk.org. For information regarding the project in Suriname, email suriname2005\@ewb-uk.org." },
        { country => 'Global' },
        { },
        { action => "viaemail" }
    );

    # Three basic SMS signups
    for (my $who = 101; $who <= 103; ++$who) {
        sms_fake_to_pledgebank($who, "pledge smsspoof");
        die "Didn't get OK for incoming SMS" if $wth->browser_content() ne "OK";
        $wth->log_watcher_check();
        call_smsd();
        # All first person, as sign up simultaneously
        my $conversion_sms = sms_get_containing(mobile_n($who), "%You are the 1st person to pledge%", 0);
        print "SMS text: $conversion_sms\n" if $verbose > 1;
    }
    # Check not got signup yet
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents("<i>0 people have signed up");
    # Wait for delivery notification, which confirms signature
    set_pb_date('1982-03-02');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    $wth->log_watcher_check();
    # Check signup now appears
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents("<i>3 people have signed up");

    # SMS signup with conversion
    sms_fake_to_pledgebank(105, "pledge smsspoof");
    die "Didn't get OK for incoming SMS" if $wth->browser_content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $conversion_sms = sms_get_containing(mobile_n(105), "%You are the 4th person to pledge%", 0);
    print "SMS text: $conversion_sms\n" if $verbose > 1;
    my $base_url_without_http = $base_url; $base_url_without_http =~ s#http://##;
    die "Conversion link not found in SMS '$conversion_sms'\n" if ($conversion_sms !~ m#\b($base_url_without_http[^\s]*)\b#m);
    my $conversion_url = "http://".$1;
    print "SMS conversion URL $conversion_url\n" if $verbose > 1;
    # Go to conversion link and fill in conversion form
    $wth->browser_get($conversion_url);
    $wth->browser_check_contents("rather than sending an SMS");
    $wth->browser_submit_form(form_name => 'pledge',
        fields => { 
            phone => mobile_n(105), name => name_n(105), email => email_n(105), showname => 1
            },
        button => 'submit') or die "Failed to submit SMS conversion form";
    perform_login_action(105, {action=>"viaemail"}, "to confirm your signature");
    $wth->browser_check_contents("Thanks for signing up");
    # Check signup now appears
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents(name_n(105));
    # Wait for delivery notification, which shouldn't harm anything
    set_pb_date('1982-03-03');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    # Check signup still appears
    $wth->browser_get($locale_url . "/$pledge_ref");
    $wth->browser_check_contents(name_n(105));

    # Let pledge succeed
    set_pb_date('1982-03-09');
    call_frequentupdate();
    my $success_email = $wth->email_get_containing( '%To: '.email_n(100).'%We are pleased to tell you%');
    die "Announce link not found\n" if ($success_email !~ m#^\s*(http://.*$)#m);
    my $announce_link = $1;
    display_url("Announce URL", $announce_link);
    $wth->email_get_containing( '%To: '.email_n(105).'%We are pleased to tell you%');
    # Send announce message
    $wth->browser_get($announce_link);
    $wth->browser_check_contents("Send Announcement");
    $wth->browser_submit_form(form_name => 'pledge',
                fields => { message_body => "It all worked, hurrah! Things are good when they work, especially messages to people when a pledge has been completed. Blah blah blah blah blah blah. " . name_n(100),
                            message_sms => "Yippee! All the £ are yours!" . (split(m/ /,name_n(100)))[0]. " x"},
        button => 'submit') or die "Failed to submit SMS/email announce form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    call_smsd();
    # Check they all arrived
    $wth->email_get_containing( '%To: '.email_n(105).'%hurrah!%');
    # ... the input unicode pound sign should come out as HTML entity
    for (my $who = 101; $who <= 103; ++$who) {
        my $sms_text = sms_get_containing(mobile_n($who), '%Yippee! All the &#x00a3; are yours!%', 0);
        print "SMS text: $sms_text\n" if $verbose > 1;
    }

    # Check nothing left
    set_pb_date('1982-03-10');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    sms_check_none_left();
    $wth->email_check_none_left();
}

#############################################################################
sub do_login_tests {
    # Sign up to local alert
    $wth->browser_get($locale_url);
    $wth->browser_submit_form(form_name => 'localalert',
        fields => {
            email => email_n(250),  
            country => 'GB'
        },
        button => 'submit');
    $wth->browser_submit_form(form_name => 'pledge',
        fields => {
            postcode => 'SN81rF', # Red Lion pub, Avebury
        },
        button => 'submit');
    perform_login_action(250, {action=>"viaemail"}, "emailed whenever a new");
    $wth->browser_check_contents("Thanks for subscribing!");

    # Make the pledge
    set_pb_date('1983-06-06');
    my $pledge_action_login_1 = 'make multiple pledges using the magic of login';
    my $pledge_action_login_2 = 'be wary about flooding PledgeBank with meaningless pledges';
    my $pledge_action_login_3 = 'carry on making even more pledges forever and ever and ever';
    my $pledge_action_login_4 = 'go on and on and on';
    my $pledge_ref_1 = "login1";
    my $pledge_ref_2 = "login2";
    my $pledge_ref_3 = "login3";
    my $pledge_ref_4 = "login4";

    # Make first pledge
    create_pledge(200, 
        { title => $pledge_action_login_1, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '1987-01-01', ref => $pledge_ref_1 },
        { country => 'GB', 'local' => 1, postcode => '  SN8  1AA' }, # Waitrose, Marlborough
        { },
        { action => "viaemail", setpassword => 1 }
    );
    # Checked logged in, and then logout
    $wth->browser_get($locale_url);
    $wth->browser_check_contents("Hello, " . name_n(200));
    $wth->browser_check_no_contents("Login");
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");
    $wth->browser_check_no_contents(name_n(200));

    # Second pledge, this will set password (as that is offered second time)
    create_pledge(200, 
        { title => $pledge_action_login_2, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '1987-01-01', ref => $pledge_ref_2 },
        { country => 'GB', 'local' => 1, place => 'marlborough', gaze_place => '51.4166667,-1.7166667,Marlborough' },
        { },
        { action => "viaemail", setpassword => 1 }
    );
    # Log out again
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");

    # Third pledge, use password to log in
    create_pledge(200, 
        { title => $pledge_action_login_3, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '1987-01-01', ref => $pledge_ref_3 },
        { country => 'Global' },
        { },
        { action => "password" }
    );
    # Log out again
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");

    # Log in explicitly with "login" link
    $wth->browser_get($locale_url);
    # ... first update pledge connections (to test that a bit on your pledges page)
    call_findpledgeconnections();
    $wth->browser_follow_link(text_regex => qr/Your Pledges/);
    perform_login_action(200, {action=>"password", giveemail=>1}, undef);
    # ... check gone to Your Pledges page correctly
    $wth->browser_check_contents("Open pledges you created");
    $wth->browser_check_contents($pledge_action_login_1);
    $wth->browser_check_contents($pledge_action_login_2);
    $wth->browser_check_contents($pledge_action_login_3);
    $wth->browser_check_no_contents($pledge_action_login_4);

    # Fourth pledge, expects already logged in
    create_pledge(200, 
        { title => $pledge_action_login_4, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '1987-01-01', ref => $pledge_ref_4 },
        { country => 'GB', 'local' => 0 },
        { },
        { action => "loggedin" }
    );
    
    # Check no alerts until we get one signer
    call_send_alerts();
    $wth->email_check_none_left();

    # Sign all the pledges as another user
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");
    find_and_sign_pledge("ref", $pledge_ref_1, 201, 1, {action=>"viaemail",setpassword=>1}, "signed");
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");
    # ... takes a second go to get the set password form
    find_and_sign_pledge("ref", $pledge_ref_2, 201, 1, {action=>"viaemail",setpassword=>1}, "signed");
    # Now we can sign as already logged in
    find_and_sign_pledge("ref", $pledge_ref_3, 201, 1, {action=>"loggedin"}, "signed");
    # Logout again (in order to log in with password)
    $wth->browser_follow_link(text_regex => qr/Logout/);
    $wth->browser_check_contents("now logged out");
    # ... try with wrong password
    find_and_sign_pledge("ref", $pledge_ref_4, 201, 1, {action=>"wrongpassword"}, "signed");
    # ... then with the right one
    find_and_sign_pledge("ref", $pledge_ref_4, 201, 1, {action=>"password"}, "signed");

    # Check local alert for two pledges at once works
    call_send_alerts();
    $wth->email_get_containing('%To: '.email_n(250).  '%2 new pledge%login1%login2%');
    $wth->email_check_none_left();

}

#############################################################################
sub do_category_tests {
    set_pb_date('1984-01-01');
    $wth->browser_get($base_url);
    lock_locale_url();

    # Make Portuguese language pledge
    my $pledge_action_portuguese = 'learn to speak Portuguese';
    my $pledge_ref_portugese = "portuguese";
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text_regex => qr/Portugu/);
    lock_locale_url();
    create_pledge(300, 
        { title => $pledge_action_portuguese, 
            target => '3', type => 'other monoglots', signup => 'do the same',
            date => 'Tomorrow', ref => $pledge_ref_portugese },
        { country => 'PT', 'local' => 0 },
        { },
        { action => "viaemail", setpassword => 0 }
    );
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text => "English");
    lock_locale_url();

    # Make English language pledge
    my $pledge_action_english = 'stop English taking over as the world language';
    my $pledge_ref_english = "english";
    create_pledge(300, 
        { title => $pledge_action_english, 
            target => '3', type => 'other polyglots', signup => 'do the same',
            date => 'Tomorrow', ref => $pledge_ref_english },
        { country => 'PT', 'local' => 0 }, 
        { },
        { action => "loggedin", setpassword => 0 }
    );

    # Change to Portugese pages
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text => "choose country");
    $wth->browser_follow_link(text => "Portugal");
    lock_locale_url();

    # Check pledges appear correctly
    set_pledge_prominence($pledge_ref_english, 'frontpage');
    set_pledge_prominence($pledge_ref_portugese, 'frontpage');
    $wth->browser_get($locale_url);
    $wth->browser_check_contents("mas somente se 3 other monoglots");
    $wth->browser_check_contents("but only if 3 other polyglots");

    # Change to normal pages again
    $wth->browser_get($base_url);
    lock_locale_url();
}

#############################################################################
sub do_admin_tests {
    # Send contact message
    $wth->browser_get($locale_url);
    $wth->browser_follow_link(text_regex => qr/Contact/);
    $wth->browser_check_contents("Was it useful?");
    $wth->browser_submit_form(form_name => 'contact',
            fields => { 
                name => name_n(1000), 
                email => email_n(1000), 
                subject => "Lovely site", 
                message => "Hey, your PledgeBank site rules!" },
            button => 'submit') or die "Failed to submit contact form";
    $wth->browser_check_contents("Thanks for your feedback");
    $wth->email_get_containing(
            '%Subject: Lovely site' . 
            '%To: '.$contact_email.  
            '%From: "'. name_n(1000) . '"%rules!%');

    # Submit abusive comment report
    $wth->browser_get($locale_url . "/automatedtest");
    $wth->browser_follow_link(text_regex => qr/Abusive/, n => 1);
    $wth->browser_check_contents("Report abusive, suspicious or wrong comment");
    $wth->browser_submit_form(form_name => 'abuse',
            fields => { 
                reason => "I hate this comment, it sucks",
                email => email_n(1000)},
            button => 'submit') or die "Failed to submit comment abuse form";
    $wth->browser_check_contents("One of our team will investigate");
    $wth->email_get_containing('%To: '.$contact_email.  '%New abuse report for%');

    # Check pledges and signers page
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Pledges and Signers/);
    $wth->browser_check_contents("automatedtest");
    $wth->browser_check_contents("privatepledge");
    $wth->browser_follow_link(text_regex => qr/(admin)/);
    $wth->browser_check_contents("This really is forever");

    # Check timeline page
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Timeline/);
    $wth->browser_check_contents("1st December 1980");

    # Check abuse reports page
    $wth->browser_get($admin_url);
    $wth->browser_follow_link(text_regex => qr/Abuse reports/);
    $wth->browser_check_contents(qr/pledges \(0\)/);
    $wth->browser_check_contents(qr/signers \(0\)/);
    $wth->browser_check_contents(qr/comments \(1\)/);
    $wth->browser_follow_link(text_regex => qr/pledges \(0\)/);
    $wth->browser_follow_link(text_regex => qr/signers \(0\)/);
    $wth->browser_follow_link(text_regex => qr/comments \(1\)/);
    my $name = name_n(90);
    $wth->browser_check_contents(qr/$name/);
    $wth->browser_check_contents(qr/Discard selected abuse reports/);

    # Delete a signer
    $wth->browser_get($admin_url . "/?page=pb&pledge=smsspoof");
    $wth->browser_check_contents("pretend to be an SMS aggregating service");
    $wth->browser_check_contents(mobile_n(105));
    $wth->browser_check_contents(name_n(105));
    $wth->browser_submit_form(form_name => 'removesignerform1',
            fields => { }, button => 'remove_signer') or die "Failed to remove signer";
    $wth->browser_check_contents("signer has been successfully removed");
    $wth->browser_check_contents("pretend to be an SMS aggregating service");
    $wth->browser_check_no_contents(mobile_n(105));
    $wth->browser_check_no_contents(email_n(105));

    # Delete a pledge
    $wth->browser_get($admin_url . "/?page=pb&pledge=smsspoof");
    $wth->browser_submit_form(form_name => 'removepledgepermanentlyform',
            fields => { }, button => 'remove_pledge') or die "Failed to remove pledge";
    $wth->browser_check_contents("pledge has been successfully removed");
    $wth->browser_check_no_contents("smsspoof");

    # Check there were no errors
    $wth->log_watcher_check();
}

#############################################################################
sub do_final_checks {
    # Change to UK
    $wth->browser_get($base_url);
    $wth->browser_follow_link(text_regex => qr/choose country/, n => 1);
    $wth->browser_follow_link(text => "United Kingdom");
    lock_locale_url();

    # Check RSS works and has vaguely correct entries
    $wth->browser_get($locale_url . "/rss");
    $wth->browser_check_contents(qr/make multiple pledges using the magic of login/);
    $wth->browser_check_no_contents("privatepledge");

    # Check there were no errors
    $wth->log_watcher_check();
}

