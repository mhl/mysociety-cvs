#!/usr/bin/perl -w -I../../perllib
#
# test-run:
# Test harness for PledgeBank.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for PledgeBank, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a database with name ending "_testharness"; this script will drop and remake the
#   database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

# TODO, add test code for:
#   "identity" column
#   UK postcoded pledges
#   categories
#   PDF and RTF stuff from poster.cgi
#   SMS on failure
#   sms-confirm-own template
#   sms-confirm-already template

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.62 2005-05-24 23:18:39 francis Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

sub help {
print <<END

Usage: test-run [OPTION}

Options are
    --verbose=n   Choose 0 (no progress), 1 (basic actions), 2 (full debug)

END
}

# Parse command line
our $verbose = 0; # currently 3 levels: 0, 1 and 2
our $help;
if (!GetOptions(
        'verbose=i' =>  \$verbose,
        'help' =>               \$help
    )) {
    help();
    exit(1);
}
if ($help) {
    help();
    exit(0);
}

# Set up options

our $base_url = mySociety::Config::get('BASE_URL');
our $admin_url = mySociety::Config::get('ADMIN_URL');
our $sms_in_url = mySociety::Config::get('PB_SMS_C360_INCOMING_URL');
our $httpd_error_log = mySociety::Config::get('HTTPD_ERROR_LOG');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
our $contact_email = mySociety::Config::get('CONTACT_EMAIL');
sub email_n { my $n = shift; return "pbharness+$n\@$email_domain"; }
sub name_n { my $n = shift; return ($n == 0 || $n == 100) ? "Peter Setter $n" : "Siegfried Signer $n"; }
sub mobile_n { my $n = shift; return "9876543$n"; }

#############################################################################
# Main code

# Configure test harness class
print "Set up web test harness...\n" if $verbose > 0;
our $wth = new mySociety::WebTestHarness({db_option_prefix => 'PB_'});
$wth->log_watcher_setup($httpd_error_log);
$wth->database_drop_reload('../db/schema.sql');
$wth->database_load_schema('../db/ican-categories.sql');
$wth->email_setup({ eveld_bin => "$FindBin::Bin/../../services/EvEl/bin/eveld",
                    log_mailbox => "log_mailbox" });
our $b = $wth->browser_get_agent();
sms_setup();

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../pb/");
$wth->php_check_syntax("../../pb/templates/emails/", qr//);

# Check that we can detect PHP errors
print "Confirm we can detect errors...\n" if $verbose > 0;
$wth->log_watcher_check();
$b->get($base_url . "/test.php?error=1" );
my $errors = $wth->log_watcher_get_errors();
die "Unable to detect errors from PHP" if ($errors !~ m/deliberate_error_to_test_error_handling/);

# Run some pledges through life cycle
print "Making unconfirmed pledge...\n" if $verbose > 0;
do_unconfirmed_pledge();
print "Making public pledge and making it succeed...\n" if $verbose > 0;
do_public_succeeding_pledge();
print "Making private pledge and letting it expire...\n" if $verbose > 0;
do_private_failing_pledge();
print "Testing SMS with pledge...\n" if $verbose > 0;
do_sms_pledge();
print "Checking administration functions...\n" if $verbose > 0;
do_admin_tests();
print "Final checks (RSS etc.)...\n" if $verbose > 0;
do_final_checks();

# Check for any unhandled mails or errors
$wth->email_check_none_left();
sms_check_none_left();
$wth->log_watcher_check();
print "Everything completed successfully\n";

#############################################################################
# Functions to make and sign pledges, and so on

# sign_pledge WHO SHOW_SIGNATURE LOGIN
# Adds a signer to a pledge, assumes browser is already pointing to pledge
# signup page.  Adds person number WHO.  SHOW_SIGNATURE is 1 for their
# signature to be public, undef for private.
# LOGIN defines what to do with regards to log
#   0 means expect not to be logged in, and don't log in
#   1 means expect to be already logged in
sub sign_pledge {
    my ($who, $show_signature, $login_action) = @_;

    $wth->browser_check_contents("Sign up now");
    $b->submit_form(form_name => 'pledge',
        fields => { 
            name => name_n($who), email => email_n($who), showname => $show_signature 
            },
        button => 'submit') or die "Failed to submit signing form";

    if ($login_action == 0) {
        $wth->browser_check_contents("Do you have a PledgeBank password?");
        $b->submit_form(form_name => 'loginSendEmail',
            button => 'SendEmail') or die "Failed to request confirmation email";
        $wth->browser_check_contents("you'll need to click the link");
    }
}

# find_and_sign_pledge ACTION WHO SHOW_SIGNATURE LOGIN
# Finds a public pledge from the front page use text ACTION, then calls
# sign_pledge.
sub find_and_sign_pledge {
    my ($action, $who, $show_signature, $login_action) = @_;

    $b->get($base_url);
    $b->follow_link(text_regex => qr/$action/) or die "Pledge not appeared on front page";
    sign_pledge($who, $show_signature, $login_action);
}

# confirm_signature ACTION WHO EXPECTED LOGIN
# Looks for confirmation email to WHO with pledge action ACTION.  Follows link to
# confirm the signature.  EXPECTED indicates what result is expected:
#   'signed' - a successful signing
#   'reached' - a successful signing, which caused pledge to reach its target
#   'finished' - failed signing, because pledge has finished (closed, expired)
sub confirm_signature {
    my ($action, $who, $expected) = @_;
    $expected ||= "signed";
    
    # Click link in the confirmation email
    my $confirmation_email = $wth->email_get_containing(
        '%Subject: Signing up to \''.$action.'\''.
        '%To: '.email_n($who).
        '%to confirm your signature%');
    die "Signature confirmation link not found" if ($confirmation_email !~ m#^\s*($base_url.*$)#m);
    print "Signature confirm URL is $1\n" if $verbose > 1;
    $wth->email_check_url($1);
    $b->get($1);

    # Check there were no errors
    $wth->log_watcher_check();

    # Look for appropriate result in web page
    if ($expected eq 'signed' || $expected eq 'reached') {
        $wth->browser_check_contents("Redirect...");
        $b->submit_form(form_name => 'f',
            button => '__stash_submit_button_0') or die "Failed to do POST redirect button";
        $wth->browser_check_contents("Thanks for signing");
        if ($expected eq 'reached') {
            $wth->browser_check_contents("Your signature has made this pledge reach its target!");
        }
    } elsif ($expected eq 'finished') {
        $wth->browser_check_contents("the pledge finished");
    } else {
        die "Unknown flag '$expected'";
    }
}

# create_pledge WHO PAGE1 PAGE2 LOGIN
# Creates a new pledge, setter is person number WHO.  PAGE1
# and PAGE2 contain parameters for each page of the sign-up form.
# LOGIN defines what to do with regards to log
#   0 means expect not to be logged in, and don't log in
#   1 means expect to be already logged in
sub create_pledge {
    my ($who, $page1, $page2, $login_action) = @_;
    $page1->{name} = name_n($who); 
    $page1->{email} = email_n($who);

    # Make new pledge
    $b->get($base_url);
    $b->follow_link(text_regex => qr/Start your own pledge/) or die "Start your own pledge link missing";
    $wth->browser_check_contents("New Pledge");
    $b->submit_form(form_name => 'pledge', fields => $page1,
        button => 'submit') or die "Failed to submit creating form stage 1";
    $wth->browser_check_contents("Step 2");
    $wth->log_watcher_check();
    $b->submit_form(form_name => 'pledge',
        fields => $page2,
        button => 'submit') or die "Failed to submit creating form stage 2";
    $wth->browser_check_contents("will look like this");
    $b->submit_form(form_name => 'pledge',
        button => 'submit') or die "Failed to submit creating form stage 3";

    if ($login_action == 0) {
        $wth->browser_check_contents("Do you have a PledgeBank password?");
        $b->submit_form(form_name => 'loginSendEmail',
            button => 'SendEmail') or die "Failed to request confirmation email";
        $wth->browser_check_contents("you'll need to click the link");
    } else {
        $wth->browser_check_contents("Thank you for confirming your pledge");
    }
}

# confirm_pledge WHO ACTION
sub confirm_pledge {
    my ($who, $action) = @_;
    # Confirm it
    $wth->log_watcher_check();
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.email_n($who).'%to confirm that you%');
    die "Pledge confirmation link not found\n" if ($confirmation_email !~ m#^($base_url.*$)#m);

    print "Pledge confirm URL $1\n" if $verbose > 1;
    $wth->email_check_url($1);
    $b->get($1);
    $wth->browser_check_contents("Redirect...");
    $b->submit_form(form_name => 'f',
        button => '__stash_submit_button_0') or die "Failed to do POST redirect button";

    $wth->browser_check_contents("Thank you for confirming your pledge");

    # Add all to front page
    dbh()->do("update pledges set prominence = 'frontpage'");
    dbh()->commit();
}

# do_not_confirm_pledge WHO ACTION
sub do_not_confirm_pledge {
    my ($who, $action) = @_;
    # Confirm it
    $wth->log_watcher_check();
    my $confirmation_email = $wth->email_get_containing(
        '%To: '.email_n($who).'%to confirm that you%');
    die "Confirmation link not found\n" if ($confirmation_email !~ m#^($base_url.*$)#m);
    $wth->email_check_url($1);
    # don't follow the link
}

# Change the date that all parts of PledgeBank think is today.  Call with no
# parameters to reset it to the actual today.
sub set_pb_date {
    my $new_date = shift;
    if (defined($new_date)) {
        dbh()->do('delete from debugdate; insert into debugdate (override_today) values (?);', {}, $new_date);
    } else {
        dbh()->do('delete from debugdate;');
    }
    dbh()->commit();
}

# Call frequentupdate cron job
sub call_frequentupdate {
    system("php", "frequentupdate", $verbose > 1 ? qw(--verbose) : ()) 
        and die "Failed to call frequentupdate";
}

# Run pbsmsd once
sub call_smsd {
    system("./pbsmsd", "--once", $verbose > 1 ? qw(--debug) : ()) 
        and die "Failed to call pbsmsd";
}

#############################################################################
sub do_unconfirmed_pledge {
    # Make the pledge
    set_pb_date('1980-12-01');
    my $pledge_action_unconfirmed = 'not confirm this pledge';
    my $pledge_ref = "neverconfirm";
    create_pledge(0, 
        { title => $pledge_action_unconfirmed, 
            target => '100', type => 'stubborn people', signup => 'will refuse ever to sign it',
            date => 'next thursday', ref => $pledge_ref,
        },
        { country => 'Global' },
        0
    );
    do_not_confirm_pledge(0, $pledge_action_unconfirmed);

    # Check not on front page
    $b->get($base_url);
    $wth->browser_check_no_contents($pledge_action_unconfirmed);
}

#############################################################################
sub do_public_succeeding_pledge {
    # Make the pledge
    set_pb_date('1982-02-01');
    my $pledge_action_completion = 'make sure a pledge can be completed';
    my $pledge_ref = "automatedtest";
    create_pledge(0, 
        { title => $pledge_action_completion, 
            target => '3', type => 'automated lines of code', signup => 'do the same',
            date => '10th February', ref => $pledge_ref,
            detail => "This pledge has just one purpose.  And that is as part of an automated test suite which ensures PledgeBank always works.  It is really quite good, in our humblest opinion.  It would save the planet, if only it was more comprehensive, and updated in a timely manner.\n\nAnd this bit is the start of a brand new shiny paragraph.  It should be formatted below on posters in the correct manner." },
        { country => 'Global' },
        0
    );
    confirm_pledge(0, $pledge_action_completion);

    # Add a comment
    $b->get($base_url . "/$pledge_ref");
    $b->submit_form(form_name => 'commentform',
        fields => {
            author_name => name_n(90), author_email => email_n(90),
            author_website => "http://www.flourish.org",
            text => "Hey! This is a great pledge.  We're sure to be able to know if the code is broken with this one.  Do I have to be a computer to take part?"
        },
        button => 'preview');
    $wth->browser_check_contents("Hey! This is a great pledge.");
    $b->submit_form(form_name => 'commentform', fields => {}, button => 'submit');
    $wth->browser_check_contents("Your comment has now been posted");
    $b->follow_link(text_regex => qr/to the pledge comments/) or die "Link back to comments missing";
    $wth->browser_check_contents("Do I have to be a computer to take part?");
    $wth->email_get_containing('%To: '.email_n(0).  '%has left a comment on your pledge%');

    # Mail pledge to friends
    $b->get($base_url . "/$pledge_ref");
    $b->follow_link(text_regex => qr/Email pledge/) or die "Email pledge to friends link not found";
    $wth->browser_check_contents("Email this pledge");
    my $friend_message = "Hello you!";
    $b->submit_form(form_name => 'pledge',
        fields => { 
            fromname => name_n(0), fromemail => email_n(0), 
            frommessage => $friend_message,
            email1 =>  email_n(10),
            email2 =>  email_n(11),
            email3 =>  email_n(12),
            # deliberate gap
            email5 =>  email_n(13),
            },
        button => 'submit') or die "Failed to submit friend emailing form";
    $wth->browser_check_contents("Thanks very much for spreading the word");
    $wth->log_watcher_check();
    for (my $i = 10; $i <= 13; $i++) {
        my $content = $wth->email_get_containing('%To: '.email_n($i).'%thought%you%might%be%interested%');
        $content =~ m#$base_url/$pledge_ref# or die "Failed to find pledge link in friend email";
        $content =~ m#$friend_message# or die "Failed to find message in friend email";
        $content =~ m## or die "Failed to find pledge link in friend email";
    }

    # Sign it a few times
    for (my $i = 1; $i <= 3; ++$i) {
        print "Signing the pledge $i...\n" if $verbose > 1;
        # Don't show name for one of the users
        my $show_signature = ($i == 2) ? undef : 1;
        find_and_sign_pledge($pledge_action_completion, $i, $show_signature, 0);
    }
    for (my $i = 1; $i <= 3; ++$i) {
        print "Confirming signature $i...\n" if $verbose > 1;
        my $expect_target = ($i == 3);
        confirm_signature($pledge_action_completion, $i);
    }

    # Try to sign the pledge a second time as the same person
    find_and_sign_pledge($pledge_action_completion, 2, undef, 0);
    $wth->email_get_containing('%To: '.email_n(2).
            '%you have already signed it%');

    # Partially sign pledge before completion state change...
    find_and_sign_pledge($pledge_action_completion, 4, 1, 0);

    # Check pledge has completed
    call_frequentupdate();
    $b->get($base_url);
    $wth->browser_check_contents("Target met, pledge still open for 9 days");
    $b->follow_link(text_regex => qr/$pledge_action_completion/) or die "Pledge not appeared on front page";
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents("Plus 1 other who did not want to give their name");
    my $announce_link = undef;
    for (my $i = 0; $i <= 3; ++$i) {
        # Check email there or not there
        if ($i == 2) {
            $wth->browser_check_no_contents(name_n($i));
        } else {
            $wth->browser_check_contents(name_n($i));
        }
        # Check got success emails
        my $success_email = $wth->email_get_containing( '%To: '.email_n($i).'%Congratulations%');
        # For the creator success message, get announcement link
        if ($i == 0) {
            die "Success email link not found\n" if ($success_email !~ m#^\s*($base_url.*$)#m);
            $announce_link = $1;
        }
    }
    $wth->log_watcher_check();

    # Send message using announcements page, from creator to signers.
    die "Failed to find announcements link" if !$announce_link;
    print "Announce URL is $announce_link\n" if $verbose > 1;
    $b->get($announce_link);
    $wth->browser_check_contents("Send Announcement");
    $b->submit_form(form_name => 'pledge',
                fields => { message_body => "By merely partaking you have fulfilled your part in the pledge.  You rule!  This is my favourite pledge in the world and it has a lot more text these days.  Yes, it goes on and on and on for many many lines, and hopefully even word wraps in the email that it generates later.\n\nHopefully.\n\nYours sincerely, \n\n" . name_n(0),
                            message_sms => "U rul. " . (split(m/ /,name_n(0)))[0]. " x"},
        button => 'submit') or die "Failed to submit email success form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    # Check they all arrived
    for (my $i = 1; $i <= 3; ++$i) {
        my $success_email = $wth->email_get_containing( 
            '%To: '.email_n($i).
            '%From: '.name_n(0).
            '%By merely partaking%');
    }
    # Make sure no extra emails - in particular that late partial-signer hasn't got message
    call_frequentupdate();
    # TODO: Make this next line check that we only have the (unconfirmed) signup
    # message in the mail queue, and no other messages.
    # $wth->email_check_none_left();

    # ... now complete partial signature
    # (a day later, so it contains new extra header)
    set_pb_date('1982-02-02');
    confirm_signature($pledge_action_completion, 4);
    # Check the late signer (number 4) also recieves the announcement message.
    call_frequentupdate();
    $wth->email_get_containing( '%To: '.email_n(4).'%You signed this pledge after this message was%By merely partaking%');

    # Check what happens when the pledge expires
    set_pb_date('1982-02-11');
    # Front page should no longer have pledge on it
    $b->get($base_url);
    $wth->browser_check_no_contents($pledge_action_completion);
    # Pledge should say the right things
    $b->get($base_url . "/$pledge_ref");
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign up now");
    $wth->browser_check_contents("This pledge has been successful!");
    $wth->browser_check_contents(name_n(4));
    $wth->browser_check_no_contents(name_n(5));
}

#############################################################################
sub do_private_failing_pledge {
    my $pledge_action_private = 'check private pledges are private';
    my $pledge_ref = "privatepledge";
    my $private_pin = 'zx3uuhai';
    set_pb_date('1980-12-01');
    create_pledge(0, 
        { title => $pledge_action_private, 
            target => '10', date => 'Dec 31st', ref => $pledge_ref
        },
        { country => 'Global', visibility => 'pin', pin => $private_pin },
        1
    );
    # TODO: test log in more tidily, check between different users (maybe they
    # each need thier own WWW::Mechanize instance for cookie separation!) more
    # thoroughly.
    # No need to click any confirmation email, as we should be already logged
    # in from before

    # Go to private pledge page, and submit PIN to access it
    my $goto_private_pledge_page = sub {
        $b->get("$base_url/$pledge_ref");
        $wth->browser_check_contents("PIN Protected Pledge");
        $wth->browser_check_no_contents("Incorrect pin!");
        $wth->browser_check_no_contents($pledge_action_private);
        $b->submit_form(form_name => 'pledge',
                fields => { pin => 'thisisnotthepin' },
                button => 'submitpin') or die "Failed to submit pin form";
        $wth->browser_check_contents("Incorrect pin!");
        $wth->browser_check_no_contents($pledge_action_private);
        $b->submit_form(form_name => 'pledge',
                fields => { pin => $private_pin },
                button => 'submitpin') or die "Failed to submit pin form";
        $wth->browser_check_contents($pledge_action_private);
    };

    # Sign up to private pledge
    &$goto_private_pledge_page();
    $wth->browser_check_no_contents("This pledge is now closed");
    sign_pledge(1, 1, 0);
    confirm_signature($pledge_action_private, 1);
    &$goto_private_pledge_page();
    $wth->browser_check_contents("<i>1 person has signed up");

    # Try to sign up by SMS
    sms_fake_to_pledgebank(10, "pledge $pledge_ref");
    die "Didn't get OK for incoming SMS" if $b->content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $sms_text = sms_get_containing(mobile_n(10), "%We can't find the pledge%", 0);
    print "Private sign attempt SMS text: $sms_text\n" if $verbose > 1;
    # Try to sign up by SMS, with partial pledge identifier
    sms_fake_to_pledgebank(10, "pledge rivatepl");
    die "Didn't get OK for incoming SMS" if $b->content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $sms_text = sms_get_containing(mobile_n(10), "%We can't find the pledge%", 0);
    print "Private sign attempt SMS text: $sms_text\n" if $verbose > 1;
    # Wait for delivery notification, which would confirm signature
    # (want to test that nothing happens, as nothing was signed)
    set_pb_date('1980-12-02');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    $wth->log_watcher_check();
    # Check we don't get any information leaks
    sms_check_none_left();
    # ... in particular there are no new signups
    &$goto_private_pledge_page();
    $wth->browser_check_contents("<i>1 person has signed up");
    $wth->browser_check_no_contents("This pledge is now closed");
 
    # Check pledge really is private on lists of pledges
    # ... index page, all pledges
    $b->get($base_url);
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);
    # ... all pledges page
    $b->get($base_url . "/all");
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);
    # ... RSS
    $b->get($base_url . "/rss");
    $wth->browser_check_no_contents($pledge_ref);
    $wth->browser_check_no_contents($pledge_action_private);

    # And all its pages require PIN to get to
    # ... email friends page
    $b->get("$base_url/$pledge_ref/email");
    $wth->browser_check_contents("PIN Protected Pledge");
    $wth->browser_check_no_contents($pledge_action_private);
        # ... flyers index
    $b->get("$base_url/$pledge_ref/flyers");
    $wth->browser_check_contents("PIN Protected Pledge");
    $wth->browser_check_no_contents($pledge_action_private);
    # ... individual poster
    $b->get("$base_url/flyers/${pledge_ref}_A4_flyers8.pdf");
    $wth->browser_check_contents("Correct PIN needed");

    $wth->log_watcher_check();
    # ... ical calendar entry
    $b->get("$base_url/$pledge_ref/ical");
    $wth->browser_check_contents("Correct PIN required");
    $wth->browser_check_no_contents($pledge_action_private);
    my $errors = $wth->log_watcher_get_errors();
    die if ($errors !~ m/Correct PIN required/);
    # ... sign page
    $b->get("$base_url/$pledge_ref/sign");
    $wth->browser_check_contents("Permission denied");
    $wth->browser_check_no_contents($pledge_action_private);
    my $errors = $wth->log_watcher_get_errors();
    die if ($errors !~ m/Permission denied/);

    # Test what happens upon expiry
    # ... partially sign the pledge
    &$goto_private_pledge_page();
    sign_pledge(2, 1, 0);
    # ... then expire it
    set_pb_date('1981-01-15');
    # ... make sure completing the partial signing fails
    confirm_signature($pledge_action_private, 2, 'finished');
    # Check failure emails
    call_frequentupdate();
    $wth->email_get_containing('%Subject: Sorry, your pledge failed%To: '.email_n(0).  '%');
    $wth->email_get_containing('%Subject: Pledge failed%To: '.email_n(1).  '%');

    # Make sure pledge says it is expired, and has no sign up box
    &$goto_private_pledge_page();
    $wth->browser_check_contents("This pledge is now closed");
    $wth->browser_check_no_contents("Sign up now");
}

#############################################################################

sub sms_setup {
    # Create table for outgoing SMS messages to be stored in (by pb/web/test-sms.cgi)
    dbh()->do("create table testharness_sms (
      id serial not null primary key,
      mobile text not null,
      message text not null,
      premium boolean not null)");
    dbh()->commit();


}

# sms_fake_to_pledgebank WHO MESSAGE
# Calls incoming SMS interface as if message MESSAGE had just been sent from
# the mobile phone WHO to number 60022.
our $sms_sequence = 1000;
sub sms_fake_to_pledgebank {
    my ($who, $message) = @_;
    $sms_sequence++;
    $b->post($sms_in_url, { 
            intSequence => $sms_sequence, # go up by one each time
            intTransactionID => 1, # ?
            intTime => '19820301070000', # date/time
            intDestination => '60022', # pledgebank number
            intOriginatingNumber => mobile_n($who), # mobile from #
            intDeliverer => 1, # ?
            strData => $message
    });
}

# email_get_containing MOBILE MESSAGE PREMIUM
# Returns the email containing the given STRING as an SQL expression.  i.e. Use %
# for wildcard.  It is an error if no matching mails are found within a few
# seconds, or there is more than one match.
sub sms_get_containing($$$) {
    my ($mobile, $message_like, $premium) = @_;

    # Find matching message
    my $mails = dbh()->selectall_arrayref("select id, message from testharness_sms
        where mobile = ? and message like ? and premium = ?", {}, $mobile, $message_like, $premium ? 't' : 'f');
    my $got = scalar @$mails;
    die "SMS for $mobile with '$message_like' premium $premium not found" if ($got == 0);
    die "Too many SMS found for $mobile with '$message_like' premium $premium" if ($got > 1);

    # Get content
    my ($id, $message) = @{$mails->[0]};

    # TODO: Save to logging smsbox

    # Delete from incoming queue
    dbh()->do("delete from testharness_sms where id = ?", {}, $id);
    dbh()->commit();
    return $message;
}

# sms_check_none_left
# Throws an error if there are any queued SMS messages, incoming or outgoing,
# left.
sub sms_check_none_left {
    my $received_left = dbh()->selectrow_array("select count(*) from testharness_sms");
    die "$received_left unexpected SMS received by person" if $received_left > 0;
    my $outgoing_left = dbh()->selectrow_array("select count(*) from outgoingsms");
    die "$outgoing_left unexpected outgoing SMS left" if $outgoing_left > 0;
    my $incoming_left = dbh()->selectrow_array("select count(*) from incomingsms");
    die "$incoming_left unexpected incoming SMS left" if $incoming_left > 0;
}

sub do_sms_pledge {
    # Make the pledge
    set_pb_date('1982-03-01');
    my $pledge_action_sms = 'pretend to be an SMS aggregating service';
    my $pledge_ref = "smsspoof";
    create_pledge(100, 
        { title => $pledge_action_sms, 
            target => '2', type => 'spoofed texting facilities', signup => 'do the same',
            date => '10th March', ref => $pledge_ref,
            detail => "Not sure what SMS is?  Find out here! www.wikipedia.org/wiki/Short_message_service Fab.  For more information, please visit www.ewb-uk.org/placements/2005/suriname. For more information about Engineers Without Borders UK, please visit www.ewb-uk.org, or email enquiries\@ewb-uk.org. For information regarding the project in Suriname, email suriname2005\@ewb-uk.org." },
        { country => 'Global' },
        0
    );
    confirm_pledge(100, $pledge_action_sms);

    # A basic SMS signup
    sms_fake_to_pledgebank(101, "pledge smsspoof");
    die "Didn't get OK for incoming SMS" if $b->content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    my $conversion_sms = sms_get_containing(mobile_n(101), "%you are the 1st person to pledge%", 0);
    print "SMS text: $conversion_sms\n" if $verbose > 1;
    # Check not got signup yet
    $b->get($base_url . "/$pledge_ref");
    $wth->browser_check_no_contents("<i>1 person has signed up");
    # Wait for delivery notification, which confirms signature
    set_pb_date('1982-03-02');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    $wth->log_watcher_check();
    # Check signup now appears
    $b->get($base_url . "/$pledge_ref");
    $wth->browser_check_contents("<i>1 person has signed up");

    # SMS signup with conversion
    sms_fake_to_pledgebank(102, "pledge smsspoof");
    die "Didn't get OK for incoming SMS" if $b->content() ne "OK";
    $wth->log_watcher_check();
    call_smsd();
    $conversion_sms = sms_get_containing(mobile_n(102), "%you are the 2nd person to pledge%", 0);
    print "SMS text: $conversion_sms\n" if $verbose > 1;
    my $base_url_without_http = $base_url; $base_url_without_http =~ s#http://##;
    die "Conversion link not found in SMS '$conversion_sms'\n" if ($conversion_sms !~ m#\b($base_url_without_http[^\s]*)\b#m);
    my $conversion_url = "http://".$1;
    print "SMS conversion URL $conversion_url\n" if $verbose > 1;
    # Go to conversion link and fill in conversion form
    $b->get($conversion_url);
    $wth->browser_check_contents("rather than sending an SMS");
    $b->submit_form(form_name => 'pledge',
        fields => { 
            phone => mobile_n(102), name => name_n(102), email => email_n(102), showname => 1
            },
        button => 'submit') or die "Failed to submit SMS conversion form";
    $wth->browser_check_contents("We've sent you an email to confirm your address");
    $wth->log_watcher_check();
    # Check email for confirmation of SMS conversion
    my $conversion_email = $wth->email_get_containing(
        '%To: '.email_n(102).'%to confirm your signature%');
    die "Confirmation link not found\n" if ($conversion_email !~ m#^($base_url.*$)#m);
    print "SMS convert confirm URL $1\n" if $verbose > 1;
    $wth->email_check_url($1);
    $b->get($1);
    $wth->browser_check_contents("Thanks for signing up to this pledge");
    # Check signup now appears
    $b->get($base_url . "/$pledge_ref");
    $wth->browser_check_contents(name_n(102));
    # Wait for delivery notification, which shouldn't harm anything
    set_pb_date('1982-03-03');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    # Check signup still appears
    $b->get($base_url . "/$pledge_ref");
    $wth->browser_check_contents(name_n(102));

    # Let pledge succeed
    set_pb_date('1982-03-09');
    call_frequentupdate();
    my $success_email = $wth->email_get_containing( '%To: '.email_n(100).'%Congratulations%');
    die "Announce link not found\n" if ($success_email !~ m#^($base_url.*$)#m);
    print "Announce URL $1\n" if $verbose > 1;
    my $announce_link = $1;
    $wth->email_get_containing( '%To: '.email_n(102).'%Congratulations%');
    # Send announce message
    $b->get($announce_link);
    $wth->browser_check_contents("Send Announcement");
    $b->submit_form(form_name => 'pledge',
                fields => { message_body => "It all worked, hurrah! Things are good when they work, especially messages to people when a pledge has been completed. Blah blah blah blah blah blah. " . name_n(100),
                            message_sms => "Yippee! " . (split(m/ /,name_n(100)))[0]. " x"},
        button => 'submit') or die "Failed to submit SMS/email announce form";
    $wth->browser_check_contents("Your message will now be sent to all the people who signed your pledge");
    $wth->log_watcher_check();
    call_frequentupdate();
    call_smsd();
    # Check they all arrived
    $wth->email_get_containing( '%To: '.email_n(102).'%hurrah!%');
    my $sms_text = sms_get_containing(mobile_n(101), '%Yippee!%', 0);
    print "SMS text: $sms_text\n" if $verbose > 1;

    # Check nothing left
    set_pb_date('1982-03-10');
    call_smsd();  # delivery notification
    call_smsd();  # cull done with message
    sms_check_none_left();
    $wth->email_check_none_left();
}

#############################################################################
sub do_admin_tests {
    # Send contact message
    $b->get($base_url);
    $b->follow_link(text_regex => qr/Contact/) or die "Contact link missing";
    $wth->browser_check_contents("Was it useful?");
    $b->submit_form(form_name => 'contact',
            fields => { 
                name => name_n(1000), 
                email => email_n(1000), 
                subject => "Lovely site", 
                message => "Hey, your PledgeBank site rules!" },
            button => 'submit') or die "Failed to submit contact form";
    $wth->browser_check_contents("Thanks for your feedback");
    $wth->email_get_containing('%To: '.$contact_email.  '%Subject: Lovely site' . 
            '%From: '. name_n(1000) . '%rules!%');

    # Submit abusive signature report
    $b->get($base_url . "/automatedtest");
    $b->follow_link(text_regex => qr/suspicious signer/, n => 2) or die "Signature abuse link missing";
    $wth->browser_check_contents("Report abusive signature");
    $b->submit_form(form_name => 'abuse',
            fields => { 
                reason => "I hate signer 3, he sucks" },
            button => 'submit') or die "Failed to submit signature abuse form";
    $wth->browser_check_contents("One of our team will investigate");
    $wth->email_get_containing('%To: '.$contact_email.  '%New abuse report for%');

    # Check pledges and signers page
    $b->get($admin_url);
    $b->follow_link(text_regex => qr/Pledges and Signers/) or die "Pledges and Signers link missing";
    $wth->browser_check_contents("automatedtest");
    $wth->browser_check_contents("privatepledge");

    # Check timeline page
    $b->get($admin_url);
    $b->follow_link(text_regex => qr/Timeline/) or die "Timeline link missing";
    $wth->browser_check_contents("1st December 1980");

    # Check abuse reports page
    $b->get($admin_url);
    $b->follow_link(text_regex => qr/Abuse reports/) or die "Abuse reports link missing";
    $wth->browser_check_contents(qr/pledges \(0\)/);
    $wth->browser_check_contents(qr/signers \(1\)/);
    $wth->browser_check_contents(qr/comments \(0\)/);

    # Check there were no errors
    $wth->log_watcher_check();
}

#############################################################################
sub do_final_checks {
    # Check RSS works and has correct entries
    $b->get($base_url . "/rss");
    $wth->browser_check_contents("pretend to be an SMS aggregating service - exact target reached");
    $wth->browser_check_contents("make sure a pledge can be completed - 1 over target");
    $wth->browser_check_no_contents("privatepledge");

    # Check there were no errors
    $wth->log_watcher_check();
}

