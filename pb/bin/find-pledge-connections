#!/usr/bin/perl -w
#
# find-pledge-connections:
# Compute connections between pledges on a "people who signed ... also
# signed..." basis. Designed to be run from cron.
#
# This is kind-of nasty. It would be cheaper but harder to update this
# on-the-fly as pledges are signed.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: find-pledge-connections,v 1.21 2008-01-02 01:16:42 matthew Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use PB;

# Fetch snapshot of data
my %name_pledges;
fetch_data("select pledge_id, signers.person_id, signers.name
    from signers
        join pledges on pledges.id = pledge_id
    where signers.person_id is not null
        and signers.showname
        and pledges.pin is null
        and pledges.cached_prominence <> 'backpage'");
fetch_data("select id, person_id, name
    from pledges
    where pin is null
        and cached_prominence <> 'backpage'");

# Tot up connections between pledges
my (%connection, $name_pledge, $p, @pledges, $i, $j);
foreach $name_pledge (values %name_pledges) {
    foreach $p (values %$name_pledge) {
        next unless @$p > 1;
        @pledges = sort { $a <=> $b } @$p;
        for ($i = 0; $i < @pledges - 1; ++$i) {
            for ($j = $i + 1; $j < @pledges; ++$j) {
                ++$connection{$pledges[$i]}{$pledges[$j]};
            }
        }
    }
}

# Insert new data
dbh()->do('delete from pledge_connection');
foreach my $a (keys %connection) {
    foreach my $b (keys %{$connection{$a}}) {
        dbh()->do('insert into pledge_connection (a_pledge_id, b_pledge_id, strength) values (?, ?, ?)',
            {}, $a, $b, $connection{$a}{$b});
    }
}
dbh()->commit();

sub fetch_data {
    my $q = shift;
    my $s = dbh()->prepare($q);
    $s->execute();
    while (my ($pledge_id, $person_id, $name) = $s->fetchrow_array()) {
        $name = lc($name);
        $name =~ s/[^a-z-]//g;
        push(@{$name_pledges{$person_id}{$name}}, $pledge_id);
    }
}

