#!/usr/bin/perl -w
#
# pbsmsd:
# Pledgebank SMS daemon.
#
# This does two things: managing the sending of SMS messages from the outgoing
# message queue, and calling code to process messages which have been received.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: pbsmsd,v 1.19 2005-03-30 11:17:35 sandpit Exp $';

use strict;
require 5.8.0;

# Horrible boilerplate to set up appropriate library paths.
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../../perllib";

use DateTime::Format::Strptime;
use Encode;
use Error qw(:try);
use Getopt::Long;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use Pod::Usage;
use POSIX;
use Sys::Syslog;

use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use mySociety::DBHandle qw(dbh);
use mySociety::PIDFile;
use mySociety::Util qw(print_log);

use PB;
use PB::SMS;

# Variable set in signal handler to indicate termination.
my $foad = 0;

# do_post_request WHAT URL PARAMS
# WHAT is a description of what the request accomplishes (e.g. "get receipts");
# URL is the URL to send the post to, and PARAMS is a reference to a hash of
# key-value pairs. WHAT is used as a prefix to logged messages. On success
# returns the content returned by the POST; otherwise returns a two-element
# list reference in which the first element is 'systemerror' or 'httperror' and
# the second element gives more detail about the actual error which occured.
sub do_post_request ($$$) {
    my ($what, $url, $params) = @_;
    our $ua;
    $ua ||= new LWP::UserAgent(
                    agent => "PledgeBank pbsmsd $rcsid",
                );

    my $R;
    eval {
        local $SIG{ALRM} = sub { die "timed out in eval\n"; };
        alarm(300);
        print_log('debug', "$what: doing POST to $url");
        my $resp = $ua->post($url, $params);
        alarm(0);
        if (!defined($resp)) {
            $! ||= '(no error)';
            print_log('warning', "$what: no response from user-agent; system error: $!");
            $R = ['systemerror', $!];
        } elsif ($resp->code() != 200) {
            print_log('warning', "$what: failure to send; HTTP status: " . $resp->status_line());
            foreach (split(/\r?\n/, $resp->content())) {
                print_log('warning', "$what: remote error: $_");
            }
            $R = ['httperror', $resp->status_line()];
        } else {
            print_log('debug', "$what: did POST; " . length($resp->content()) . " bytes returned");
            $R = $resp->content();
        }
    };
    if ($@) {
        $@ =~ s#\n##gs;
        print_log('warning', "$what: $@");
        $R = ['systemerror', $@];
    }

    return $R;
}

# run_sending_process
# Process the SMS sending queue.
sub run_sending_process () {
    # We attempt to send messages for which there have been no previous sending
    # attempts; or, if a previous attempt has failed, on an exponential backoff
    # schedule. With the default one-minute interval and maximum of ten
    # attempts the last delivery attempt will occur about four hours after the
    # first delivery attempt.
    use constant send_max_attempts => 10;
    use constant send_retry_interval => 60;
    my $s = dbh()->prepare("
                    select id from outgoingsms
                    where lastsendattempt is null
                        or (lastsendstatus <> 'success'
                            and lastsendattempt < ? - ? * (2 ^ (numsendattempts - 1))
                            and numsendattempts < ?)
                    order by random()
                ");

    my $niter = 0;
    while (!$foad && $niter < 10000) {
        my $nsent = 0;
        $s->execute(time(), send_retry_interval, send_max_attempts);
        while (my $id = $s->fetchrow_array()) {
            # Grab a lock on the message, assuming that it still needs to be sent.
            my ($recipient, $message, $ispremium, $numattempts) =
                dbh()->selectrow_array("
                    select recipient, message, ispremium, numsendattempts
                    from outgoingsms
                    where lastsendattempt is null
                        or (lastsendstatus <> 'success'
                            and lastsendattempt < ? - ? * (2 ^ (numsendattempts - 1)))
                    for update", {}, time(), send_retry_interval);
            next if (!defined($recipient));
            if ($numattempts >= send_max_attempts) {
                # Give up.
                my $howlong = time() - dbh()->selectrow_array('select whensubmitted from outgoingsms where id = ?', {}, $id);
                my @t = ();
                foreach ([86400, 'd'], [3600, 'h'], [60, 'm'], [1, 's']) {
                    if ($howlong > $_->[0]) {
                        push(@t, int($howlong / $_->[0]) . " " . $_->[1]);
                        $howlong = $howlong % $_->[0];
                    }
                }
                print_log('info', "giving up on delivery of #$id after " . join(' ', @t));
                dbh()->do('delete from outgoingsms where id = ?', {}, $id);
            } else {
                # Assemble parameters for message.
                #
                #   strMethod               sendSMS
                #   strShortcode            sending short code
                #   strMobile               recipient
                #   strMessage              IA5 octets of message
                #   intTransactionID        our reference
                #   intPremium              cost of premium SMS
                #
                $recipient =~ s/^\+//;
                my %p = (
                        strMethod => 'sendSMS',
                        strShortcode => '60022',        # XXX
                        strMobile => $recipient,
                        intTransactionID => $id,
                        intPremium => ($ispremium ? 25 : 0)     # XXX
                    );

                # Now we need to send the message. That means trying to
                # encode it in IA5.
                eval {
                    $p{strMessage} = PB::SMS::encode_ia5($message);
                };
                if ($@) {
                    print_log('err', "outgoing #$id, '$message', cannot be expressed in IA5; abandoning message");
                    # Mark failed so that the message is processed.
                    dbh()->do("update outgoingsms set status = 'failed' where id = ?", {}, $id);
                } else {
                    # We're OK to attempt sending.
                    my ($status, $extra);

                    my $result = do_post_request("outgoing #$id", 'http://www.c360uk.com/api/complex/pledge-query.php', \%p);
                    if (ref($result) eq 'ARRAY') {
                        ($status, $extra) = @$result;
                    } else {
                        if ($result =~ /^ID=(\d+)/) {
                            # Success; ID returned.
                            print_log('info', "outgoing #$id: sent; foreign ID is $1");
                            dbh()->do('update outgoingsms set foreignid = ? where id = ?', {}, $1, $id);
                            ($status, $extra) = ('success', undef);
                        } else {
                            $result =~ s/\s*$//;
                            $result = 'Miscellaneous error (blank ID)'
                                if ($result =~ /^ID=$/);
                            print_log('warning', "outgoing #$id: not sent; remote error: $result");
                            ($status, $extra) = ('remoteerror', $result);
                        }
                    }
                    dbh()->do('
                            update outgoingsms
                            set lastsendattempt = ?,
                                lastsendstatus = ?,
                                lastsendextrastatus = ?,
                                numsendattempts = numsendattempts + 1
                            where id = ?', {}, time(), $status, $extra, $id);
                    ++$nsent;
                }
            }
            dbh()->commit();
        }

        # Pause for a bit if we ran out of messages to send.
        sleep(10) if ($nsent == 0);

        ++$niter;
    }

    print_log('info', "sending process shutting down after $niter iterations");
}

# parse_csv_fields DATA
# Parse DATA into CSV-type fields separated by "\r\n". Each line consists of
# a number of comma-separated key="value" tuples; values may contain characters
# escaped with backslashes. Returns a reference to a list on success or undef
# on failure.
use Data::Dumper;
sub parse_csv_fields ($) {
    my @rows;
    foreach my $line (split(/\r\n/, $_[0])) {
        my %fields;
        while ($line =~ m#([^=]+)="((?:[^"]|\\.)*)"(,|$)#g) {
            my $v = $2;
            $v =~ s#\\(.)#$1#g;
            $fields{$1} = $v;
        }
        push(@rows, \%fields);
    }
    return \@rows;
}

# run_gathering_process
# Gather delivery reports and any incoming messages we've missed.
sub run_gathering_process () {
    # We have two things to do: obtain the delivery status of sent messages,
    # and pick up messages which were not delivered because of transient
    # network outages.

    # Polling status of messages. We need to supply a simple query for the
    # messages to inspect (such as "BatchID > ..."), but must not query too
    # often or too long.
    use constant min_polling_age => 120;        # give it 2 mins before asking
    use constant max_polling_age => 28 * 3600;  # 28 hours; apparently standard
    use constant min_polling_interval => 1800;

    my $s_status = dbh()->prepare("
                        select min(foreignid) from outgoingsms
                        where lastsendstatus = 'success'
                            and (status is null
                                or (status <> 'delivered'
                                    and status <> 'failed'))
                            and lastsendattempt > ?
                            and lastsendattempt < ?
                            and (laststatuscheck is null or
                                    laststatuscheck < ?)
                        ");

    # Missed messages. We try to extract ranges of missed message IDs, and
    # query them not too often and not for too long.
    my $s_missed = dbh()->prepare("
                        select gap
                        from incomingsms_foreignid_gap
                        where lastpolled is null
                            or (lastpolled > ? and lastpolled < ?)
                        order by gap
                        for update
                        ");

    my $D = new DateTime::Format::Strptime(
                pattern => '%Y-%m-%d %H:%M:%S'
                # XXX locale and timezone?
            );


    my $niter = 0;
    while (!$foad && $niter < 10000) {
        #
        # Receipts
        #
        $s_status->execute(time() - max_polling_age, time() - min_polling_age, time() - min_polling_interval);
        my $min_id = $s_status->fetchrow_array();
        if (defined($min_id)) {
            my %p = (
                    strMethod => 'getReceipts',
                    strWhere => "BatchID > $min_id"
                );

            print_log('debug', "get receipts: query is '$p{strWhere}'");
            my $result = do_post_request("get receipts", 'http://www.c360uk.com/api/complex/pledge-query.php', \%p);
            if (ref($result) eq 'ARRAY') {
                if ($result->[0] eq 'system error') {
                    print_log('warning', "get receipts: system error: $result->[1]");
                } else {
                    print_log('warning', "get receipts: HTTP error: $result->[1]");
                }
            } else {
                my $r = parse_csv_fields($result);
                if (!$r) {
                    print_log('warning', "get receipts: bad returned value: '" . substr($result, 0, 40) . "...'");
                } else {
                    foreach (@$r) {
                        my %f = %$_;
                        my $ok = 1;
                        foreach (qw(BatchID DeliveryStatus DeliveryTime)) {
                            if (!exists($f{$_})) {
                                print_log('warning', "get receipts: bad line from remote side (missing field '$_')");
                                $ok = 0;
                            }
                        }
                        next unless ($ok);
                        my $foreignid = $f{BatchID};
                        next unless (defined(dbh()->selectrow_array('
                                select id from outgoingsms
                                where foreignid = ?
                                for update',
                                {}, $foreignid)));

                        my $s = lc($f{DeliveryStatus});

                        if ($s eq 'null') {
                            # NULL is a rare condition which means that the
                            # message couldn't be passed on to the partner; we
                            # should respond to it with resubmission.
                            print_log('warning', "get receipts: message with foreign ID $foreignid had NULL status; resubmitting for transmission");
                            dbh()->do('
                                    update outgoingsms
                                    set numsendattempts = 0,
                                        lastsendattempt = null,
                                        lastsendstatus = null,
                                        lastsendextrastatus = null,
                                        foreignid = null,
                                        status = null,
                                        laststatuscheck = null
                                    where foreignid = ? ', {}, $foreignid);
                        } else {
                            my %statusmap = (
                                    acked => 'buffered',
                                    'buffered phone' => 'buffered',
                                    'buffered smsc' => 'buffered',
                                    'delivered' => 'delivered',
                                    'lost notification' => 'none',
                                    'non delivered' => 'failed'
                                );
                            if (!exists($statusmap{$s})) {
                                print_log('warning', "get receipts: message with foreign ID $foreignid has unknown status '$f{DeliveryStatus}'");
                            } else {
                                print_log('debug', "get receipts: message with foreign ID $foreignid: $statusmap{$s}");
                                dbh()->do('
                                            update outgoingsms
                                            set status = ?, laststatuscheck = ?
                                            where foreignid = ?',
                                            {}, $statusmap{$s}, time(),
                                                $foreignid);
                            }
                        }
                    }

                    # If we got a valid response at all, assume that we've
                    # successfully checked the status of all messages more
                    # recent than $min_id which we didn't get a status
                    # indication for above, in case any status reports have
                    # been lost.
                    my $num = dbh()->do('
                            update outgoingsms
                            set laststatuscheck = ?
                            where foreignid >= ?', # and laststatuscheck is null',
                            {}, time(), $min_id);
                    print_log('debug', "get receipts: marked status checked for " . int($num) . " messages") if ($num > 0);
                }
            }
        } else {
            print_log('debug', "get receipts: no outstanding messages to query for");
        }
        dbh()->commit();

        #
        # Missed messages
        #
        $s_missed->execute(time() - max_polling_age, time() - min_polling_interval);

        # Try to produce an efficient query to pick up ranges.
        my @qq;
        my ($first, $prev);
        while (my $n = $s_missed->fetchrow_array()) {
            if (defined($first)) {
                if ($n > $prev + 1) {
                    if ($first == $prev) {
                        push(@qq, "Sequence = $first");
                    } else {
                        push(@qq, "Sequence >= $first and Sequence <= $prev");
                    }
                    $first = $n;
                }
            } 
            
            $first ||= $n;
            $prev = $n;
        }

        # Don't add the last @qq clause, because there will always be one row
        # in the gaps table, referring to a message which hasn't arrived yet.
        # (It has the ID of the highest-numbered message yet received, plus
        # one). That means that if we miss a single message in an outage we
        # won't collect it until receipt of at least one other later message,
        # but that's probably acceptable.

        if (@qq) {
            my %p = (
                    strMethod => 'getInbound',
                        # XXX check for blank Reference to get rid of bad rows in table
                    strWhere => "Reference <> '' and (" . join(" or ", map { "($_)" } @qq) . ")"
                );
            print_log('debug', "get missed messages: query is '$p{strWhere}'");
            my $result = do_post_request("get missed messages", 'http://www.c360uk.com/api/complex/pledge-query.php', \%p);
            if (ref($result) eq 'ARRAY') {
                if ($result->[0] eq 'system error') {
                    print_log('warning', "get missed messages: system error: $result->[1]");
                } else {
                    print_log('warning', "get missed messages: HTTP error: $result->[1]");
                }
            } else {
                my $r = parse_csv_fields($result);
                if (!$r) {
                    print_log('warning', "get missed messages: bad returned value: '" . substr($result, 0, 40) . "...'");
                } else {
                    foreach (@$r) {
                        my %f = %$_;
                        my $ok = 1;
                        foreach (qw(Sequence ReceivedTime Source Destination Network Message)) {
                            if (!exists($f{$_})) {
                                print_log('warning', "get missed messages: bad line from remote side (missing field '$_')");
                                $ok = 0;
                                next;
                            }
                            $f{$_} =~ s/^\s+//;
                            $f{$_} =~ s/\s+$//;
                        }
                        next unless ($ok);

                        my ($foreignid, $whensent, $sender, $recipient, $network, $message)
                            = map { $f{$_} } qw(Sequence ReceivedTime Source Destination Network Message);
                        next if (defined(dbh()->selectrow_array('select id from incomingsms where foreignid = ? for update', {}, $foreignid)));

                        if (!defined($whensent = $D->parse_datetime($whensent))) {
                            print_log('warning', "get missed messages: message with foreign ID $foreignid has bad date '$f{ReceivedTime}'; assuming now");
                            $whensent = time();
                        } else {
                            $whensent = $whensent->epoch();
                        }

                        $sender =~ s#^([^+])#+$1#;
                            # recipient is a short code

                        PB::SMS::receive_sms($sender, $recipient, $network, PB::SMS::decode_ia5($message), $foreignid, $whensent);
                    }

                    # Record that we've polled these gaps and drop any which
                    # are too old.
                    dbh()->do('
                            update incomingsms_foreignid_gap
                            set lastpolled = ?
                            where lastpolled is null
                                or (lastpolled > ? and lastpolled < ?)',
                            {}, time(),
                                time() - max_polling_age,
                                time() - min_polling_interval);

                    my $n = dbh()->do('
                            delete from incomingsms_foreignid_gap
                            where lastpolled < ?',
                            {}, time() - max_polling_age);
                    print_log('warning', "get missed messages: dropped " . int($n) . " expired outstanding IDs");
                }
            }
        } else {
            print_log('debug', "missed messages: no missed message ranges to grab");
        }

        dbh()->commit();

        sleep(120);
    }
}

# run_processing_process
# Process any received messages.
sub run_processing_process () {
    # We process sent and received messages alternately. The limit clauses are
    # there so that in the presence of heavy traffic we maintain acceptable
    # latency in processing messages in both directions.
    my $s_sent = dbh()->prepare("
                        select id, message, '60022', recipient, status
                            from outgoingsms
                        where status = 'delivered'
                            or status = 'failed'
                            or status = 'rejected'
                        order by random()
                        limit 20");
    my $s_received = dbh()->prepare("
                        select id, message, sender, recipient, null
                            from incomingsms
                        order by random()
                        limit 20");

    my $niter = 0;
    while (!$foad && $niter < 10000) {
        my $n;
        my $delay = 10;
        foreach my $s ($s_sent, $s_received) {
            $s->execute();
            $n = 0;
            while (my ($id, $message, $sender, $recipient, $status) = $s->fetchrow_array()) {
                my $H;
                if (!defined($status)) {
                    $H = \@PB::SMS::received_handlers;
                } elsif ($status eq 'delivered') {
                    $H = \@PB::SMS::delivered_handlers;
                } else {
                    $H = \@PB::SMS::failed_handlers;
                }
                my $result;
                my $dodelete = 1;
                foreach (@$H) {
                    my ($name, $func) = @$_;
                    eval {
                        if (defined($status)) {
                            print_log('debug', "processing outgoing #$id (status $status) with $name");
                            $result = &$func($id, $message, $sender, $recipient, $status);
                            print_log('debug', "result of $name is " . (defined($result) ? $result : '(undef)'));
                        } else {
                            print_log('debug', "processing incoming #$id with $name");
                            $result = &$func($id, $message, $sender, $recipient);
                            print_log('debug', "result of $name is " . (defined($result) ? $result : '(undef)'));
                        }
                    };
                    if ($@) {
                        if (defined($status)) {
                            print_log('warning', "while processing outgoing #$id (status $status) with $name: $@");
                        } else {
                            print_log('warning', "while processing incoming #$id with $name: $@");
                        }
                        $dodelete = 0;
                        last;
                    } elsif ($result == 1) {
                        last;
                    }
                }
                if ($dodelete) {
                    # Processing is complete, so delete this SMS and commit the
                    # transaction.
                    if (defined($status)) {
                        dbh()->do('delete from outgoingsms where id = ?', {}, $id);
                    } else {
                        dbh()->do('delete from incomingsms where id = ?', {}, $id);
                    }
                    dbh()->commit();
                } else {
                    # Something went wrong; for safety, roll back.
                    dbh()->rollback();
                }
                ++$n;
            }
            $delay = 0 if ($n == 20);
        }

        sleep($delay) if ($delay);
        ++$niter;
    }

    print_log('info', "processing process shutting down after $niter iterations");
}

# Entry point.
my $numprocesses = mySociety::Config::get('SMS_DAEMON_SEND_PROCESSES', 5);
my $pidfilepath = mySociety::Config::get('SMS_DAEMON_PIDFILE', '/var/run/pbsmsd.pid');
my $nodetach = 0;
my $help = 0;
if (!GetOptions(
        'senderprocesses=i' =>  \$numprocesses,
        'pidfile=s' =>          \$pidfilepath,
        'debug' =>              \$nodetach,
        'help' =>               \$help
    )) {
    print_log('err', "bad options; try --help for help");
    exit(1);
}

if ($help) {
    pod2usage(-exitval => 0, -verbose => 1);
    exit(0);
}

$numprocesses = 2 if ($numprocesses < 1 or $numprocesses > 100);

mySociety::Util::daemon() unless ($nodetach);

my $pidfile;
try {
    $pidfile = new mySociety::PIDFile($pidfilepath);
} catch mySociety::PIDFile::Error with {
    my $E = shift;
    print_log('err', $E->text());
    exit(1);
};

print_log('info', "starting up; 1 processing process, 1 gathering process, $numprocesses sender processes");

# Main loop.
$SIG{TERM} = $SIG{INT} = sub { $foad = POSIX::SIGTERM }; # so children know to exit
    # catch SIGINT so that we can conveniently be run from the terminal with
    # --debug, and still shut down cleanly.
my $termsig = mySociety::Util::manage_child_processes({
        processing =>   [1, \&run_processing_process],
        gathering =>    [1, \&run_gathering_process],
        sending =>      [$numprocesses, \&run_sending_process]
    });

undef($pidfile);

if ($termsig == SIGHUP) {
    print_log('notice', "restarting on signal $termsig");
    { exec($FindBin::Script, @ARGV); }
    print_log('err', "exec: $!");
    exit(1);
} else {
    print_log('notice', "shutting down on signal $termsig");
}

exit(0);

__END__

=head1 NAME

pbsmsd

=head1 SYNOPSIS

pbsmsd --help | [OPTIONS]

=head1 DESCRIPTION

SMS sending/received-message processing daemon for PledgeBank.

=head1 OPTIONS

=over 4

=item --help

Display information about using the program.

=item --debug

Don't detach from controlling terminal; log diagnostics to standard error as
well as the system log.

=item --pidfile PATH

Use PATH as the location of the PID file. By default, uses the value defined in
the config file, or "/var/run/pbsmsd.pid".

=item --processes NUM

Run NUM SMS sending child processes. By default, uses the value defined in the
config file, or 2. There is always only one received-message processing
process.

=back

=head1 COPYRIGHT 

Copyright (c) 2005 UK Citizens Online Democracy

=head1 VERSION

$Id: pbsmsd,v 1.19 2005-03-30 11:17:35 sandpit Exp $

